{"version":3,"file":"tokenClassificationRegistry.DDNqQCr5.js","sources":["../../../../../../node_modules/vscode/vscode/src/vs/platform/theme/common/tokenClassificationRegistry.js"],"sourcesContent":["import { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Color } from '../../../base/common/color.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { localizeWithPath } from '../../../nls.js';\nimport { Extensions as Extensions$1 } from '../../jsonschemas/common/jsonContributionRegistry.js';\nimport { Registry } from '../../registry/common/platform.js';\nconst _moduleId = \"vs/platform/theme/common/tokenClassificationRegistry\";\nconst TOKEN_TYPE_WILDCARD = '*';\nconst TOKEN_CLASSIFIER_LANGUAGE_SEPARATOR = ':';\nconst CLASSIFIER_MODIFIER_SEPARATOR = '.';\nconst idPattern = '\\\\w+[-_\\\\w+]*';\nconst typeAndModifierIdPattern = `^${idPattern}$`;\nconst selectorPattern = `^(${idPattern}|\\\\*)(\\\\${CLASSIFIER_MODIFIER_SEPARATOR}${idPattern})*(${TOKEN_CLASSIFIER_LANGUAGE_SEPARATOR}${idPattern})?$`;\nconst fontStylePattern = '^(\\\\s*(italic|bold|underline|strikethrough))*\\\\s*$';\nclass TokenStyle {\n    constructor(foreground, bold, underline, strikethrough, italic) {\n        this.foreground = foreground;\n        this.bold = bold;\n        this.underline = underline;\n        this.strikethrough = strikethrough;\n        this.italic = italic;\n    }\n}\n( ((function(TokenStyle) {\n    function toJSONObject(style) {\n        return {\n            _foreground: style.foreground === undefined ? null : Color.Format.CSS.formatHexA(style.foreground, true),\n            _bold: style.bold === undefined ? null : style.bold,\n            _underline: style.underline === undefined ? null : style.underline,\n            _italic: style.italic === undefined ? null : style.italic,\n            _strikethrough: style.strikethrough === undefined ? null : style.strikethrough,\n        };\n    }\n    TokenStyle.toJSONObject = toJSONObject;\n    function fromJSONObject(obj) {\n        if (obj) {\n            const boolOrUndef = (b) => (typeof b === 'boolean') ? b : undefined;\n            const colorOrUndef = (s) => (typeof s === 'string') ? ( (Color.fromHex(s))) : undefined;\n            return (\n                 (new TokenStyle(\n                    colorOrUndef(obj._foreground),\n                    boolOrUndef(obj._bold),\n                    boolOrUndef(obj._underline),\n                    boolOrUndef(obj._strikethrough),\n                    boolOrUndef(obj._italic)\n                ))\n            );\n        }\n        return undefined;\n    }\n    TokenStyle.fromJSONObject = fromJSONObject;\n    function equals(s1, s2) {\n        if (s1 === s2) {\n            return true;\n        }\n        return s1 !== undefined && s2 !== undefined\n            && (s1.foreground instanceof Color ? s1.foreground.equals(s2.foreground) : s2.foreground === undefined)\n            && s1.bold === s2.bold\n            && s1.underline === s2.underline\n            && s1.strikethrough === s2.strikethrough\n            && s1.italic === s2.italic;\n    }\n    TokenStyle.equals = equals;\n    function is(s) {\n        return s instanceof TokenStyle;\n    }\n    TokenStyle.is = is;\n    function fromData(data) {\n        return (\n             (new TokenStyle(\n                data.foreground,\n                data.bold,\n                data.underline,\n                data.strikethrough,\n                data.italic\n            ))\n        );\n    }\n    TokenStyle.fromData = fromData;\n    function fromSettings(foreground, fontStyle, bold, underline, strikethrough, italic) {\n        let foregroundColor = undefined;\n        if (foreground !== undefined) {\n            foregroundColor = ( (Color.fromHex(foreground)));\n        }\n        if (fontStyle !== undefined) {\n            bold = italic = underline = strikethrough = false;\n            const expression = /italic|bold|underline|strikethrough/g;\n            let match;\n            while ((match = expression.exec(fontStyle))) {\n                switch (match[0]) {\n                    case 'bold':\n                        bold = true;\n                        break;\n                    case 'italic':\n                        italic = true;\n                        break;\n                    case 'underline':\n                        underline = true;\n                        break;\n                    case 'strikethrough':\n                        strikethrough = true;\n                        break;\n                }\n            }\n        }\n        return (\n             (new TokenStyle(foregroundColor, bold, underline, strikethrough, italic))\n        );\n    }\n    TokenStyle.fromSettings = fromSettings;\n})(TokenStyle || (TokenStyle = {}))));\nvar SemanticTokenRule;\n( ((function(SemanticTokenRule) {\n    function fromJSONObject(registry, o) {\n        if (o && typeof o._selector === 'string' && o._style) {\n            const style = TokenStyle.fromJSONObject(o._style);\n            if (style) {\n                try {\n                    return { selector: registry.parseTokenSelector(o._selector), style };\n                }\n                catch (_ignore) {\n                }\n            }\n        }\n        return undefined;\n    }\n    SemanticTokenRule.fromJSONObject = fromJSONObject;\n    function toJSONObject(rule) {\n        return {\n            _selector: rule.selector.id,\n            _style: TokenStyle.toJSONObject(rule.style)\n        };\n    }\n    SemanticTokenRule.toJSONObject = toJSONObject;\n    function equals(r1, r2) {\n        if (r1 === r2) {\n            return true;\n        }\n        return r1 !== undefined && r2 !== undefined\n            && r1.selector && r2.selector && r1.selector.id === r2.selector.id\n            && TokenStyle.equals(r1.style, r2.style);\n    }\n    SemanticTokenRule.equals = equals;\n    function is(r) {\n        return r && r.selector && typeof r.selector.id === 'string' && TokenStyle.is(r.style);\n    }\n    SemanticTokenRule.is = is;\n})(SemanticTokenRule || (SemanticTokenRule = {}))));\nconst Extensions = {\n    TokenClassificationContribution: 'base.contributions.tokenClassification'\n};\nclass TokenClassificationRegistry {\n    constructor() {\n        this._onDidChangeSchema = ( (new Emitter()));\n        this.onDidChangeSchema = this._onDidChangeSchema.event;\n        this.currentTypeNumber = 0;\n        this.currentModifierBit = 1;\n        this.tokenStylingDefaultRules = [];\n        this.tokenStylingSchema = {\n            type: 'object',\n            properties: {},\n            patternProperties: {\n                [selectorPattern]: getStylingSchemeEntry()\n            },\n            additionalProperties: false,\n            definitions: {\n                style: {\n                    type: 'object',\n                    description: ( localizeWithPath(_moduleId, 0, 'Colors and styles for the token.')),\n                    properties: {\n                        foreground: {\n                            type: 'string',\n                            description: ( localizeWithPath(_moduleId, 1, 'Foreground color for the token.')),\n                            format: 'color-hex',\n                            default: '#ff0000'\n                        },\n                        background: {\n                            type: 'string',\n                            deprecationMessage: ( localizeWithPath(_moduleId, 2, 'Token background colors are currently not supported.'))\n                        },\n                        fontStyle: {\n                            type: 'string',\n                            description: ( localizeWithPath(\n                                _moduleId,\n                                3,\n                                'Sets the all font styles of the rule: \\'italic\\', \\'bold\\', \\'underline\\' or \\'strikethrough\\' or a combination. All styles that are not listed are unset. The empty string unsets all styles.'\n                            )),\n                            pattern: fontStylePattern,\n                            patternErrorMessage: ( localizeWithPath(\n                                _moduleId,\n                                4,\n                                'Font style must be \\'italic\\', \\'bold\\', \\'underline\\' or \\'strikethrough\\' or a combination. The empty string unsets all styles.'\n                            )),\n                            defaultSnippets: [\n                                { label: ( localizeWithPath(_moduleId, 5, 'None (clear inherited style)')), bodyText: '\"\"' },\n                                { body: 'italic' },\n                                { body: 'bold' },\n                                { body: 'underline' },\n                                { body: 'strikethrough' },\n                                { body: 'italic bold' },\n                                { body: 'italic underline' },\n                                { body: 'italic strikethrough' },\n                                { body: 'bold underline' },\n                                { body: 'bold strikethrough' },\n                                { body: 'underline strikethrough' },\n                                { body: 'italic bold underline' },\n                                { body: 'italic bold strikethrough' },\n                                { body: 'italic underline strikethrough' },\n                                { body: 'bold underline strikethrough' },\n                                { body: 'italic bold underline strikethrough' }\n                            ]\n                        },\n                        bold: {\n                            type: 'boolean',\n                            description: ( localizeWithPath(\n                                _moduleId,\n                                6,\n                                'Sets or unsets the font style to bold. Note, the presence of \\'fontStyle\\' overrides this setting.'\n                            )),\n                        },\n                        italic: {\n                            type: 'boolean',\n                            description: ( localizeWithPath(\n                                _moduleId,\n                                7,\n                                'Sets or unsets the font style to italic. Note, the presence of \\'fontStyle\\' overrides this setting.'\n                            )),\n                        },\n                        underline: {\n                            type: 'boolean',\n                            description: ( localizeWithPath(\n                                _moduleId,\n                                8,\n                                'Sets or unsets the font style to underline. Note, the presence of \\'fontStyle\\' overrides this setting.'\n                            )),\n                        },\n                        strikethrough: {\n                            type: 'boolean',\n                            description: ( localizeWithPath(\n                                _moduleId,\n                                9,\n                                'Sets or unsets the font style to strikethrough. Note, the presence of \\'fontStyle\\' overrides this setting.'\n                            )),\n                        }\n                    },\n                    defaultSnippets: [{ body: { foreground: '${1:#FF0000}', fontStyle: '${2:bold}' } }]\n                }\n            }\n        };\n        this.tokenTypeById = Object.create(null);\n        this.tokenModifierById = Object.create(null);\n        this.typeHierarchy = Object.create(null);\n    }\n    registerTokenType(id, description, superType, deprecationMessage) {\n        if (!id.match(typeAndModifierIdPattern)) {\n            throw ( (new Error('Invalid token type id.')));\n        }\n        if (superType && !superType.match(typeAndModifierIdPattern)) {\n            throw ( (new Error('Invalid token super type id.')));\n        }\n        const num = this.currentTypeNumber++;\n        const tokenStyleContribution = { num, id, superType, description, deprecationMessage };\n        this.tokenTypeById[id] = tokenStyleContribution;\n        const stylingSchemeEntry = getStylingSchemeEntry(description, deprecationMessage);\n        this.tokenStylingSchema.properties[id] = stylingSchemeEntry;\n        this.typeHierarchy = Object.create(null);\n    }\n    registerTokenModifier(id, description, deprecationMessage) {\n        if (!id.match(typeAndModifierIdPattern)) {\n            throw ( (new Error('Invalid token modifier id.')));\n        }\n        const num = this.currentModifierBit;\n        this.currentModifierBit = this.currentModifierBit * 2;\n        const tokenStyleContribution = { num, id, description, deprecationMessage };\n        this.tokenModifierById[id] = tokenStyleContribution;\n        this.tokenStylingSchema.properties[`*.${id}`] = getStylingSchemeEntry(description, deprecationMessage);\n    }\n    parseTokenSelector(selectorString, language) {\n        const selector = parseClassifierString(selectorString, language);\n        if (!selector.type) {\n            return {\n                match: () => -1,\n                id: '$invalid'\n            };\n        }\n        return {\n            match: (type, modifiers, language) => {\n                let score = 0;\n                if (selector.language !== undefined) {\n                    if (selector.language !== language) {\n                        return -1;\n                    }\n                    score += 10;\n                }\n                if (selector.type !== TOKEN_TYPE_WILDCARD) {\n                    const hierarchy = this.getTypeHierarchy(type);\n                    const level = hierarchy.indexOf(selector.type);\n                    if (level === -1) {\n                        return -1;\n                    }\n                    score += (100 - level);\n                }\n                for (const selectorModifier of selector.modifiers) {\n                    if (modifiers.indexOf(selectorModifier) === -1) {\n                        return -1;\n                    }\n                }\n                return score + selector.modifiers.length * 100;\n            },\n            id: `${[selector.type, ...selector.modifiers.sort()].join('.')}${selector.language !== undefined ? ':' + selector.language : ''}`\n        };\n    }\n    registerTokenStyleDefault(selector, defaults) {\n        this.tokenStylingDefaultRules.push({ selector, defaults });\n    }\n    deregisterTokenStyleDefault(selector) {\n        const selectorString = selector.id;\n        this.tokenStylingDefaultRules = this.tokenStylingDefaultRules.filter(r => r.selector.id !== selectorString);\n    }\n    deregisterTokenType(id) {\n        delete this.tokenTypeById[id];\n        delete this.tokenStylingSchema.properties[id];\n        this.typeHierarchy = Object.create(null);\n    }\n    deregisterTokenModifier(id) {\n        delete this.tokenModifierById[id];\n        delete this.tokenStylingSchema.properties[`*.${id}`];\n    }\n    getTokenTypes() {\n        return (\n             (( (Object.keys(this.tokenTypeById))).map(id => this.tokenTypeById[id]))\n        );\n    }\n    getTokenModifiers() {\n        return (\n             (( (Object.keys(this.tokenModifierById))).map(id => this.tokenModifierById[id]))\n        );\n    }\n    getTokenStylingSchema() {\n        return this.tokenStylingSchema;\n    }\n    getTokenStylingDefaultRules() {\n        return this.tokenStylingDefaultRules;\n    }\n    getTypeHierarchy(typeId) {\n        let hierarchy = this.typeHierarchy[typeId];\n        if (!hierarchy) {\n            this.typeHierarchy[typeId] = hierarchy = [typeId];\n            let type = this.tokenTypeById[typeId];\n            while (type && type.superType) {\n                hierarchy.push(type.superType);\n                type = this.tokenTypeById[type.superType];\n            }\n        }\n        return hierarchy;\n    }\n    toString() {\n        const sorter = (a, b) => {\n            const cat1 = a.indexOf('.') === -1 ? 0 : 1;\n            const cat2 = b.indexOf('.') === -1 ? 0 : 1;\n            if (cat1 !== cat2) {\n                return cat1 - cat2;\n            }\n            return a.localeCompare(b);\n        };\n        return ( (( (Object.keys(this.tokenTypeById))).sort(sorter).map(k => `- \\`${k}\\`: ${this.tokenTypeById[k].description}`))).join('\\n');\n    }\n}\nconst CHAR_LANGUAGE = TOKEN_CLASSIFIER_LANGUAGE_SEPARATOR.charCodeAt(0);\nconst CHAR_MODIFIER = CLASSIFIER_MODIFIER_SEPARATOR.charCodeAt(0);\nfunction parseClassifierString(s, defaultLanguage) {\n    let k = s.length;\n    let language = defaultLanguage;\n    const modifiers = [];\n    for (let i = k - 1; i >= 0; i--) {\n        const ch = s.charCodeAt(i);\n        if (ch === CHAR_LANGUAGE || ch === CHAR_MODIFIER) {\n            const segment = s.substring(i + 1, k);\n            k = i;\n            if (ch === CHAR_LANGUAGE) {\n                language = segment;\n            }\n            else {\n                modifiers.push(segment);\n            }\n        }\n    }\n    const type = s.substring(0, k);\n    return { type, modifiers, language };\n}\nconst tokenClassificationRegistry = createDefaultTokenClassificationRegistry();\nRegistry.add(Extensions.TokenClassificationContribution, tokenClassificationRegistry);\nfunction createDefaultTokenClassificationRegistry() {\n    const registry = ( (new TokenClassificationRegistry()));\n    function registerTokenType(id, description, scopesToProbe = [], superType, deprecationMessage) {\n        registry.registerTokenType(id, description, superType, deprecationMessage);\n        if (scopesToProbe) {\n            registerTokenStyleDefault(id, scopesToProbe);\n        }\n        return id;\n    }\n    function registerTokenStyleDefault(selectorString, scopesToProbe) {\n        try {\n            const selector = registry.parseTokenSelector(selectorString);\n            registry.registerTokenStyleDefault(selector, { scopesToProbe });\n        }\n        catch (e) {\n            console.log(e);\n        }\n    }\n    registerTokenType('comment', ( localizeWithPath(_moduleId, 10, \"Style for comments.\")), [['comment']]);\n    registerTokenType('string', ( localizeWithPath(_moduleId, 11, \"Style for strings.\")), [['string']]);\n    registerTokenType('keyword', ( localizeWithPath(_moduleId, 12, \"Style for keywords.\")), [['keyword.control']]);\n    registerTokenType('number', ( localizeWithPath(_moduleId, 13, \"Style for numbers.\")), [['constant.numeric']]);\n    registerTokenType('regexp', ( localizeWithPath(_moduleId, 14, \"Style for expressions.\")), [['constant.regexp']]);\n    registerTokenType('operator', ( localizeWithPath(_moduleId, 15, \"Style for operators.\")), [['keyword.operator']]);\n    registerTokenType('namespace', ( localizeWithPath(_moduleId, 16, \"Style for namespaces.\")), [['entity.name.namespace']]);\n    registerTokenType('type', ( localizeWithPath(_moduleId, 17, \"Style for types.\")), [['entity.name.type'], ['support.type']]);\n    registerTokenType('struct', ( localizeWithPath(_moduleId, 18, \"Style for structs.\")), [['entity.name.type.struct']]);\n    registerTokenType('class', ( localizeWithPath(_moduleId, 19, \"Style for classes.\")), [['entity.name.type.class'], ['support.class']]);\n    registerTokenType('interface', ( localizeWithPath(_moduleId, 20, \"Style for interfaces.\")), [['entity.name.type.interface']]);\n    registerTokenType('enum', ( localizeWithPath(_moduleId, 21, \"Style for enums.\")), [['entity.name.type.enum']]);\n    registerTokenType('typeParameter', ( localizeWithPath(_moduleId, 22, \"Style for type parameters.\")), [['entity.name.type.parameter']]);\n    registerTokenType('function', ( localizeWithPath(_moduleId, 23, \"Style for functions\")), [['entity.name.function'], ['support.function']]);\n    registerTokenType('member', ( localizeWithPath(_moduleId, 24, \"Style for member functions\")), [], 'method', 'Deprecated use `method` instead');\n    registerTokenType('method', ( localizeWithPath(_moduleId, 25, \"Style for method (member functions)\")), [['entity.name.function.member'], ['support.function']]);\n    registerTokenType('macro', ( localizeWithPath(_moduleId, 26, \"Style for macros.\")), [['entity.name.function.preprocessor']]);\n    registerTokenType('variable', ( localizeWithPath(_moduleId, 27, \"Style for variables.\")), [['variable.other.readwrite'], ['entity.name.variable']]);\n    registerTokenType('parameter', ( localizeWithPath(_moduleId, 28, \"Style for parameters.\")), [['variable.parameter']]);\n    registerTokenType('property', ( localizeWithPath(_moduleId, 29, \"Style for properties.\")), [['variable.other.property']]);\n    registerTokenType('enumMember', ( localizeWithPath(_moduleId, 30, \"Style for enum members.\")), [['variable.other.enummember']]);\n    registerTokenType('event', ( localizeWithPath(_moduleId, 31, \"Style for events.\")), [['variable.other.event']]);\n    registerTokenType('decorator', ( localizeWithPath(_moduleId, 32, \"Style for decorators & annotations.\")), [['entity.name.decorator'], ['entity.name.function']]);\n    registerTokenType('label', ( localizeWithPath(_moduleId, 33, \"Style for labels. \")), undefined);\n    registry.registerTokenModifier('declaration', ( localizeWithPath(_moduleId, 34, \"Style for all symbol declarations.\")), undefined);\n    registry.registerTokenModifier('documentation', ( localizeWithPath(_moduleId, 35, \"Style to use for references in documentation.\")), undefined);\n    registry.registerTokenModifier('static', ( localizeWithPath(_moduleId, 36, \"Style to use for symbols that are static.\")), undefined);\n    registry.registerTokenModifier('abstract', ( localizeWithPath(_moduleId, 37, \"Style to use for symbols that are abstract.\")), undefined);\n    registry.registerTokenModifier('deprecated', ( localizeWithPath(_moduleId, 38, \"Style to use for symbols that are deprecated.\")), undefined);\n    registry.registerTokenModifier('modification', ( localizeWithPath(_moduleId, 39, \"Style to use for write accesses.\")), undefined);\n    registry.registerTokenModifier('async', ( localizeWithPath(_moduleId, 40, \"Style to use for symbols that are async.\")), undefined);\n    registry.registerTokenModifier('readonly', ( localizeWithPath(_moduleId, 41, \"Style to use for symbols that are read-only.\")), undefined);\n    registerTokenStyleDefault('variable.readonly', [['variable.other.constant']]);\n    registerTokenStyleDefault('property.readonly', [['variable.other.constant.property']]);\n    registerTokenStyleDefault('type.defaultLibrary', [['support.type']]);\n    registerTokenStyleDefault('class.defaultLibrary', [['support.class']]);\n    registerTokenStyleDefault('interface.defaultLibrary', [['support.class']]);\n    registerTokenStyleDefault('variable.defaultLibrary', [['support.variable'], ['support.other.variable']]);\n    registerTokenStyleDefault('variable.defaultLibrary.readonly', [['support.constant']]);\n    registerTokenStyleDefault('property.defaultLibrary', [['support.variable.property']]);\n    registerTokenStyleDefault('property.defaultLibrary.readonly', [['support.constant.property']]);\n    registerTokenStyleDefault('function.defaultLibrary', [['support.function']]);\n    registerTokenStyleDefault('member.defaultLibrary', [['support.function']]);\n    return registry;\n}\nfunction getTokenClassificationRegistry() {\n    return tokenClassificationRegistry;\n}\nfunction getStylingSchemeEntry(description, deprecationMessage) {\n    return {\n        description,\n        deprecationMessage,\n        defaultSnippets: [{ body: '${1:#ff0000}' }],\n        anyOf: [\n            {\n                type: 'string',\n                format: 'color-hex'\n            },\n            {\n                $ref: '#/definitions/style'\n            }\n        ]\n    };\n}\nconst tokenStylingSchemaId = 'vscode://schemas/token-styling';\nconst schemaRegistry = ( Registry.as(Extensions$1.JSONContribution));\nschemaRegistry.registerSchema(tokenStylingSchemaId, tokenClassificationRegistry.getTokenStylingSchema());\nconst delayer = ( (new RunOnceScheduler(() => schemaRegistry.notifySchemaChanged(tokenStylingSchemaId), 200)));\ntokenClassificationRegistry.onDidChangeSchema(() => {\n    if (!delayer.isScheduled()) {\n        delayer.schedule();\n    }\n});\nexport { SemanticTokenRule, TokenStyle, getTokenClassificationRegistry, parseClassifierString, tokenStylingSchemaId, typeAndModifierIdPattern };\n"],"names":["_moduleId","TOKEN_TYPE_WILDCARD","TOKEN_CLASSIFIER_LANGUAGE_SEPARATOR","CLASSIFIER_MODIFIER_SEPARATOR","idPattern","typeAndModifierIdPattern","selectorPattern","fontStylePattern","TokenStyle","foreground","bold","underline","strikethrough","italic","toJSONObject","style","Color","fromJSONObject","obj","boolOrUndef","b","colorOrUndef","s","equals","s1","s2","is","fromData","data","fromSettings","fontStyle","foregroundColor","expression","match","SemanticTokenRule","registry","o","rule","r1","r2","r","Extensions","TokenClassificationRegistry","Emitter","getStylingSchemeEntry","localizeWithPath","id","description","superType","deprecationMessage","tokenStyleContribution","stylingSchemeEntry","num","selectorString","language","selector","parseClassifierString","type","modifiers","score","level","selectorModifier","defaults","typeId","hierarchy","sorter","a","cat1","cat2","k","CHAR_LANGUAGE","CHAR_MODIFIER","defaultLanguage","i","ch","segment","tokenClassificationRegistry","createDefaultTokenClassificationRegistry","Registry","registerTokenType","scopesToProbe","registerTokenStyleDefault","e","getTokenClassificationRegistry","tokenStylingSchemaId","schemaRegistry","Extensions$1","delayer","RunOnceScheduler"],"mappings":"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","x_google_ignoreList":[0]}
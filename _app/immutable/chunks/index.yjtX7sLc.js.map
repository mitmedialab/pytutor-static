{"version":3,"file":"index.yjtX7sLc.js","sources":["../../../../../../node_modules/vscode/vscode/src/vs/workbench/services/themes/common/workbenchThemeService.js","../../../../../../node_modules/@codingame/monaco-vscode-theme-service-override/vscode/src/vs/workbench/services/themes/common/themeCompatibility.js","../../../../../../node_modules/@codingame/monaco-vscode-theme-service-override/vscode/src/vs/workbench/services/themes/common/plistParser.js","../../../../../../node_modules/@codingame/monaco-vscode-theme-service-override/vscode/src/vs/workbench/services/themes/common/textMateScopeMatcher.js","../../../../../../node_modules/@codingame/monaco-vscode-theme-service-override/vscode/src/vs/workbench/services/themes/common/colorThemeData.js","../../../../../../node_modules/@codingame/monaco-vscode-theme-service-override/vscode/src/vs/workbench/services/themes/common/productIconThemeSchema.js","../../../../../../node_modules/@codingame/monaco-vscode-theme-service-override/vscode/src/vs/workbench/services/themes/common/fileIconThemeSchema.js","../../../../../../node_modules/@codingame/monaco-vscode-theme-service-override/vscode/src/vs/workbench/services/themes/browser/fileIconThemeData.js","../../../../../../node_modules/@codingame/monaco-vscode-theme-service-override/vscode/src/vs/workbench/services/themes/common/colorThemeSchema.js","../../../../../../node_modules/@codingame/monaco-vscode-theme-service-override/vscode/src/vs/workbench/services/themes/common/themeExtensionPoints.js","../../../../../../node_modules/@codingame/monaco-vscode-theme-service-override/vscode/src/vs/workbench/services/themes/common/themeConfiguration.js","../../../../../../node_modules/@codingame/monaco-vscode-theme-service-override/vscode/src/vs/workbench/services/themes/browser/productIconThemeData.js","../../../../../../node_modules/@codingame/monaco-vscode-theme-service-override/vscode/src/vs/workbench/services/themes/browser/workbenchThemeService.js","../../../../../../node_modules/@codingame/monaco-vscode-theme-service-override/vscode/src/vs/workbench/contrib/themes/browser/themes.contribution.js","../../../../../../node_modules/@codingame/monaco-vscode-theme-service-override/theme.js"],"sourcesContent":["import { isString, isBoolean } from '../../../../base/common/types.js';\nconst VS_LIGHT_THEME = 'vs';\nconst VS_DARK_THEME = 'vs-dark';\nconst VS_HC_THEME = 'hc-black';\nconst VS_HC_LIGHT_THEME = 'hc-light';\nconst THEME_SCOPE_OPEN_PAREN = '[';\nconst THEME_SCOPE_CLOSE_PAREN = ']';\nconst THEME_SCOPE_WILDCARD = '*';\nconst themeScopeRegex = /\\[(.+?)\\]/g;\nvar ThemeSettings;\n( (function(ThemeSettings) {\n    ThemeSettings[\"COLOR_THEME\"] = \"workbench.colorTheme\";\n    ThemeSettings[\"FILE_ICON_THEME\"] = \"workbench.iconTheme\";\n    ThemeSettings[\"PRODUCT_ICON_THEME\"] = \"workbench.productIconTheme\";\n    ThemeSettings[\"COLOR_CUSTOMIZATIONS\"] = \"workbench.colorCustomizations\";\n    ThemeSettings[\"TOKEN_COLOR_CUSTOMIZATIONS\"] = \"editor.tokenColorCustomizations\";\n    ThemeSettings[\"SEMANTIC_TOKEN_COLOR_CUSTOMIZATIONS\"] = \"editor.semanticTokenColorCustomizations\";\n    ThemeSettings[\"PREFERRED_DARK_THEME\"] = \"workbench.preferredDarkColorTheme\";\n    ThemeSettings[\"PREFERRED_LIGHT_THEME\"] = \"workbench.preferredLightColorTheme\";\n    ThemeSettings[\"PREFERRED_HC_DARK_THEME\"] = \"workbench.preferredHighContrastColorTheme\";\n    ThemeSettings[\"PREFERRED_HC_LIGHT_THEME\"] = \"workbench.preferredHighContrastLightColorTheme\";\n    ThemeSettings[\"DETECT_COLOR_SCHEME\"] = \"window.autoDetectColorScheme\";\n    ThemeSettings[\"DETECT_HC\"] = \"window.autoDetectHighContrast\";\n    ThemeSettings[\"SYSTEM_COLOR_THEME\"] = \"window.systemColorTheme\";\n})(ThemeSettings || (ThemeSettings = {})));\nvar ThemeSettingDefaults;\n( (function(ThemeSettingDefaults) {\n    ThemeSettingDefaults[\"COLOR_THEME_DARK\"] = \"Default Dark Modern\";\n    ThemeSettingDefaults[\"COLOR_THEME_LIGHT\"] = \"Default Light Modern\";\n    ThemeSettingDefaults[\"COLOR_THEME_HC_DARK\"] = \"Default High Contrast\";\n    ThemeSettingDefaults[\"COLOR_THEME_HC_LIGHT\"] = \"Default High Contrast Light\";\n    ThemeSettingDefaults[\"COLOR_THEME_DARK_OLD\"] = \"Default Dark+\";\n    ThemeSettingDefaults[\"COLOR_THEME_LIGHT_OLD\"] = \"Default Light+\";\n    ThemeSettingDefaults[\"FILE_ICON_THEME\"] = \"vs-seti\";\n    ThemeSettingDefaults[\"PRODUCT_ICON_THEME\"] = \"Default\";\n})(ThemeSettingDefaults || (ThemeSettingDefaults = {})));\nconst COLOR_THEME_DARK_INITIAL_COLORS = {\n    'activityBar.background': '#181818',\n    'statusBar.background': '#181818',\n    'statusBar.noFolderBackground': '#1f1f1f',\n};\nconst COLOR_THEME_LIGHT_INITIAL_COLORS = {\n    'activityBar.background': '#f8f8f8',\n    'statusBar.background': '#f8f8f8',\n    'statusBar.noFolderBackground': '#f8f8f8'\n};\nvar ExtensionData;\n( (function(ExtensionData) {\n    function toJSONObject(d) {\n        return d && { _extensionId: d.extensionId, _extensionIsBuiltin: d.extensionIsBuiltin, _extensionName: d.extensionName, _extensionPublisher: d.extensionPublisher };\n    }\n    ExtensionData.toJSONObject = toJSONObject;\n    function fromJSONObject(o) {\n        if (o && isString(o._extensionId) && isBoolean(o._extensionIsBuiltin) && isString(o._extensionName) && isString(o._extensionPublisher)) {\n            return { extensionId: o._extensionId, extensionIsBuiltin: o._extensionIsBuiltin, extensionName: o._extensionName, extensionPublisher: o._extensionPublisher };\n        }\n        return undefined;\n    }\n    ExtensionData.fromJSONObject = fromJSONObject;\n    function fromName(publisher, name, isBuiltin = false) {\n        return { extensionPublisher: publisher, extensionId: `${publisher}.${name}`, extensionName: name, extensionIsBuiltin: isBuiltin };\n    }\n    ExtensionData.fromName = fromName;\n})(ExtensionData || (ExtensionData = {})));\nexport { COLOR_THEME_DARK_INITIAL_COLORS, COLOR_THEME_LIGHT_INITIAL_COLORS, ExtensionData, THEME_SCOPE_CLOSE_PAREN, THEME_SCOPE_OPEN_PAREN, THEME_SCOPE_WILDCARD, ThemeSettingDefaults, ThemeSettings, VS_DARK_THEME, VS_HC_LIGHT_THEME, VS_HC_THEME, VS_LIGHT_THEME, themeScopeRegex };\n","import { Color } from 'vscode/vscode/vs/base/common/color';\nimport 'vscode/vscode/vs/platform/theme/common/colorUtils';\nimport 'vscode/vscode/vs/platform/theme/common/colors/baseColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/chartsColors';\nimport { editorBackground, editorForeground, editorSelectionBackground, editorInactiveSelection, editorSelectionHighlight, editorFindMatchHighlight, editorFindMatch, editorHoverHighlight, editorFindRangeHighlight } from 'vscode/vscode/vs/platform/theme/common/colors/editorColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/inputColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/listColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/menuColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/minimapColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/miscColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/quickpickColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/searchColors';\nimport { editorLineHighlight, editorRangeHighlight, editorCursorForeground, editorWhitespaces, editorIndentGuide1, editorActiveIndentGuide1 } from 'vscode/vscode/vs/editor/common/core/editorColorRegistry';\n\nconst settingToColorIdMapping = {};\nfunction addSettingMapping(settingId, colorId) {\n    let colorIds = settingToColorIdMapping[settingId];\n    if (!colorIds) {\n        settingToColorIdMapping[settingId] = colorIds = [];\n    }\n    colorIds.push(colorId);\n}\nfunction convertSettings(oldSettings, result) {\n    for (const rule of oldSettings) {\n        result.textMateRules.push(rule);\n        if (!rule.scope) {\n            const settings = rule.settings;\n            if (!settings) {\n                rule.settings = {};\n            }\n            else {\n                for (const settingKey in settings) {\n                    const key = settingKey;\n                    const mappings = settingToColorIdMapping[key];\n                    if (mappings) {\n                        const colorHex = settings[key];\n                        if (typeof colorHex === 'string') {\n                            const color = ( Color.fromHex(colorHex));\n                            for (const colorId of mappings) {\n                                result.colors[colorId] = color;\n                            }\n                        }\n                    }\n                    if (key !== 'foreground' && key !== 'background' && key !== 'fontStyle') {\n                        delete settings[key];\n                    }\n                }\n            }\n        }\n    }\n}\naddSettingMapping('background', editorBackground);\naddSettingMapping('foreground', editorForeground);\naddSettingMapping('selection', editorSelectionBackground);\naddSettingMapping('inactiveSelection', editorInactiveSelection);\naddSettingMapping('selectionHighlightColor', editorSelectionHighlight);\naddSettingMapping('findMatchHighlight', editorFindMatchHighlight);\naddSettingMapping('currentFindMatchHighlight', editorFindMatch);\naddSettingMapping('hoverHighlight', editorHoverHighlight);\naddSettingMapping('wordHighlight', 'editor.wordHighlightBackground');\naddSettingMapping('wordHighlightStrong', 'editor.wordHighlightStrongBackground');\naddSettingMapping('findRangeHighlight', editorFindRangeHighlight);\naddSettingMapping('findMatchHighlight', 'peekViewResult.matchHighlightBackground');\naddSettingMapping('referenceHighlight', 'peekViewEditor.matchHighlightBackground');\naddSettingMapping('lineHighlight', editorLineHighlight);\naddSettingMapping('rangeHighlight', editorRangeHighlight);\naddSettingMapping('caret', editorCursorForeground);\naddSettingMapping('invisibles', editorWhitespaces);\naddSettingMapping('guide', editorIndentGuide1);\naddSettingMapping('activeGuide', editorActiveIndentGuide1);\nconst ansiColorMap = ['ansiBlack', 'ansiRed', 'ansiGreen', 'ansiYellow', 'ansiBlue', 'ansiMagenta', 'ansiCyan', 'ansiWhite',\n    'ansiBrightBlack', 'ansiBrightRed', 'ansiBrightGreen', 'ansiBrightYellow', 'ansiBrightBlue', 'ansiBrightMagenta', 'ansiBrightCyan', 'ansiBrightWhite'\n];\nfor (const color of ansiColorMap) {\n    addSettingMapping(color, 'terminal.' + color);\n}\n\nexport { convertSettings };\n","function parse(content) {\n    return _parse(content);\n}\nfunction _parse(content, filename, locationKeyName) {\n    const len = content.length;\n    let pos = 0;\n    if (len > 0 && content.charCodeAt(0) === 65279 ) {\n        pos = 1;\n    }\n    function advancePosBy(by) {\n        {\n            pos = pos + by;\n        }\n    }\n    function advancePosTo(to) {\n        {\n            pos = to;\n        }\n    }\n    function skipWhitespace() {\n        while (pos < len) {\n            const chCode = content.charCodeAt(pos);\n            if (chCode !== 32  && chCode !== 9  && chCode !== 13  && chCode !== 10 ) {\n                break;\n            }\n            advancePosBy(1);\n        }\n    }\n    function advanceIfStartsWith(str) {\n        if (content.substr(pos, str.length) === str) {\n            advancePosBy(str.length);\n            return true;\n        }\n        return false;\n    }\n    function advanceUntil(str) {\n        const nextOccurence = content.indexOf(str, pos);\n        if (nextOccurence !== -1) {\n            advancePosTo(nextOccurence + str.length);\n        }\n        else {\n            advancePosTo(len);\n        }\n    }\n    function captureUntil(str) {\n        const nextOccurence = content.indexOf(str, pos);\n        if (nextOccurence !== -1) {\n            const r = content.substring(pos, nextOccurence);\n            advancePosTo(nextOccurence + str.length);\n            return r;\n        }\n        else {\n            const r = content.substr(pos);\n            advancePosTo(len);\n            return r;\n        }\n    }\n    let state = 0 ;\n    let cur = null;\n    const stateStack = [];\n    const objStack = [];\n    let curKey = null;\n    function pushState(newState, newCur) {\n        stateStack.push(state);\n        objStack.push(cur);\n        state = newState;\n        cur = newCur;\n    }\n    function popState() {\n        if (stateStack.length === 0) {\n            return fail('illegal state stack');\n        }\n        state = stateStack.pop();\n        cur = objStack.pop();\n    }\n    function fail(msg) {\n        throw ( new Error(\n            'Near offset ' + pos + ': ' + msg + ' ~~~' + content.substr(pos, 50) + '~~~'\n        ));\n    }\n    const dictState = {\n        enterDict: function () {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            const newDict = {};\n            cur[curKey] = newDict;\n            curKey = null;\n            pushState(1 , newDict);\n        },\n        enterArray: function () {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            const newArr = [];\n            cur[curKey] = newArr;\n            curKey = null;\n            pushState(2 , newArr);\n        }\n    };\n    const arrState = {\n        enterDict: function () {\n            const newDict = {};\n            cur.push(newDict);\n            pushState(1 , newDict);\n        },\n        enterArray: function () {\n            const newArr = [];\n            cur.push(newArr);\n            pushState(2 , newArr);\n        }\n    };\n    function enterDict() {\n        if (state === 1 ) {\n            dictState.enterDict();\n        }\n        else if (state === 2 ) {\n            arrState.enterDict();\n        }\n        else {\n            cur = {};\n            pushState(1 , cur);\n        }\n    }\n    function leaveDict() {\n        if (state === 1 ) {\n            popState();\n        }\n        else if (state === 2 ) {\n            return fail('unexpected </dict>');\n        }\n        else {\n            return fail('unexpected </dict>');\n        }\n    }\n    function enterArray() {\n        if (state === 1 ) {\n            dictState.enterArray();\n        }\n        else if (state === 2 ) {\n            arrState.enterArray();\n        }\n        else {\n            cur = [];\n            pushState(2 , cur);\n        }\n    }\n    function leaveArray() {\n        if (state === 1 ) {\n            return fail('unexpected </array>');\n        }\n        else if (state === 2 ) {\n            popState();\n        }\n        else {\n            return fail('unexpected </array>');\n        }\n    }\n    function acceptKey(val) {\n        if (state === 1 ) {\n            if (curKey !== null) {\n                return fail('too many <key>');\n            }\n            curKey = val;\n        }\n        else if (state === 2 ) {\n            return fail('unexpected <key>');\n        }\n        else {\n            return fail('unexpected <key>');\n        }\n    }\n    function acceptString(val) {\n        if (state === 1 ) {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            cur[curKey] = val;\n            curKey = null;\n        }\n        else if (state === 2 ) {\n            cur.push(val);\n        }\n        else {\n            cur = val;\n        }\n    }\n    function acceptReal(val) {\n        if (isNaN(val)) {\n            return fail('cannot parse float');\n        }\n        if (state === 1 ) {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            cur[curKey] = val;\n            curKey = null;\n        }\n        else if (state === 2 ) {\n            cur.push(val);\n        }\n        else {\n            cur = val;\n        }\n    }\n    function acceptInteger(val) {\n        if (isNaN(val)) {\n            return fail('cannot parse integer');\n        }\n        if (state === 1 ) {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            cur[curKey] = val;\n            curKey = null;\n        }\n        else if (state === 2 ) {\n            cur.push(val);\n        }\n        else {\n            cur = val;\n        }\n    }\n    function acceptDate(val) {\n        if (state === 1 ) {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            cur[curKey] = val;\n            curKey = null;\n        }\n        else if (state === 2 ) {\n            cur.push(val);\n        }\n        else {\n            cur = val;\n        }\n    }\n    function acceptData(val) {\n        if (state === 1 ) {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            cur[curKey] = val;\n            curKey = null;\n        }\n        else if (state === 2 ) {\n            cur.push(val);\n        }\n        else {\n            cur = val;\n        }\n    }\n    function acceptBool(val) {\n        if (state === 1 ) {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            cur[curKey] = val;\n            curKey = null;\n        }\n        else if (state === 2 ) {\n            cur.push(val);\n        }\n        else {\n            cur = val;\n        }\n    }\n    function escapeVal(str) {\n        return str.replace(/&#([0-9]+);/g, function (_, m0) {\n            return String.fromCodePoint(parseInt(m0, 10));\n        }).replace(/&#x([0-9a-f]+);/g, function (_, m0) {\n            return String.fromCodePoint(parseInt(m0, 16));\n        }).replace(/&amp;|&lt;|&gt;|&quot;|&apos;/g, function (_) {\n            switch (_) {\n                case '&amp;': return '&';\n                case '&lt;': return '<';\n                case '&gt;': return '>';\n                case '&quot;': return '\"';\n                case '&apos;': return '\\'';\n            }\n            return _;\n        });\n    }\n    function parseOpenTag() {\n        let r = captureUntil('>');\n        let isClosed = false;\n        if (r.charCodeAt(r.length - 1) === 47 ) {\n            isClosed = true;\n            r = r.substring(0, r.length - 1);\n        }\n        return {\n            name: r.trim(),\n            isClosed: isClosed\n        };\n    }\n    function parseTagValue(tag) {\n        if (tag.isClosed) {\n            return '';\n        }\n        const val = captureUntil('</');\n        advanceUntil('>');\n        return escapeVal(val);\n    }\n    while (pos < len) {\n        skipWhitespace();\n        if (pos >= len) {\n            break;\n        }\n        const chCode = content.charCodeAt(pos);\n        advancePosBy(1);\n        if (chCode !== 60 ) {\n            return fail('expected <');\n        }\n        if (pos >= len) {\n            return fail('unexpected end of input');\n        }\n        const peekChCode = content.charCodeAt(pos);\n        if (peekChCode === 63 ) {\n            advancePosBy(1);\n            advanceUntil('?>');\n            continue;\n        }\n        if (peekChCode === 33 ) {\n            advancePosBy(1);\n            if (advanceIfStartsWith('--')) {\n                advanceUntil('-->');\n                continue;\n            }\n            advanceUntil('>');\n            continue;\n        }\n        if (peekChCode === 47 ) {\n            advancePosBy(1);\n            skipWhitespace();\n            if (advanceIfStartsWith('plist')) {\n                advanceUntil('>');\n                continue;\n            }\n            if (advanceIfStartsWith('dict')) {\n                advanceUntil('>');\n                leaveDict();\n                continue;\n            }\n            if (advanceIfStartsWith('array')) {\n                advanceUntil('>');\n                leaveArray();\n                continue;\n            }\n            return fail('unexpected closed tag');\n        }\n        const tag = parseOpenTag();\n        switch (tag.name) {\n            case 'dict':\n                enterDict();\n                if (tag.isClosed) {\n                    leaveDict();\n                }\n                continue;\n            case 'array':\n                enterArray();\n                if (tag.isClosed) {\n                    leaveArray();\n                }\n                continue;\n            case 'key':\n                acceptKey(parseTagValue(tag));\n                continue;\n            case 'string':\n                acceptString(parseTagValue(tag));\n                continue;\n            case 'real':\n                acceptReal(parseFloat(parseTagValue(tag)));\n                continue;\n            case 'integer':\n                acceptInteger(parseInt(parseTagValue(tag), 10));\n                continue;\n            case 'date':\n                acceptDate(( new Date(parseTagValue(tag))));\n                continue;\n            case 'data':\n                acceptData(parseTagValue(tag));\n                continue;\n            case 'true':\n                parseTagValue(tag);\n                acceptBool(true);\n                continue;\n            case 'false':\n                parseTagValue(tag);\n                acceptBool(false);\n                continue;\n        }\n        if (/^plist/.test(tag.name)) {\n            continue;\n        }\n        return fail('unexpected opened tag ' + tag.name);\n    }\n    return cur;\n}\n\nexport { parse };\n","function createMatchers(selector, matchesName, results) {\n    const tokenizer = newTokenizer(selector);\n    let token = tokenizer.next();\n    while (token !== null) {\n        let priority = 0;\n        if (token.length === 2 && token.charAt(1) === ':') {\n            switch (token.charAt(0)) {\n                case 'R':\n                    priority = 1;\n                    break;\n                case 'L':\n                    priority = -1;\n                    break;\n                default:\n                    console.log(`Unknown priority ${token} in scope selector`);\n            }\n            token = tokenizer.next();\n        }\n        const matcher = parseConjunction();\n        if (matcher) {\n            results.push({ matcher, priority });\n        }\n        if (token !== ',') {\n            break;\n        }\n        token = tokenizer.next();\n    }\n    function parseOperand() {\n        if (token === '-') {\n            token = tokenizer.next();\n            const expressionToNegate = parseOperand();\n            if (!expressionToNegate) {\n                return null;\n            }\n            return matcherInput => {\n                const score = expressionToNegate(matcherInput);\n                return score < 0 ? 0 : -1;\n            };\n        }\n        if (token === '(') {\n            token = tokenizer.next();\n            const expressionInParents = parseInnerExpression();\n            if (token === ')') {\n                token = tokenizer.next();\n            }\n            return expressionInParents;\n        }\n        if (isIdentifier(token)) {\n            const identifiers = [];\n            do {\n                identifiers.push(token);\n                token = tokenizer.next();\n            } while (isIdentifier(token));\n            return matcherInput => matchesName(identifiers, matcherInput);\n        }\n        return null;\n    }\n    function parseConjunction() {\n        let matcher = parseOperand();\n        if (!matcher) {\n            return null;\n        }\n        const matchers = [];\n        while (matcher) {\n            matchers.push(matcher);\n            matcher = parseOperand();\n        }\n        return matcherInput => {\n            let min = matchers[0](matcherInput);\n            for (let i = 1; min >= 0 && i < matchers.length; i++) {\n                min = Math.min(min, matchers[i](matcherInput));\n            }\n            return min;\n        };\n    }\n    function parseInnerExpression() {\n        let matcher = parseConjunction();\n        if (!matcher) {\n            return null;\n        }\n        const matchers = [];\n        while (matcher) {\n            matchers.push(matcher);\n            if (token === '|' || token === ',') {\n                do {\n                    token = tokenizer.next();\n                } while (token === '|' || token === ',');\n            }\n            else {\n                break;\n            }\n            matcher = parseConjunction();\n        }\n        return matcherInput => {\n            let max = matchers[0](matcherInput);\n            for (let i = 1; i < matchers.length; i++) {\n                max = Math.max(max, matchers[i](matcherInput));\n            }\n            return max;\n        };\n    }\n}\nfunction isIdentifier(token) {\n    return !!token && !!token.match(/[\\w\\.:]+/);\n}\nfunction newTokenizer(input) {\n    const regex = /([LR]:|[\\w\\.:][\\w\\.:\\-]*|[\\,\\|\\-\\(\\)])/g;\n    let match = regex.exec(input);\n    return {\n        next: () => {\n            if (!match) {\n                return null;\n            }\n            const res = match[0];\n            match = regex.exec(input);\n            return res;\n        }\n    };\n}\n\nexport { createMatchers };\n","import { basename } from 'vscode/vscode/vs/base/common/path';\nimport { parse, getNodeType } from 'vscode/vscode/vs/base/common/json';\nimport { Color } from 'vscode/vscode/vs/base/common/color';\nimport { THEME_SCOPE_OPEN_PAREN, THEME_SCOPE_CLOSE_PAREN, THEME_SCOPE_WILDCARD, themeScopeRegex, ExtensionData, VS_HC_LIGHT_THEME, VS_HC_THEME, VS_LIGHT_THEME } from 'vscode/vscode/vs/workbench/services/themes/common/workbenchThemeService';\nimport { convertSettings } from './themeCompatibility.js';\nimport { localizeWithPath } from 'vscode/vscode/vs/nls';\nimport { isUndefined, isString, isObject, isBoolean } from 'vscode/vscode/vs/base/common/types';\nimport { extname, joinPath, dirname } from 'vscode/vscode/vs/base/common/resources';\nimport { Extensions } from 'vscode/vscode/vs/platform/theme/common/colorUtils';\nimport 'vscode/vscode/vs/platform/theme/common/colors/baseColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/chartsColors';\nimport { editorForeground, editorBackground } from 'vscode/vscode/vs/platform/theme/common/colors/editorColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/inputColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/listColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/menuColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/minimapColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/miscColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/quickpickColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/searchColors';\nimport { getThemeTypeSelector } from 'vscode/vscode/vs/platform/theme/common/themeService';\nimport { Registry } from 'vscode/vscode/vs/platform/registry/common/platform';\nimport { getParseErrorMessage } from 'vscode/vscode/vs/base/common/jsonErrorMessages';\nimport { parse as parse$1 } from './plistParser.js';\nimport { getTokenClassificationRegistry, TokenStyle, parseClassifierString, SemanticTokenRule } from 'vscode/vscode/vs/platform/theme/common/tokenClassificationRegistry';\nimport { createMatchers } from './textMateScopeMatcher.js';\nimport { ColorScheme } from 'vscode/vscode/vs/platform/theme/common/theme';\n\nconst _moduleId = \"vs/workbench/services/themes/common/colorThemeData\";\nconst colorRegistry = ( (Registry.as(Extensions.ColorContribution)));\nconst tokenClassificationRegistry = getTokenClassificationRegistry();\nconst tokenGroupToScopesMap = {\n    comments: ['comment', 'punctuation.definition.comment'],\n    strings: ['string', 'meta.embedded.assembly'],\n    keywords: ['keyword - keyword.operator', 'keyword.control', 'storage', 'storage.type'],\n    numbers: ['constant.numeric'],\n    types: ['entity.name.type', 'entity.name.class', 'support.type', 'support.class'],\n    functions: ['entity.name.function', 'support.function'],\n    variables: ['variable', 'entity.name.variable']\n};\nclass ColorThemeData {\n    static { this.STORAGE_KEY = 'colorThemeData'; }\n    constructor(id, label, settingsId) {\n        this.themeTokenColors = [];\n        this.customTokenColors = [];\n        this.colorMap = {};\n        this.customColorMap = {};\n        this.semanticTokenRules = [];\n        this.customSemanticTokenRules = [];\n        this.textMateThemingRules = undefined;\n        this.tokenColorIndex = undefined;\n        this.id = id;\n        this.label = label;\n        this.settingsId = settingsId;\n        this.isLoaded = false;\n    }\n    get semanticHighlighting() {\n        if (this.customSemanticHighlighting !== undefined) {\n            return this.customSemanticHighlighting;\n        }\n        if (this.customSemanticHighlightingDeprecated !== undefined) {\n            return this.customSemanticHighlightingDeprecated;\n        }\n        return !!this.themeSemanticHighlighting;\n    }\n    get tokenColors() {\n        if (!this.textMateThemingRules) {\n            const result = [];\n            const foreground = this.getColor(editorForeground) || this.getDefault(editorForeground);\n            const background = this.getColor(editorBackground) || this.getDefault(editorBackground);\n            result.push({\n                settings: {\n                    foreground: normalizeColor(foreground),\n                    background: normalizeColor(background)\n                }\n            });\n            let hasDefaultTokens = false;\n            function addRule(rule) {\n                if (rule.scope && rule.settings) {\n                    if (rule.scope === 'token.info-token') {\n                        hasDefaultTokens = true;\n                    }\n                    result.push({ scope: rule.scope, settings: { foreground: normalizeColor(rule.settings.foreground), background: normalizeColor(rule.settings.background), fontStyle: rule.settings.fontStyle } });\n                }\n            }\n            this.themeTokenColors.forEach(addRule);\n            this.customTokenColors.forEach(addRule);\n            if (!hasDefaultTokens) {\n                defaultThemeColors[this.type].forEach(addRule);\n            }\n            this.textMateThemingRules = result;\n        }\n        return this.textMateThemingRules;\n    }\n    getColor(colorId, useDefault) {\n        let color = this.customColorMap[colorId];\n        if (color) {\n            return color;\n        }\n        color = this.colorMap[colorId];\n        if (useDefault !== false && isUndefined(color)) {\n            color = this.getDefault(colorId);\n        }\n        return color;\n    }\n    getTokenStyle(type, modifiers, language, useDefault = true, definitions = {}) {\n        const result = {\n            foreground: undefined,\n            bold: undefined,\n            underline: undefined,\n            strikethrough: undefined,\n            italic: undefined\n        };\n        const score = {\n            foreground: -1,\n            bold: -1,\n            underline: -1,\n            strikethrough: -1,\n            italic: -1\n        };\n        function _processStyle(matchScore, style, definition) {\n            if (style.foreground && score.foreground <= matchScore) {\n                score.foreground = matchScore;\n                result.foreground = style.foreground;\n                definitions.foreground = definition;\n            }\n            for (const p of ['bold', 'underline', 'strikethrough', 'italic']) {\n                const property = p;\n                const info = style[property];\n                if (info !== undefined) {\n                    if (score[property] <= matchScore) {\n                        score[property] = matchScore;\n                        result[property] = info;\n                        definitions[property] = definition;\n                    }\n                }\n            }\n        }\n        function _processSemanticTokenRule(rule) {\n            const matchScore = rule.selector.match(type, modifiers, language);\n            if (matchScore >= 0) {\n                _processStyle(matchScore, rule.style, rule);\n            }\n        }\n        this.semanticTokenRules.forEach(_processSemanticTokenRule);\n        this.customSemanticTokenRules.forEach(_processSemanticTokenRule);\n        let hasUndefinedStyleProperty = false;\n        for (const k in score) {\n            const key = k;\n            if (score[key] === -1) {\n                hasUndefinedStyleProperty = true;\n            }\n            else {\n                score[key] = Number.MAX_VALUE;\n            }\n        }\n        if (hasUndefinedStyleProperty) {\n            for (const rule of tokenClassificationRegistry.getTokenStylingDefaultRules()) {\n                const matchScore = rule.selector.match(type, modifiers, language);\n                if (matchScore >= 0) {\n                    let style;\n                    if (rule.defaults.scopesToProbe) {\n                        style = this.resolveScopes(rule.defaults.scopesToProbe);\n                        if (style) {\n                            _processStyle(matchScore, style, rule.defaults.scopesToProbe);\n                        }\n                    }\n                    if (!style && useDefault !== false) {\n                        const tokenStyleValue = rule.defaults[this.type];\n                        style = this.resolveTokenStyleValue(tokenStyleValue);\n                        if (style) {\n                            _processStyle(matchScore, style, tokenStyleValue);\n                        }\n                    }\n                }\n            }\n        }\n        return TokenStyle.fromData(result);\n    }\n    resolveTokenStyleValue(tokenStyleValue) {\n        if (tokenStyleValue === undefined) {\n            return undefined;\n        }\n        else if (typeof tokenStyleValue === 'string') {\n            const { type, modifiers, language } = parseClassifierString(tokenStyleValue, '');\n            return this.getTokenStyle(type, modifiers, language);\n        }\n        else if (typeof tokenStyleValue === 'object') {\n            return tokenStyleValue;\n        }\n        return undefined;\n    }\n    getTokenColorIndex() {\n        if (!this.tokenColorIndex) {\n            const index = ( (new TokenColorIndex()));\n            this.tokenColors.forEach(rule => {\n                index.add(rule.settings.foreground);\n                index.add(rule.settings.background);\n            });\n            this.semanticTokenRules.forEach(r => index.add(r.style.foreground));\n            tokenClassificationRegistry.getTokenStylingDefaultRules().forEach(r => {\n                const defaultColor = r.defaults[this.type];\n                if (defaultColor && typeof defaultColor === 'object') {\n                    index.add(defaultColor.foreground);\n                }\n            });\n            this.customSemanticTokenRules.forEach(r => index.add(r.style.foreground));\n            this.tokenColorIndex = index;\n        }\n        return this.tokenColorIndex;\n    }\n    get tokenColorMap() {\n        return this.getTokenColorIndex().asArray();\n    }\n    getTokenStyleMetadata(typeWithLanguage, modifiers, defaultLanguage, useDefault = true, definitions = {}) {\n        const { type, language } = parseClassifierString(typeWithLanguage, defaultLanguage);\n        const style = this.getTokenStyle(type, modifiers, language, useDefault, definitions);\n        if (!style) {\n            return undefined;\n        }\n        return {\n            foreground: this.getTokenColorIndex().get(style.foreground),\n            bold: style.bold,\n            underline: style.underline,\n            strikethrough: style.strikethrough,\n            italic: style.italic,\n        };\n    }\n    getTokenStylingRuleScope(rule) {\n        if (this.customSemanticTokenRules.indexOf(rule) !== -1) {\n            return 'setting';\n        }\n        if (this.semanticTokenRules.indexOf(rule) !== -1) {\n            return 'theme';\n        }\n        return undefined;\n    }\n    getDefault(colorId) {\n        return colorRegistry.resolveDefaultColor(colorId, this);\n    }\n    resolveScopes(scopes, definitions) {\n        if (!this.themeTokenScopeMatchers) {\n            this.themeTokenScopeMatchers = ( (this.themeTokenColors.map(getScopeMatcher)));\n        }\n        if (!this.customTokenScopeMatchers) {\n            this.customTokenScopeMatchers = ( (this.customTokenColors.map(getScopeMatcher)));\n        }\n        for (const scope of scopes) {\n            let foreground = undefined;\n            let fontStyle = undefined;\n            let foregroundScore = -1;\n            let fontStyleScore = -1;\n            let fontStyleThemingRule = undefined;\n            let foregroundThemingRule = undefined;\n            function findTokenStyleForScopeInScopes(scopeMatchers, themingRules) {\n                for (let i = 0; i < scopeMatchers.length; i++) {\n                    const score = scopeMatchers[i](scope);\n                    if (score >= 0) {\n                        const themingRule = themingRules[i];\n                        const settings = themingRules[i].settings;\n                        if (score >= foregroundScore && settings.foreground) {\n                            foreground = settings.foreground;\n                            foregroundScore = score;\n                            foregroundThemingRule = themingRule;\n                        }\n                        if (score >= fontStyleScore && isString(settings.fontStyle)) {\n                            fontStyle = settings.fontStyle;\n                            fontStyleScore = score;\n                            fontStyleThemingRule = themingRule;\n                        }\n                    }\n                }\n            }\n            findTokenStyleForScopeInScopes(this.themeTokenScopeMatchers, this.themeTokenColors);\n            findTokenStyleForScopeInScopes(this.customTokenScopeMatchers, this.customTokenColors);\n            if (foreground !== undefined || fontStyle !== undefined) {\n                if (definitions) {\n                    definitions.foreground = foregroundThemingRule;\n                    definitions.bold = definitions.italic = definitions.underline = definitions.strikethrough = fontStyleThemingRule;\n                    definitions.scope = scope;\n                }\n                return TokenStyle.fromSettings(foreground, fontStyle);\n            }\n        }\n        return undefined;\n    }\n    defines(colorId) {\n        return this.customColorMap.hasOwnProperty(colorId) || this.colorMap.hasOwnProperty(colorId);\n    }\n    setCustomizations(settings) {\n        this.setCustomColors(settings.colorCustomizations);\n        this.setCustomTokenColors(settings.tokenColorCustomizations);\n        this.setCustomSemanticTokenColors(settings.semanticTokenColorCustomizations);\n    }\n    setCustomColors(colors) {\n        this.customColorMap = {};\n        this.overwriteCustomColors(colors);\n        const themeSpecificColors = this.getThemeSpecificColors(colors);\n        if (isObject(themeSpecificColors)) {\n            this.overwriteCustomColors(themeSpecificColors);\n        }\n        this.tokenColorIndex = undefined;\n        this.textMateThemingRules = undefined;\n        this.customTokenScopeMatchers = undefined;\n    }\n    overwriteCustomColors(colors) {\n        for (const id in colors) {\n            const colorVal = colors[id];\n            if (typeof colorVal === 'string') {\n                this.customColorMap[id] = ( (Color.fromHex(colorVal)));\n            }\n        }\n    }\n    setCustomTokenColors(customTokenColors) {\n        this.customTokenColors = [];\n        this.customSemanticHighlightingDeprecated = undefined;\n        this.addCustomTokenColors(customTokenColors);\n        const themeSpecificTokenColors = this.getThemeSpecificColors(customTokenColors);\n        if (isObject(themeSpecificTokenColors)) {\n            this.addCustomTokenColors(themeSpecificTokenColors);\n        }\n        this.tokenColorIndex = undefined;\n        this.textMateThemingRules = undefined;\n        this.customTokenScopeMatchers = undefined;\n    }\n    setCustomSemanticTokenColors(semanticTokenColors) {\n        this.customSemanticTokenRules = [];\n        this.customSemanticHighlighting = undefined;\n        if (semanticTokenColors) {\n            this.customSemanticHighlighting = semanticTokenColors.enabled;\n            if (semanticTokenColors.rules) {\n                this.readSemanticTokenRules(semanticTokenColors.rules);\n            }\n            const themeSpecificColors = this.getThemeSpecificColors(semanticTokenColors);\n            if (isObject(themeSpecificColors)) {\n                if (themeSpecificColors.enabled !== undefined) {\n                    this.customSemanticHighlighting = themeSpecificColors.enabled;\n                }\n                if (themeSpecificColors.rules) {\n                    this.readSemanticTokenRules(themeSpecificColors.rules);\n                }\n            }\n        }\n        this.tokenColorIndex = undefined;\n        this.textMateThemingRules = undefined;\n    }\n    isThemeScope(key) {\n        return key.charAt(0) === THEME_SCOPE_OPEN_PAREN && key.charAt(key.length - 1) === THEME_SCOPE_CLOSE_PAREN;\n    }\n    isThemeScopeMatch(themeId) {\n        const themeIdFirstChar = themeId.charAt(0);\n        const themeIdLastChar = themeId.charAt(themeId.length - 1);\n        const themeIdPrefix = themeId.slice(0, -1);\n        const themeIdInfix = themeId.slice(1, -1);\n        const themeIdSuffix = themeId.slice(1);\n        return themeId === this.settingsId\n            || (this.settingsId.includes(themeIdInfix) && themeIdFirstChar === THEME_SCOPE_WILDCARD && themeIdLastChar === THEME_SCOPE_WILDCARD)\n            || (this.settingsId.startsWith(themeIdPrefix) && themeIdLastChar === THEME_SCOPE_WILDCARD)\n            || (this.settingsId.endsWith(themeIdSuffix) && themeIdFirstChar === THEME_SCOPE_WILDCARD);\n    }\n    getThemeSpecificColors(colors) {\n        let themeSpecificColors;\n        for (const key in colors) {\n            const scopedColors = colors[key];\n            if (this.isThemeScope(key) && scopedColors instanceof Object && !Array.isArray(scopedColors)) {\n                const themeScopeList = key.match(themeScopeRegex) || [];\n                for (const themeScope of themeScopeList) {\n                    const themeId = themeScope.substring(1, themeScope.length - 1);\n                    if (this.isThemeScopeMatch(themeId)) {\n                        if (!themeSpecificColors) {\n                            themeSpecificColors = {};\n                        }\n                        const scopedThemeSpecificColors = scopedColors;\n                        for (const subkey in scopedThemeSpecificColors) {\n                            const originalColors = themeSpecificColors[subkey];\n                            const overrideColors = scopedThemeSpecificColors[subkey];\n                            if (Array.isArray(originalColors) && Array.isArray(overrideColors)) {\n                                themeSpecificColors[subkey] = originalColors.concat(overrideColors);\n                            }\n                            else if (overrideColors) {\n                                themeSpecificColors[subkey] = overrideColors;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return themeSpecificColors;\n    }\n    readSemanticTokenRules(tokenStylingRuleSection) {\n        for (const key in tokenStylingRuleSection) {\n            if (!this.isThemeScope(key)) {\n                try {\n                    const rule = readSemanticTokenRule(key, tokenStylingRuleSection[key]);\n                    if (rule) {\n                        this.customSemanticTokenRules.push(rule);\n                    }\n                }\n                catch (e) {\n                }\n            }\n        }\n    }\n    addCustomTokenColors(customTokenColors) {\n        for (const tokenGroup in tokenGroupToScopesMap) {\n            const group = tokenGroup;\n            const value = customTokenColors[group];\n            if (value) {\n                const settings = typeof value === 'string' ? { foreground: value } : value;\n                const scopes = tokenGroupToScopesMap[group];\n                for (const scope of scopes) {\n                    this.customTokenColors.push({ scope, settings });\n                }\n            }\n        }\n        if (Array.isArray(customTokenColors.textMateRules)) {\n            for (const rule of customTokenColors.textMateRules) {\n                if (rule.scope && rule.settings) {\n                    this.customTokenColors.push(rule);\n                }\n            }\n        }\n        if (customTokenColors.semanticHighlighting !== undefined) {\n            this.customSemanticHighlightingDeprecated = customTokenColors.semanticHighlighting;\n        }\n    }\n    ensureLoaded(extensionResourceLoaderService) {\n        return !this.isLoaded ? this.load(extensionResourceLoaderService) : Promise.resolve(undefined);\n    }\n    reload(extensionResourceLoaderService) {\n        return this.load(extensionResourceLoaderService);\n    }\n    load(extensionResourceLoaderService) {\n        if (!this.location) {\n            return Promise.resolve(undefined);\n        }\n        this.themeTokenColors = [];\n        this.clearCaches();\n        const result = {\n            colors: {},\n            textMateRules: [],\n            semanticTokenRules: [],\n            semanticHighlighting: false\n        };\n        return _loadColorTheme(extensionResourceLoaderService, this.location, result).then(_ => {\n            this.isLoaded = true;\n            this.semanticTokenRules = result.semanticTokenRules;\n            this.colorMap = result.colors;\n            this.themeTokenColors = result.textMateRules;\n            this.themeSemanticHighlighting = result.semanticHighlighting;\n        });\n    }\n    clearCaches() {\n        this.tokenColorIndex = undefined;\n        this.textMateThemingRules = undefined;\n        this.themeTokenScopeMatchers = undefined;\n        this.customTokenScopeMatchers = undefined;\n    }\n    toStorage(storageService) {\n        const colorMapData = {};\n        for (const key in this.colorMap) {\n            colorMapData[key] = Color.Format.CSS.formatHexA(this.colorMap[key], true);\n        }\n        const value = JSON.stringify({\n            id: this.id,\n            label: this.label,\n            settingsId: this.settingsId,\n            themeTokenColors: ( (this.themeTokenColors.map(tc => ({ settings: tc.settings, scope: tc.scope })))),\n            semanticTokenRules: ( (this.semanticTokenRules.map(SemanticTokenRule.toJSONObject))),\n            extensionData: ExtensionData.toJSONObject(this.extensionData),\n            themeSemanticHighlighting: this.themeSemanticHighlighting,\n            colorMap: colorMapData,\n            watch: this.watch\n        });\n        storageService.store(ColorThemeData.STORAGE_KEY, value, 0 , 0 );\n    }\n    get baseTheme() {\n        return this.classNames[0];\n    }\n    get classNames() {\n        return this.id.split(' ');\n    }\n    get type() {\n        switch (this.baseTheme) {\n            case VS_LIGHT_THEME: return ColorScheme.LIGHT;\n            case VS_HC_THEME: return ColorScheme.HIGH_CONTRAST_DARK;\n            case VS_HC_LIGHT_THEME: return ColorScheme.HIGH_CONTRAST_LIGHT;\n            default: return ColorScheme.DARK;\n        }\n    }\n    static createUnloadedThemeForThemeType(themeType, colorMap) {\n        return ColorThemeData.createUnloadedTheme(getThemeTypeSelector(themeType), colorMap);\n    }\n    static createUnloadedTheme(id, colorMap) {\n        const themeData = ( (new ColorThemeData(id, '', '__' + id)));\n        themeData.isLoaded = false;\n        themeData.themeTokenColors = [];\n        themeData.watch = false;\n        if (colorMap) {\n            for (const id in colorMap) {\n                themeData.colorMap[id] = ( (Color.fromHex(colorMap[id])));\n            }\n        }\n        return themeData;\n    }\n    static createLoadedEmptyTheme(id, settingsId) {\n        const themeData = ( (new ColorThemeData(id, '', settingsId)));\n        themeData.isLoaded = true;\n        themeData.themeTokenColors = [];\n        themeData.watch = false;\n        return themeData;\n    }\n    static fromStorageData(storageService) {\n        const input = storageService.get(ColorThemeData.STORAGE_KEY, 0 );\n        if (!input) {\n            return undefined;\n        }\n        try {\n            const data = JSON.parse(input);\n            const theme = ( (new ColorThemeData('', '', '')));\n            for (const key in data) {\n                switch (key) {\n                    case 'colorMap': {\n                        const colorMapData = data[key];\n                        for (const id in colorMapData) {\n                            theme.colorMap[id] = ( (Color.fromHex(colorMapData[id])));\n                        }\n                        break;\n                    }\n                    case 'themeTokenColors':\n                    case 'id':\n                    case 'label':\n                    case 'settingsId':\n                    case 'watch':\n                    case 'themeSemanticHighlighting':\n                        theme[key] = data[key];\n                        break;\n                    case 'semanticTokenRules': {\n                        const rulesData = data[key];\n                        if (Array.isArray(rulesData)) {\n                            for (const d of rulesData) {\n                                const rule = SemanticTokenRule.fromJSONObject(tokenClassificationRegistry, d);\n                                if (rule) {\n                                    theme.semanticTokenRules.push(rule);\n                                }\n                            }\n                        }\n                        break;\n                    }\n                    case 'location':\n                        break;\n                    case 'extensionData':\n                        theme.extensionData = ExtensionData.fromJSONObject(data.extensionData);\n                        break;\n                }\n            }\n            if (!theme.id || !theme.settingsId) {\n                return undefined;\n            }\n            return theme;\n        }\n        catch (e) {\n            return undefined;\n        }\n    }\n    static fromExtensionTheme(theme, colorThemeLocation, extensionData) {\n        const baseTheme = theme['uiTheme'] || 'vs-dark';\n        const themeSelector = toCSSSelector(extensionData.extensionId, theme.path);\n        const id = `${baseTheme} ${themeSelector}`;\n        const label = theme.label || basename(theme.path);\n        const settingsId = theme.id || label;\n        const themeData = ( (new ColorThemeData(id, label, settingsId)));\n        themeData.description = theme.description;\n        themeData.watch = theme._watch === true;\n        themeData.location = colorThemeLocation;\n        themeData.extensionData = extensionData;\n        themeData.isLoaded = false;\n        return themeData;\n    }\n}\nfunction toCSSSelector(extensionId, path) {\n    if (path.startsWith('./')) {\n        path = path.substr(2);\n    }\n    let str = `${extensionId}-${path}`;\n    str = str.replace(/[^_a-zA-Z0-9-]/g, '-');\n    if (str.charAt(0).match(/[0-9-]/)) {\n        str = '_' + str;\n    }\n    return str;\n}\nasync function _loadColorTheme(extensionResourceLoaderService, themeLocation, result) {\n    if (extname(themeLocation) === '.json') {\n        const content = await extensionResourceLoaderService.readExtensionResource(themeLocation);\n        const errors = [];\n        const contentValue = parse(content, errors);\n        if (errors.length > 0) {\n            return Promise.reject(( (new Error(( localizeWithPath(\n                _moduleId,\n                0,\n                \"Problems parsing JSON theme file: {0}\",\n                ( (errors.map(e => getParseErrorMessage(e.error)))).join(', ')\n            ))))));\n        }\n        else if (getNodeType(contentValue) !== 'object') {\n            return Promise.reject(( (new Error(( localizeWithPath(_moduleId, 1, \"Invalid format for JSON theme file: Object expected.\"))))));\n        }\n        if (contentValue.include) {\n            await _loadColorTheme(extensionResourceLoaderService, joinPath(dirname(themeLocation), contentValue.include), result);\n        }\n        if (Array.isArray(contentValue.settings)) {\n            convertSettings(contentValue.settings, result);\n            return null;\n        }\n        result.semanticHighlighting = result.semanticHighlighting || contentValue.semanticHighlighting;\n        const colors = contentValue.colors;\n        if (colors) {\n            if (typeof colors !== 'object') {\n                return Promise.reject(( (new Error(( localizeWithPath(\n                    _moduleId,\n                    2,\n                    \"Problem parsing color theme file: {0}. Property 'colors' is not of type 'object'.\",\n                     (themeLocation.toString())\n                ))))));\n            }\n            for (const colorId in colors) {\n                const colorHex = colors[colorId];\n                if (typeof colorHex === 'string') {\n                    result.colors[colorId] = ( (Color.fromHex(colors[colorId])));\n                }\n            }\n        }\n        const tokenColors = contentValue.tokenColors;\n        if (tokenColors) {\n            if (Array.isArray(tokenColors)) {\n                result.textMateRules.push(...tokenColors);\n            }\n            else if (typeof tokenColors === 'string') {\n                await _loadSyntaxTokens(extensionResourceLoaderService, joinPath(dirname(themeLocation), tokenColors), result);\n            }\n            else {\n                return Promise.reject(( (new Error(( localizeWithPath(\n                    _moduleId,\n                    3,\n                    \"Problem parsing color theme file: {0}. Property 'tokenColors' should be either an array specifying colors or a path to a TextMate theme file\",\n                     (themeLocation.toString())\n                ))))));\n            }\n        }\n        const semanticTokenColors = contentValue.semanticTokenColors;\n        if (semanticTokenColors && typeof semanticTokenColors === 'object') {\n            for (const key in semanticTokenColors) {\n                try {\n                    const rule = readSemanticTokenRule(key, semanticTokenColors[key]);\n                    if (rule) {\n                        result.semanticTokenRules.push(rule);\n                    }\n                }\n                catch (e) {\n                    return Promise.reject(( (new Error(( localizeWithPath(\n                        _moduleId,\n                        4,\n                        \"Problem parsing color theme file: {0}. Property 'semanticTokenColors' contains a invalid selector\",\n                         (themeLocation.toString())\n                    ))))));\n                }\n            }\n        }\n    }\n    else {\n        return _loadSyntaxTokens(extensionResourceLoaderService, themeLocation, result);\n    }\n}\nfunction _loadSyntaxTokens(extensionResourceLoaderService, themeLocation, result) {\n    return extensionResourceLoaderService.readExtensionResource(themeLocation).then(content => {\n        try {\n            const contentValue = parse$1(content);\n            const settings = contentValue.settings;\n            if (!Array.isArray(settings)) {\n                return Promise.reject(( (new Error(( localizeWithPath(\n                    _moduleId,\n                    5,\n                    \"Problem parsing tmTheme file: {0}. 'settings' is not array.\"\n                ))))));\n            }\n            convertSettings(settings, result);\n            return Promise.resolve(null);\n        }\n        catch (e) {\n            return Promise.reject(( (new Error(( localizeWithPath(_moduleId, 6, \"Problems parsing tmTheme file: {0}\", e.message))))));\n        }\n    }, error => {\n        return Promise.reject(( (new Error(( localizeWithPath(\n            _moduleId,\n            7,\n            \"Problems loading tmTheme file {0}: {1}\",\n             (themeLocation.toString()),\n            error.message\n        ))))));\n    });\n}\nconst defaultThemeColors = {\n    'light': [\n        { scope: 'token.info-token', settings: { foreground: '#316bcd' } },\n        { scope: 'token.warn-token', settings: { foreground: '#cd9731' } },\n        { scope: 'token.error-token', settings: { foreground: '#cd3131' } },\n        { scope: 'token.debug-token', settings: { foreground: '#800080' } }\n    ],\n    'dark': [\n        { scope: 'token.info-token', settings: { foreground: '#6796e6' } },\n        { scope: 'token.warn-token', settings: { foreground: '#cd9731' } },\n        { scope: 'token.error-token', settings: { foreground: '#f44747' } },\n        { scope: 'token.debug-token', settings: { foreground: '#b267e6' } }\n    ],\n    'hcLight': [\n        { scope: 'token.info-token', settings: { foreground: '#316bcd' } },\n        { scope: 'token.warn-token', settings: { foreground: '#cd9731' } },\n        { scope: 'token.error-token', settings: { foreground: '#cd3131' } },\n        { scope: 'token.debug-token', settings: { foreground: '#800080' } }\n    ],\n    'hcDark': [\n        { scope: 'token.info-token', settings: { foreground: '#6796e6' } },\n        { scope: 'token.warn-token', settings: { foreground: '#008000' } },\n        { scope: 'token.error-token', settings: { foreground: '#FF0000' } },\n        { scope: 'token.debug-token', settings: { foreground: '#b267e6' } }\n    ]\n};\nconst noMatch = (_scope) => -1;\nfunction nameMatcher(identifers, scope) {\n    function findInIdents(s, lastIndent) {\n        for (let i = lastIndent - 1; i >= 0; i--) {\n            if (scopesAreMatching(s, identifers[i])) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    if (scope.length < identifers.length) {\n        return -1;\n    }\n    let lastScopeIndex = scope.length - 1;\n    let lastIdentifierIndex = findInIdents(scope[lastScopeIndex--], identifers.length);\n    if (lastIdentifierIndex >= 0) {\n        const score = (lastIdentifierIndex + 1) * 0x10000 + identifers[lastIdentifierIndex].length;\n        while (lastScopeIndex >= 0) {\n            lastIdentifierIndex = findInIdents(scope[lastScopeIndex--], lastIdentifierIndex);\n            if (lastIdentifierIndex === -1) {\n                return -1;\n            }\n        }\n        return score;\n    }\n    return -1;\n}\nfunction scopesAreMatching(thisScopeName, scopeName) {\n    if (!thisScopeName) {\n        return false;\n    }\n    if (thisScopeName === scopeName) {\n        return true;\n    }\n    const len = scopeName.length;\n    return thisScopeName.length > len && thisScopeName.substr(0, len) === scopeName && thisScopeName[len] === '.';\n}\nfunction getScopeMatcher(rule) {\n    const ruleScope = rule.scope;\n    if (!ruleScope || !rule.settings) {\n        return noMatch;\n    }\n    const matchers = [];\n    if (Array.isArray(ruleScope)) {\n        for (const rs of ruleScope) {\n            createMatchers(rs, nameMatcher, matchers);\n        }\n    }\n    else {\n        createMatchers(ruleScope, nameMatcher, matchers);\n    }\n    if (matchers.length === 0) {\n        return noMatch;\n    }\n    return (scope) => {\n        let max = matchers[0].matcher(scope);\n        for (let i = 1; i < matchers.length; i++) {\n            max = Math.max(max, matchers[i].matcher(scope));\n        }\n        return max;\n    };\n}\nfunction readSemanticTokenRule(selectorString, settings) {\n    const selector = tokenClassificationRegistry.parseTokenSelector(selectorString);\n    let style;\n    if (typeof settings === 'string') {\n        style = TokenStyle.fromSettings(settings, undefined);\n    }\n    else if (isSemanticTokenColorizationSetting(settings)) {\n        style = TokenStyle.fromSettings(settings.foreground, settings.fontStyle, settings.bold, settings.underline, settings.strikethrough, settings.italic);\n    }\n    if (style) {\n        return { selector, style };\n    }\n    return undefined;\n}\nfunction isSemanticTokenColorizationSetting(style) {\n    return style && (isString(style.foreground) || isString(style.fontStyle) || isBoolean(style.italic)\n        || isBoolean(style.underline) || isBoolean(style.strikethrough) || isBoolean(style.bold));\n}\nclass TokenColorIndex {\n    constructor() {\n        this._lastColorId = 0;\n        this._id2color = [];\n        this._color2id = Object.create(null);\n    }\n    add(color) {\n        color = normalizeColor(color);\n        if (color === undefined) {\n            return 0;\n        }\n        let value = this._color2id[color];\n        if (value) {\n            return value;\n        }\n        value = ++this._lastColorId;\n        this._color2id[color] = value;\n        this._id2color[value] = color;\n        return value;\n    }\n    get(color) {\n        color = normalizeColor(color);\n        if (color === undefined) {\n            return 0;\n        }\n        const value = this._color2id[color];\n        if (value) {\n            return value;\n        }\n        console.log(`Color ${color} not in index.`);\n        return 0;\n    }\n    asArray() {\n        return this._id2color.slice(0);\n    }\n}\nfunction normalizeColor(color) {\n    if (!color) {\n        return undefined;\n    }\n    if (typeof color !== 'string') {\n        color = Color.Format.CSS.formatHexA(color, true);\n    }\n    const len = color.length;\n    if (color.charCodeAt(0) !== 35  || (len !== 4 && len !== 5 && len !== 7 && len !== 9)) {\n        return undefined;\n    }\n    const result = [35 ];\n    for (let i = 1; i < len; i++) {\n        const upper = hexUpper(color.charCodeAt(i));\n        if (!upper) {\n            return undefined;\n        }\n        result.push(upper);\n        if (len === 4 || len === 5) {\n            result.push(upper);\n        }\n    }\n    if (result.length === 9 && result[7] === 70  && result[8] === 70 ) {\n        result.length = 7;\n    }\n    return String.fromCharCode(...result);\n}\nfunction hexUpper(charCode) {\n    if (charCode >= 48  && charCode <= 57  || charCode >= 65  && charCode <= 70 ) {\n        return charCode;\n    }\n    else if (charCode >= 97  && charCode <= 102 ) {\n        return charCode - 97  + 65 ;\n    }\n    return 0;\n}\n\nexport { ColorThemeData };\n","import { localizeWithPath } from 'vscode/vscode/vs/nls';\nimport { Registry } from 'vscode/vscode/vs/platform/registry/common/platform';\nimport { Extensions } from 'vscode/vscode/vs/platform/jsonschemas/common/jsonContributionRegistry';\nimport { iconsSchemaId } from 'vscode/vscode/vs/platform/theme/common/iconRegistry';\n\nconst _moduleId = \"vs/workbench/services/themes/common/productIconThemeSchema\";\nconst fontIdRegex = '^([\\\\w_-]+)$';\nconst fontStyleRegex = '^(normal|italic|(oblique[ \\\\w\\\\s-]+))$';\nconst fontWeightRegex = '^(normal|bold|lighter|bolder|(\\\\d{0-1000}))$';\nconst fontSizeRegex = '^([\\\\w .%_-]+)$';\nconst fontFormatRegex = '^woff|woff2|truetype|opentype|embedded-opentype|svg$';\nconst schemaId = 'vscode://schemas/product-icon-theme';\nconst schema = {\n    type: 'object',\n    allowComments: true,\n    allowTrailingCommas: true,\n    properties: {\n        fonts: {\n            type: 'array',\n            items: {\n                type: 'object',\n                properties: {\n                    id: {\n                        type: 'string',\n                        description: ( localizeWithPath(_moduleId, 0, 'The ID of the font.')),\n                        pattern: fontIdRegex,\n                        patternErrorMessage: ( localizeWithPath(\n                            _moduleId,\n                            1,\n                            'The ID must only contain letters, numbers, underscore and minus.'\n                        ))\n                    },\n                    src: {\n                        type: 'array',\n                        description: ( localizeWithPath(_moduleId, 2, 'The location of the font.')),\n                        items: {\n                            type: 'object',\n                            properties: {\n                                path: {\n                                    type: 'string',\n                                    description: ( localizeWithPath(\n                                        _moduleId,\n                                        3,\n                                        'The font path, relative to the current product icon theme file.'\n                                    )),\n                                },\n                                format: {\n                                    type: 'string',\n                                    description: ( localizeWithPath(_moduleId, 4, 'The format of the font.')),\n                                    enum: ['woff', 'woff2', 'truetype', 'opentype', 'embedded-opentype', 'svg']\n                                }\n                            },\n                            required: [\n                                'path',\n                                'format'\n                            ]\n                        }\n                    },\n                    weight: {\n                        type: 'string',\n                        description: ( localizeWithPath(\n                            _moduleId,\n                            5,\n                            'The weight of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight for valid values.'\n                        )),\n                        anyOf: [\n                            { enum: ['normal', 'bold', 'lighter', 'bolder'] },\n                            { type: 'string', pattern: fontWeightRegex }\n                        ]\n                    },\n                    style: {\n                        type: 'string',\n                        description: ( localizeWithPath(\n                            _moduleId,\n                            6,\n                            'The style of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-style for valid values.'\n                        )),\n                        anyOf: [\n                            { enum: ['normal', 'italic', 'oblique'] },\n                            { type: 'string', pattern: fontStyleRegex }\n                        ]\n                    }\n                },\n                required: [\n                    'id',\n                    'src'\n                ]\n            }\n        },\n        iconDefinitions: {\n            description: ( localizeWithPath(_moduleId, 7, 'Association of icon name to a font character.')),\n            $ref: iconsSchemaId\n        }\n    }\n};\nfunction registerProductIconThemeSchemas() {\n    const schemaRegistry = ( (Registry.as(Extensions.JSONContribution)));\n    schemaRegistry.registerSchema(schemaId, schema);\n}\n\nexport { fontFormatRegex, fontIdRegex, fontSizeRegex, fontStyleRegex, fontWeightRegex, registerProductIconThemeSchemas };\n","import { localizeWithPath } from 'vscode/vscode/vs/nls';\nimport { Registry } from 'vscode/vscode/vs/platform/registry/common/platform';\nimport { Extensions } from 'vscode/vscode/vs/platform/jsonschemas/common/jsonContributionRegistry';\nimport { fontIdRegex, fontWeightRegex, fontStyleRegex, fontSizeRegex } from './productIconThemeSchema.js';\n\nconst _moduleId = \"vs/workbench/services/themes/common/fileIconThemeSchema\";\nconst schemaId = 'vscode://schemas/icon-theme';\nconst schema = {\n    type: 'object',\n    allowComments: true,\n    allowTrailingCommas: true,\n    definitions: {\n        folderExpanded: {\n            type: 'string',\n            description: ( localizeWithPath(\n                _moduleId,\n                0,\n                'The folder icon for expanded folders. The expanded folder icon is optional. If not set, the icon defined for folder will be shown.'\n            ))\n        },\n        folder: {\n            type: 'string',\n            description: ( localizeWithPath(\n                _moduleId,\n                1,\n                'The folder icon for collapsed folders, and if folderExpanded is not set, also for expanded folders.'\n            ))\n        },\n        file: {\n            type: 'string',\n            description: ( localizeWithPath(\n                _moduleId,\n                2,\n                'The default file icon, shown for all files that don\\'t match any extension, filename or language id.'\n            ))\n        },\n        rootFolder: {\n            type: 'string',\n            description: ( localizeWithPath(\n                _moduleId,\n                3,\n                'The folder icon for collapsed root folders, and if rootFolderExpanded is not set, also for expanded root folders.'\n            ))\n        },\n        rootFolderExpanded: {\n            type: 'string',\n            description: ( localizeWithPath(\n                _moduleId,\n                4,\n                'The folder icon for expanded root folders. The expanded root folder icon is optional. If not set, the icon defined for root folder will be shown.'\n            ))\n        },\n        rootFolderNames: {\n            type: 'object',\n            description: ( localizeWithPath(\n                _moduleId,\n                5,\n                'Associates root folder names to icons. The object key is the root folder name. No patterns or wildcards are allowed. Root folder name matching is case insensitive.'\n            )),\n            additionalProperties: {\n                type: 'string',\n                description: ( localizeWithPath(_moduleId, 6, 'The ID of the icon definition for the association.'))\n            }\n        },\n        rootFolderNamesExpanded: {\n            type: 'object',\n            description: ( localizeWithPath(\n                _moduleId,\n                7,\n                'Associates root folder names to icons for expanded root folders. The object key is the root folder name. No patterns or wildcards are allowed. Root folder name matching is case insensitive.'\n            )),\n            additionalProperties: {\n                type: 'string',\n                description: ( localizeWithPath(_moduleId, 8, 'The ID of the icon definition for the association.'))\n            }\n        },\n        folderNames: {\n            type: 'object',\n            description: ( localizeWithPath(\n                _moduleId,\n                9,\n                'Associates folder names to icons. The object key is the folder name, not including any path segments. No patterns or wildcards are allowed. Folder name matching is case insensitive.'\n            )),\n            additionalProperties: {\n                type: 'string',\n                description: ( localizeWithPath(_moduleId, 6, 'The ID of the icon definition for the association.'))\n            }\n        },\n        folderNamesExpanded: {\n            type: 'object',\n            description: ( localizeWithPath(\n                _moduleId,\n                10,\n                'Associates folder names to icons for expanded folders. The object key is the folder name, not including any path segments. No patterns or wildcards are allowed. Folder name matching is case insensitive.'\n            )),\n            additionalProperties: {\n                type: 'string',\n                description: ( localizeWithPath(_moduleId, 11, 'The ID of the icon definition for the association.'))\n            }\n        },\n        fileExtensions: {\n            type: 'object',\n            description: ( localizeWithPath(\n                _moduleId,\n                12,\n                'Associates file extensions to icons. The object key is the file extension name. The extension name is the last segment of a file name after the last dot (not including the dot). Extensions are compared case insensitive.'\n            )),\n            additionalProperties: {\n                type: 'string',\n                description: ( localizeWithPath(_moduleId, 13, 'The ID of the icon definition for the association.'))\n            }\n        },\n        fileNames: {\n            type: 'object',\n            description: ( localizeWithPath(\n                _moduleId,\n                14,\n                'Associates file names to icons. The object key is the full file name, but not including any path segments. File name can include dots and a possible file extension. No patterns or wildcards are allowed. File name matching is case insensitive.'\n            )),\n            additionalProperties: {\n                type: 'string',\n                description: ( localizeWithPath(_moduleId, 15, 'The ID of the icon definition for the association.'))\n            }\n        },\n        languageIds: {\n            type: 'object',\n            description: ( localizeWithPath(\n                _moduleId,\n                16,\n                'Associates languages to icons. The object key is the language id as defined in the language contribution point.'\n            )),\n            additionalProperties: {\n                type: 'string',\n                description: ( localizeWithPath(_moduleId, 17, 'The ID of the icon definition for the association.'))\n            }\n        },\n        associations: {\n            type: 'object',\n            properties: {\n                folderExpanded: {\n                    $ref: '#/definitions/folderExpanded'\n                },\n                folder: {\n                    $ref: '#/definitions/folder'\n                },\n                file: {\n                    $ref: '#/definitions/file'\n                },\n                folderNames: {\n                    $ref: '#/definitions/folderNames'\n                },\n                folderNamesExpanded: {\n                    $ref: '#/definitions/folderNamesExpanded'\n                },\n                rootFolder: {\n                    $ref: '#/definitions/rootFolder'\n                },\n                rootFolderExpanded: {\n                    $ref: '#/definitions/rootFolderExpanded'\n                },\n                rootFolderNames: {\n                    $ref: '#/definitions/rootFolderNames'\n                },\n                rootFolderNamesExpanded: {\n                    $ref: '#/definitions/rootFolderNamesExpanded'\n                },\n                fileExtensions: {\n                    $ref: '#/definitions/fileExtensions'\n                },\n                fileNames: {\n                    $ref: '#/definitions/fileNames'\n                },\n                languageIds: {\n                    $ref: '#/definitions/languageIds'\n                }\n            }\n        }\n    },\n    properties: {\n        fonts: {\n            type: 'array',\n            description: ( localizeWithPath(_moduleId, 18, 'Fonts that are used in the icon definitions.')),\n            items: {\n                type: 'object',\n                properties: {\n                    id: {\n                        type: 'string',\n                        description: ( localizeWithPath(_moduleId, 19, 'The ID of the font.')),\n                        pattern: fontIdRegex,\n                        patternErrorMessage: ( localizeWithPath(\n                            _moduleId,\n                            20,\n                            'The ID must only contain letter, numbers, underscore and minus.'\n                        ))\n                    },\n                    src: {\n                        type: 'array',\n                        description: ( localizeWithPath(_moduleId, 21, 'The location of the font.')),\n                        items: {\n                            type: 'object',\n                            properties: {\n                                path: {\n                                    type: 'string',\n                                    description: ( localizeWithPath(\n                                        _moduleId,\n                                        22,\n                                        'The font path, relative to the current file icon theme file.'\n                                    )),\n                                },\n                                format: {\n                                    type: 'string',\n                                    description: ( localizeWithPath(_moduleId, 23, 'The format of the font.')),\n                                    enum: ['woff', 'woff2', 'truetype', 'opentype', 'embedded-opentype', 'svg']\n                                }\n                            },\n                            required: [\n                                'path',\n                                'format'\n                            ]\n                        }\n                    },\n                    weight: {\n                        type: 'string',\n                        description: ( localizeWithPath(\n                            _moduleId,\n                            24,\n                            'The weight of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight for valid values.'\n                        )),\n                        pattern: fontWeightRegex\n                    },\n                    style: {\n                        type: 'string',\n                        description: ( localizeWithPath(\n                            _moduleId,\n                            25,\n                            'The style of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-style for valid values.'\n                        )),\n                        pattern: fontStyleRegex\n                    },\n                    size: {\n                        type: 'string',\n                        description: ( localizeWithPath(\n                            _moduleId,\n                            26,\n                            'The default size of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-size for valid values.'\n                        )),\n                        pattern: fontSizeRegex\n                    }\n                },\n                required: [\n                    'id',\n                    'src'\n                ]\n            }\n        },\n        iconDefinitions: {\n            type: 'object',\n            description: ( localizeWithPath(\n                _moduleId,\n                27,\n                'Description of all icons that can be used when associating files to icons.'\n            )),\n            additionalProperties: {\n                type: 'object',\n                description: ( localizeWithPath(\n                    _moduleId,\n                    28,\n                    'An icon definition. The object key is the ID of the definition.'\n                )),\n                properties: {\n                    iconPath: {\n                        type: 'string',\n                        description: ( localizeWithPath(\n                            _moduleId,\n                            29,\n                            'When using a SVG or PNG: The path to the image. The path is relative to the icon set file.'\n                        ))\n                    },\n                    fontCharacter: {\n                        type: 'string',\n                        description: ( localizeWithPath(\n                            _moduleId,\n                            30,\n                            'When using a glyph font: The character in the font to use.'\n                        ))\n                    },\n                    fontColor: {\n                        type: 'string',\n                        format: 'color-hex',\n                        description: ( localizeWithPath(_moduleId, 31, 'When using a glyph font: The color to use.'))\n                    },\n                    fontSize: {\n                        type: 'string',\n                        description: ( localizeWithPath(\n                            _moduleId,\n                            32,\n                            'When using a font: The font size in percentage to the text font. If not set, defaults to the size in the font definition.'\n                        )),\n                        pattern: fontSizeRegex\n                    },\n                    fontId: {\n                        type: 'string',\n                        description: ( localizeWithPath(\n                            _moduleId,\n                            33,\n                            'When using a font: The id of the font. If not set, defaults to the first font definition.'\n                        ))\n                    }\n                }\n            }\n        },\n        folderExpanded: {\n            $ref: '#/definitions/folderExpanded'\n        },\n        folder: {\n            $ref: '#/definitions/folder'\n        },\n        file: {\n            $ref: '#/definitions/file'\n        },\n        folderNames: {\n            $ref: '#/definitions/folderNames'\n        },\n        folderNamesExpanded: {\n            $ref: '#/definitions/folderNamesExpanded'\n        },\n        rootFolder: {\n            $ref: '#/definitions/rootFolder'\n        },\n        rootFolderExpanded: {\n            $ref: '#/definitions/rootFolderExpanded'\n        },\n        rootFolderNames: {\n            $ref: '#/definitions/rootFolderNames'\n        },\n        rootFolderNamesExpanded: {\n            $ref: '#/definitions/rootFolderNamesExpanded'\n        },\n        fileExtensions: {\n            $ref: '#/definitions/fileExtensions'\n        },\n        fileNames: {\n            $ref: '#/definitions/fileNames'\n        },\n        languageIds: {\n            $ref: '#/definitions/languageIds'\n        },\n        light: {\n            $ref: '#/definitions/associations',\n            description: ( localizeWithPath(\n                _moduleId,\n                34,\n                'Optional associations for file icons in light color themes.'\n            ))\n        },\n        highContrast: {\n            $ref: '#/definitions/associations',\n            description: ( localizeWithPath(\n                _moduleId,\n                35,\n                'Optional associations for file icons in high contrast color themes.'\n            ))\n        },\n        hidesExplorerArrows: {\n            type: 'boolean',\n            description: ( localizeWithPath(\n                _moduleId,\n                36,\n                'Configures whether the file explorer\\'s arrows should be hidden when this theme is active.'\n            ))\n        },\n        showLanguageModeIcons: {\n            type: 'boolean',\n            description: ( localizeWithPath(\n                _moduleId,\n                37,\n                'Configures whether the default language icons should be used if the theme does not define an icon for a language.'\n            ))\n        }\n    }\n};\nfunction registerFileIconThemeSchemas() {\n    const schemaRegistry = ( (Registry.as(Extensions.JSONContribution)));\n    schemaRegistry.registerSchema(schemaId, schema);\n}\n\nexport { registerFileIconThemeSchemas };\n","import { localizeWithPath } from 'vscode/vscode/vs/nls';\nimport { basename } from 'vscode/vscode/vs/base/common/path';\nimport { dirname, joinPath } from 'vscode/vscode/vs/base/common/resources';\nimport { parse, getNodeType } from 'vscode/vscode/vs/base/common/json';\nimport { ExtensionData } from 'vscode/vscode/vs/workbench/services/themes/common/workbenchThemeService';\nimport { getParseErrorMessage } from 'vscode/vscode/vs/base/common/jsonErrorMessages';\nimport { asCSSUrl } from 'vscode/vscode/vs/base/browser/dom';\nimport { mainWindow } from 'vscode/vscode/vs/base/browser/window';\n\nconst _moduleId = \"vs/workbench/services/themes/browser/fileIconThemeData\";\nclass FileIconThemeData {\n    static { this.STORAGE_KEY = 'iconThemeData'; }\n    constructor(id, label, settingsId) {\n        this.id = id;\n        this.label = label;\n        this.settingsId = settingsId;\n        this.isLoaded = false;\n        this.hasFileIcons = false;\n        this.hasFolderIcons = false;\n        this.hidesExplorerArrows = false;\n    }\n    ensureLoaded(themeLoader) {\n        return !this.isLoaded ? this.load(themeLoader) : Promise.resolve(this.styleSheetContent);\n    }\n    reload(themeLoader) {\n        return this.load(themeLoader);\n    }\n    load(themeLoader) {\n        return themeLoader.load(this);\n    }\n    static fromExtensionTheme(iconTheme, iconThemeLocation, extensionData) {\n        const id = extensionData.extensionId + '-' + iconTheme.id;\n        const label = iconTheme.label || basename(iconTheme.path);\n        const settingsId = iconTheme.id;\n        const themeData = ( (new FileIconThemeData(id, label, settingsId)));\n        themeData.description = iconTheme.description;\n        themeData.location = iconThemeLocation;\n        themeData.extensionData = extensionData;\n        themeData.watch = iconTheme._watch;\n        themeData.isLoaded = false;\n        return themeData;\n    }\n    static { this._noIconTheme = null; }\n    static get noIconTheme() {\n        let themeData = FileIconThemeData._noIconTheme;\n        if (!themeData) {\n            themeData = FileIconThemeData._noIconTheme = ( (new FileIconThemeData('', '', null)));\n            themeData.hasFileIcons = false;\n            themeData.hasFolderIcons = false;\n            themeData.hidesExplorerArrows = false;\n            themeData.isLoaded = true;\n            themeData.extensionData = undefined;\n            themeData.watch = false;\n        }\n        return themeData;\n    }\n    static createUnloadedTheme(id) {\n        const themeData = ( (new FileIconThemeData(id, '', '__' + id)));\n        themeData.isLoaded = false;\n        themeData.hasFileIcons = false;\n        themeData.hasFolderIcons = false;\n        themeData.hidesExplorerArrows = false;\n        themeData.extensionData = undefined;\n        themeData.watch = false;\n        return themeData;\n    }\n    static fromStorageData(storageService) {\n        const input = storageService.get(FileIconThemeData.STORAGE_KEY, 0 );\n        if (!input) {\n            return undefined;\n        }\n        try {\n            const data = JSON.parse(input);\n            const theme = ( (new FileIconThemeData('', '', null)));\n            for (const key in data) {\n                switch (key) {\n                    case 'id':\n                    case 'label':\n                    case 'description':\n                    case 'settingsId':\n                    case 'styleSheetContent':\n                    case 'hasFileIcons':\n                    case 'hidesExplorerArrows':\n                    case 'hasFolderIcons':\n                    case 'watch':\n                        theme[key] = data[key];\n                        break;\n                    case 'location':\n                        break;\n                    case 'extensionData':\n                        theme.extensionData = ExtensionData.fromJSONObject(data.extensionData);\n                        break;\n                }\n            }\n            return theme;\n        }\n        catch (e) {\n            return undefined;\n        }\n    }\n    toStorage(storageService) {\n        const data = JSON.stringify({\n            id: this.id,\n            label: this.label,\n            description: this.description,\n            settingsId: this.settingsId,\n            styleSheetContent: this.styleSheetContent,\n            hasFileIcons: this.hasFileIcons,\n            hasFolderIcons: this.hasFolderIcons,\n            hidesExplorerArrows: this.hidesExplorerArrows,\n            extensionData: ExtensionData.toJSONObject(this.extensionData),\n            watch: this.watch\n        });\n        storageService.store(FileIconThemeData.STORAGE_KEY, data, 0 , 1 );\n    }\n}\nclass FileIconThemeLoader {\n    constructor(fileService, languageService) {\n        this.fileService = fileService;\n        this.languageService = languageService;\n    }\n    load(data) {\n        if (!data.location) {\n            return Promise.resolve(data.styleSheetContent);\n        }\n        return this.loadIconThemeDocument(data.location).then(iconThemeDocument => {\n            const result = this.processIconThemeDocument(data.id, data.location, iconThemeDocument);\n            data.styleSheetContent = result.content;\n            data.hasFileIcons = result.hasFileIcons;\n            data.hasFolderIcons = result.hasFolderIcons;\n            data.hidesExplorerArrows = result.hidesExplorerArrows;\n            data.isLoaded = true;\n            return data.styleSheetContent;\n        });\n    }\n    loadIconThemeDocument(location) {\n        return this.fileService.readExtensionResource(location).then((content) => {\n            const errors = [];\n            const contentValue = parse(content, errors);\n            if (errors.length > 0) {\n                return Promise.reject(( (new Error(( localizeWithPath(\n                    _moduleId,\n                    0,\n                    \"Problems parsing file icons file: {0}\",\n                    ( (errors.map(e => getParseErrorMessage(e.error)))).join(', ')\n                ))))));\n            }\n            else if (getNodeType(contentValue) !== 'object') {\n                return Promise.reject(( (new Error(( localizeWithPath(_moduleId, 1, \"Invalid format for file icons theme file: Object expected.\"))))));\n            }\n            return Promise.resolve(contentValue);\n        });\n    }\n    processIconThemeDocument(id, iconThemeDocumentLocation, iconThemeDocument) {\n        const result = { content: '', hasFileIcons: false, hasFolderIcons: false, hidesExplorerArrows: !!iconThemeDocument.hidesExplorerArrows };\n        let hasSpecificFileIcons = false;\n        if (!iconThemeDocument.iconDefinitions) {\n            return result;\n        }\n        const selectorByDefinitionId = {};\n        const coveredLanguages = {};\n        const iconThemeDocumentLocationDirname = dirname(iconThemeDocumentLocation);\n        function resolvePath(path) {\n            return joinPath(iconThemeDocumentLocationDirname, path);\n        }\n        function collectSelectors(associations, baseThemeClassName) {\n            function addSelector(selector, defId) {\n                if (defId) {\n                    let list = selectorByDefinitionId[defId];\n                    if (!list) {\n                        list = selectorByDefinitionId[defId] = [];\n                    }\n                    list.push(selector);\n                }\n            }\n            if (associations) {\n                let qualifier = '.show-file-icons';\n                if (baseThemeClassName) {\n                    qualifier = baseThemeClassName + ' ' + qualifier;\n                }\n                const expanded = '.monaco-tl-twistie.collapsible:not(.collapsed) + .monaco-tl-contents';\n                if (associations.folder) {\n                    addSelector(`${qualifier} .folder-icon::before`, associations.folder);\n                    result.hasFolderIcons = true;\n                }\n                if (associations.folderExpanded) {\n                    addSelector(`${qualifier} ${expanded} .folder-icon::before`, associations.folderExpanded);\n                    result.hasFolderIcons = true;\n                }\n                const rootFolder = associations.rootFolder || associations.folder;\n                const rootFolderExpanded = associations.rootFolderExpanded || associations.folderExpanded;\n                if (rootFolder) {\n                    addSelector(`${qualifier} .rootfolder-icon::before`, rootFolder);\n                    result.hasFolderIcons = true;\n                }\n                if (rootFolderExpanded) {\n                    addSelector(`${qualifier} ${expanded} .rootfolder-icon::before`, rootFolderExpanded);\n                    result.hasFolderIcons = true;\n                }\n                if (associations.file) {\n                    addSelector(`${qualifier} .file-icon::before`, associations.file);\n                    result.hasFileIcons = true;\n                }\n                const folderNames = associations.folderNames;\n                if (folderNames) {\n                    for (const key in folderNames) {\n                        const selectors = [];\n                        const name = handleParentFolder(key.toLowerCase(), selectors);\n                        selectors.push(`.${escapeCSS(name)}-name-folder-icon`);\n                        addSelector(`${qualifier} ${selectors.join('')}.folder-icon::before`, folderNames[key]);\n                        result.hasFolderIcons = true;\n                    }\n                }\n                const folderNamesExpanded = associations.folderNamesExpanded;\n                if (folderNamesExpanded) {\n                    for (const key in folderNamesExpanded) {\n                        const selectors = [];\n                        const name = handleParentFolder(key.toLowerCase(), selectors);\n                        selectors.push(`.${escapeCSS(name)}-name-folder-icon`);\n                        addSelector(`${qualifier} ${expanded} ${selectors.join('')}.folder-icon::before`, folderNamesExpanded[key]);\n                        result.hasFolderIcons = true;\n                    }\n                }\n                const rootFolderNames = associations.rootFolderNames;\n                if (rootFolderNames) {\n                    for (const key in rootFolderNames) {\n                        const name = key.toLowerCase();\n                        addSelector(`${qualifier} .${escapeCSS(name)}-root-name-folder-icon.rootfolder-icon::before`, rootFolderNames[key]);\n                        result.hasFolderIcons = true;\n                    }\n                }\n                const rootFolderNamesExpanded = associations.rootFolderNamesExpanded;\n                if (rootFolderNamesExpanded) {\n                    for (const key in rootFolderNamesExpanded) {\n                        const name = key.toLowerCase();\n                        addSelector(`${qualifier} ${expanded} .${escapeCSS(name)}-root-name-folder-icon.rootfolder-icon::before`, rootFolderNamesExpanded[key]);\n                        result.hasFolderIcons = true;\n                    }\n                }\n                const languageIds = associations.languageIds;\n                if (languageIds) {\n                    if (!languageIds.jsonc && languageIds.json) {\n                        languageIds.jsonc = languageIds.json;\n                    }\n                    for (const languageId in languageIds) {\n                        addSelector(`${qualifier} .${escapeCSS(languageId)}-lang-file-icon.file-icon::before`, languageIds[languageId]);\n                        result.hasFileIcons = true;\n                        hasSpecificFileIcons = true;\n                        coveredLanguages[languageId] = true;\n                    }\n                }\n                const fileExtensions = associations.fileExtensions;\n                if (fileExtensions) {\n                    for (const key in fileExtensions) {\n                        const selectors = [];\n                        const name = handleParentFolder(key.toLowerCase(), selectors);\n                        const segments = name.split('.');\n                        if (segments.length) {\n                            for (let i = 0; i < segments.length; i++) {\n                                selectors.push(`.${escapeCSS(segments.slice(i).join('.'))}-ext-file-icon`);\n                            }\n                            selectors.push('.ext-file-icon');\n                        }\n                        addSelector(`${qualifier} ${selectors.join('')}.file-icon::before`, fileExtensions[key]);\n                        result.hasFileIcons = true;\n                        hasSpecificFileIcons = true;\n                    }\n                }\n                const fileNames = associations.fileNames;\n                if (fileNames) {\n                    for (const key in fileNames) {\n                        const selectors = [];\n                        const fileName = handleParentFolder(key.toLowerCase(), selectors);\n                        selectors.push(`.${escapeCSS(fileName)}-name-file-icon`);\n                        selectors.push('.name-file-icon');\n                        const segments = fileName.split('.');\n                        if (segments.length) {\n                            for (let i = 1; i < segments.length; i++) {\n                                selectors.push(`.${escapeCSS(segments.slice(i).join('.'))}-ext-file-icon`);\n                            }\n                            selectors.push('.ext-file-icon');\n                        }\n                        addSelector(`${qualifier} ${selectors.join('')}.file-icon::before`, fileNames[key]);\n                        result.hasFileIcons = true;\n                        hasSpecificFileIcons = true;\n                    }\n                }\n            }\n        }\n        collectSelectors(iconThemeDocument);\n        collectSelectors(iconThemeDocument.light, '.vs');\n        collectSelectors(iconThemeDocument.highContrast, '.hc-black');\n        collectSelectors(iconThemeDocument.highContrast, '.hc-light');\n        if (!result.hasFileIcons && !result.hasFolderIcons) {\n            return result;\n        }\n        const showLanguageModeIcons = iconThemeDocument.showLanguageModeIcons === true || (hasSpecificFileIcons && iconThemeDocument.showLanguageModeIcons !== false);\n        const cssRules = [];\n        const fonts = iconThemeDocument.fonts;\n        const fontSizes = ( (new Map()));\n        if (Array.isArray(fonts)) {\n            const defaultFontSize = fonts[0].size || '150%';\n            fonts.forEach(font => {\n                const src = ( (font.src.map(l => `${asCSSUrl(resolvePath(l.path))} format('${l.format}')`))).join(', ');\n                cssRules.push(`@font-face { src: ${src}; font-family: '${font.id}'; font-weight: ${font.weight}; font-style: ${font.style}; font-display: block; }`);\n                if (font.size !== undefined && font.size !== defaultFontSize) {\n                    fontSizes.set(font.id, font.size);\n                }\n            });\n            cssRules.push(`.show-file-icons .file-icon::before, .show-file-icons .folder-icon::before, .show-file-icons .rootfolder-icon::before { font-family: '${fonts[0].id}'; font-size: ${defaultFontSize}; }`);\n        }\n        for (const defId in selectorByDefinitionId) {\n            const selectors = selectorByDefinitionId[defId];\n            const definition = iconThemeDocument.iconDefinitions[defId];\n            if (definition) {\n                if (definition.iconPath) {\n                    cssRules.push(`${selectors.join(', ')} { content: ' '; background-image: ${asCSSUrl(resolvePath(definition.iconPath))}; }`);\n                }\n                else if (definition.fontCharacter || definition.fontColor) {\n                    const body = [];\n                    if (definition.fontColor) {\n                        body.push(`color: ${definition.fontColor};`);\n                    }\n                    if (definition.fontCharacter) {\n                        body.push(`content: '${definition.fontCharacter}';`);\n                    }\n                    const fontSize = definition.fontSize ?? (definition.fontId ? fontSizes.get(definition.fontId) : undefined);\n                    if (fontSize) {\n                        body.push(`font-size: ${fontSize};`);\n                    }\n                    if (definition.fontId) {\n                        body.push(`font-family: ${definition.fontId};`);\n                    }\n                    if (showLanguageModeIcons) {\n                        body.push(`background-image: unset;`);\n                    }\n                    cssRules.push(`${selectors.join(', ')} { ${body.join(' ')} }`);\n                }\n            }\n        }\n        if (showLanguageModeIcons) {\n            for (const languageId of this.languageService.getRegisteredLanguageIds()) {\n                if (!coveredLanguages[languageId]) {\n                    const icon = this.languageService.getIcon(languageId);\n                    if (icon) {\n                        const selector = `.show-file-icons .${escapeCSS(languageId)}-lang-file-icon.file-icon::before`;\n                        cssRules.push(`${selector} { content: ' '; background-image: ${asCSSUrl(icon.dark)}; }`);\n                        cssRules.push(`.vs ${selector} { content: ' '; background-image: ${asCSSUrl(icon.light)}; }`);\n                    }\n                }\n            }\n        }\n        result.content = cssRules.join('\\n');\n        return result;\n    }\n}\nfunction handleParentFolder(key, selectors) {\n    const lastIndexOfSlash = key.lastIndexOf('/');\n    if (lastIndexOfSlash >= 0) {\n        const parentFolder = key.substring(0, lastIndexOfSlash);\n        selectors.push(`.${escapeCSS(parentFolder)}-name-dir-icon`);\n        return key.substring(lastIndexOfSlash + 1);\n    }\n    return key;\n}\nfunction escapeCSS(str) {\n    str = str.replace(/[\\11\\12\\14\\15\\40]/g, '/');\n    return mainWindow.CSS.escape(str);\n}\n\nexport { FileIconThemeData, FileIconThemeLoader };\n","import { localizeWithPath } from 'vscode/vscode/vs/nls';\nimport { Registry } from 'vscode/vscode/vs/platform/registry/common/platform';\nimport { Extensions } from 'vscode/vscode/vs/platform/jsonschemas/common/jsonContributionRegistry';\nimport { workbenchColorsSchemaId } from 'vscode/vscode/vs/platform/theme/common/colorUtils';\nimport 'vscode/vscode/vs/platform/theme/common/colors/baseColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/chartsColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/editorColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/inputColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/listColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/menuColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/minimapColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/miscColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/quickpickColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/searchColors';\nimport { tokenStylingSchemaId } from 'vscode/vscode/vs/platform/theme/common/tokenClassificationRegistry';\n\nconst _moduleId = \"vs/workbench/services/themes/common/colorThemeSchema\";\nconst textMateScopes = [\n    'comment',\n    'comment.block',\n    'comment.block.documentation',\n    'comment.line',\n    'constant',\n    'constant.character',\n    'constant.character.escape',\n    'constant.numeric',\n    'constant.numeric.integer',\n    'constant.numeric.float',\n    'constant.numeric.hex',\n    'constant.numeric.octal',\n    'constant.other',\n    'constant.regexp',\n    'constant.rgb-value',\n    'emphasis',\n    'entity',\n    'entity.name',\n    'entity.name.class',\n    'entity.name.function',\n    'entity.name.method',\n    'entity.name.section',\n    'entity.name.selector',\n    'entity.name.tag',\n    'entity.name.type',\n    'entity.other',\n    'entity.other.attribute-name',\n    'entity.other.inherited-class',\n    'invalid',\n    'invalid.deprecated',\n    'invalid.illegal',\n    'keyword',\n    'keyword.control',\n    'keyword.operator',\n    'keyword.operator.new',\n    'keyword.operator.assignment',\n    'keyword.operator.arithmetic',\n    'keyword.operator.logical',\n    'keyword.other',\n    'markup',\n    'markup.bold',\n    'markup.changed',\n    'markup.deleted',\n    'markup.heading',\n    'markup.inline.raw',\n    'markup.inserted',\n    'markup.italic',\n    'markup.list',\n    'markup.list.numbered',\n    'markup.list.unnumbered',\n    'markup.other',\n    'markup.quote',\n    'markup.raw',\n    'markup.underline',\n    'markup.underline.link',\n    'meta',\n    'meta.block',\n    'meta.cast',\n    'meta.class',\n    'meta.function',\n    'meta.function-call',\n    'meta.preprocessor',\n    'meta.return-type',\n    'meta.selector',\n    'meta.tag',\n    'meta.type.annotation',\n    'meta.type',\n    'punctuation.definition.string.begin',\n    'punctuation.definition.string.end',\n    'punctuation.separator',\n    'punctuation.separator.continuation',\n    'punctuation.terminator',\n    'storage',\n    'storage.modifier',\n    'storage.type',\n    'string',\n    'string.interpolated',\n    'string.other',\n    'string.quoted',\n    'string.quoted.double',\n    'string.quoted.other',\n    'string.quoted.single',\n    'string.quoted.triple',\n    'string.regexp',\n    'string.unquoted',\n    'strong',\n    'support',\n    'support.class',\n    'support.constant',\n    'support.function',\n    'support.other',\n    'support.type',\n    'support.type.property-name',\n    'support.variable',\n    'variable',\n    'variable.language',\n    'variable.name',\n    'variable.other',\n    'variable.other.readwrite',\n    'variable.parameter'\n];\nconst textmateColorsSchemaId = 'vscode://schemas/textmate-colors';\nconst textmateColorGroupSchemaId = `${textmateColorsSchemaId}#/definitions/colorGroup`;\nconst textmateColorSchema = {\n    type: 'array',\n    definitions: {\n        colorGroup: {\n            default: '#FF0000',\n            anyOf: [\n                {\n                    type: 'string',\n                    format: 'color-hex'\n                },\n                {\n                    $ref: '#/definitions/settings'\n                }\n            ]\n        },\n        settings: {\n            type: 'object',\n            description: ( localizeWithPath(_moduleId, 0, 'Colors and styles for the token.')),\n            properties: {\n                foreground: {\n                    type: 'string',\n                    description: ( localizeWithPath(_moduleId, 1, 'Foreground color for the token.')),\n                    format: 'color-hex',\n                    default: '#ff0000'\n                },\n                background: {\n                    type: 'string',\n                    deprecationMessage: ( localizeWithPath(_moduleId, 2, 'Token background colors are currently not supported.'))\n                },\n                fontStyle: {\n                    type: 'string',\n                    description: ( localizeWithPath(\n                        _moduleId,\n                        3,\n                        'Font style of the rule: \\'italic\\', \\'bold\\', \\'underline\\', \\'strikethrough\\' or a combination. The empty string unsets inherited settings.'\n                    )),\n                    pattern: '^(\\\\s*\\\\b(italic|bold|underline|strikethrough))*\\\\s*$',\n                    patternErrorMessage: ( localizeWithPath(\n                        _moduleId,\n                        4,\n                        'Font style must be \\'italic\\', \\'bold\\', \\'underline\\', \\'strikethrough\\' or a combination or the empty string.'\n                    )),\n                    defaultSnippets: [\n                        { label: ( localizeWithPath(_moduleId, 5, 'None (clear inherited style)')), bodyText: '\"\"' },\n                        { body: 'italic' },\n                        { body: 'bold' },\n                        { body: 'underline' },\n                        { body: 'strikethrough' },\n                        { body: 'italic bold' },\n                        { body: 'italic underline' },\n                        { body: 'italic strikethrough' },\n                        { body: 'bold underline' },\n                        { body: 'bold strikethrough' },\n                        { body: 'underline strikethrough' },\n                        { body: 'italic bold underline' },\n                        { body: 'italic bold strikethrough' },\n                        { body: 'italic underline strikethrough' },\n                        { body: 'bold underline strikethrough' },\n                        { body: 'italic bold underline strikethrough' }\n                    ]\n                }\n            },\n            additionalProperties: false,\n            defaultSnippets: [{ body: { foreground: '${1:#FF0000}', fontStyle: '${2:bold}' } }]\n        }\n    },\n    items: {\n        type: 'object',\n        defaultSnippets: [{ body: { scope: '${1:keyword.operator}', settings: { foreground: '${2:#FF0000}' } } }],\n        properties: {\n            name: {\n                type: 'string',\n                description: ( localizeWithPath(_moduleId, 6, 'Description of the rule.'))\n            },\n            scope: {\n                description: ( localizeWithPath(_moduleId, 7, 'Scope selector against which this rule matches.')),\n                anyOf: [\n                    {\n                        enum: textMateScopes\n                    },\n                    {\n                        type: 'string'\n                    },\n                    {\n                        type: 'array',\n                        items: {\n                            enum: textMateScopes\n                        }\n                    },\n                    {\n                        type: 'array',\n                        items: {\n                            type: 'string'\n                        }\n                    }\n                ]\n            },\n            settings: {\n                $ref: '#/definitions/settings'\n            }\n        },\n        required: [\n            'settings'\n        ],\n        additionalProperties: false\n    }\n};\nconst colorThemeSchemaId = 'vscode://schemas/color-theme';\nconst colorThemeSchema = {\n    type: 'object',\n    allowComments: true,\n    allowTrailingCommas: true,\n    properties: {\n        colors: {\n            description: ( localizeWithPath(_moduleId, 8, 'Colors in the workbench')),\n            $ref: workbenchColorsSchemaId,\n            additionalProperties: false\n        },\n        tokenColors: {\n            anyOf: [{\n                    type: 'string',\n                    description: ( localizeWithPath(_moduleId, 9, 'Path to a tmTheme file (relative to the current file).'))\n                },\n                {\n                    description: ( localizeWithPath(_moduleId, 10, 'Colors for syntax highlighting')),\n                    $ref: textmateColorsSchemaId\n                }\n            ]\n        },\n        semanticHighlighting: {\n            type: 'boolean',\n            description: ( localizeWithPath(\n                _moduleId,\n                11,\n                'Whether semantic highlighting should be enabled for this theme.'\n            ))\n        },\n        semanticTokenColors: {\n            type: 'object',\n            description: ( localizeWithPath(_moduleId, 12, 'Colors for semantic tokens')),\n            $ref: tokenStylingSchemaId\n        }\n    }\n};\nfunction registerColorThemeSchemas() {\n    const schemaRegistry = ( (Registry.as(Extensions.JSONContribution)));\n    schemaRegistry.registerSchema(colorThemeSchemaId, colorThemeSchema);\n    schemaRegistry.registerSchema(textmateColorsSchemaId, textmateColorSchema);\n}\n\nexport { colorThemeSchemaId, registerColorThemeSchemas, textmateColorGroupSchemaId, textmateColorsSchemaId };\n","import { localizeWithPath } from 'vscode/vscode/vs/nls';\nimport { isString } from 'vscode/vscode/vs/base/common/types';\nimport { joinPath, isEqualOrParent } from 'vscode/vscode/vs/base/common/resources';\nimport { ExtensionsRegistry } from 'vscode/vscode/vs/workbench/services/extensions/common/extensionsRegistry';\nimport { VS_DARK_THEME, VS_LIGHT_THEME, VS_HC_THEME, VS_HC_LIGHT_THEME, ExtensionData } from 'vscode/vscode/vs/workbench/services/themes/common/workbenchThemeService';\nimport { Emitter } from 'vscode/vscode/vs/base/common/event';\nimport { Disposable } from 'vscode/vscode/vs/base/common/lifecycle';\nimport { Extensions } from 'vscode/vscode/vs/workbench/services/extensionManagement/common/extensionFeatures';\nimport { MarkdownString } from 'vscode/vscode/vs/base/common/htmlContent';\nimport { Registry } from 'vscode/vscode/vs/platform/registry/common/platform';\nimport { SyncDescriptor } from 'vscode/vscode/vs/platform/instantiation/common/descriptors';\n\nconst _moduleId = \"vs/workbench/services/themes/common/themeExtensionPoints\";\nfunction registerColorThemeExtensionPoint() {\n    return ExtensionsRegistry.registerExtensionPoint({\n        extensionPoint: 'themes',\n        jsonSchema: {\n            description: ( localizeWithPath(_moduleId, 0, 'Contributes textmate color themes.')),\n            type: 'array',\n            items: {\n                type: 'object',\n                defaultSnippets: [{ body: { label: '${1:label}', id: '${2:id}', uiTheme: VS_DARK_THEME, path: './themes/${3:id}.tmTheme.' } }],\n                properties: {\n                    id: {\n                        description: ( localizeWithPath(_moduleId, 1, 'Id of the color theme as used in the user settings.')),\n                        type: 'string'\n                    },\n                    label: {\n                        description: ( localizeWithPath(_moduleId, 2, 'Label of the color theme as shown in the UI.')),\n                        type: 'string'\n                    },\n                    uiTheme: {\n                        description: ( localizeWithPath(\n                            _moduleId,\n                            3,\n                            'Base theme defining the colors around the editor: \\'vs\\' is the light color theme, \\'vs-dark\\' is the dark color theme. \\'hc-black\\' is the dark high contrast theme, \\'hc-light\\' is the light high contrast theme.'\n                        )),\n                        enum: [VS_LIGHT_THEME, VS_DARK_THEME, VS_HC_THEME, VS_HC_LIGHT_THEME]\n                    },\n                    path: {\n                        description: ( localizeWithPath(\n                            _moduleId,\n                            4,\n                            'Path of the tmTheme file. The path is relative to the extension folder and is typically \\'./colorthemes/awesome-color-theme.json\\'.'\n                        )),\n                        type: 'string'\n                    }\n                },\n                required: ['path', 'uiTheme']\n            }\n        }\n    });\n}\nfunction registerFileIconThemeExtensionPoint() {\n    return ExtensionsRegistry.registerExtensionPoint({\n        extensionPoint: 'iconThemes',\n        jsonSchema: {\n            description: ( localizeWithPath(_moduleId, 5, 'Contributes file icon themes.')),\n            type: 'array',\n            items: {\n                type: 'object',\n                defaultSnippets: [{ body: { id: '${1:id}', label: '${2:label}', path: './fileicons/${3:id}-icon-theme.json' } }],\n                properties: {\n                    id: {\n                        description: ( localizeWithPath(_moduleId, 6, 'Id of the file icon theme as used in the user settings.')),\n                        type: 'string'\n                    },\n                    label: {\n                        description: ( localizeWithPath(_moduleId, 7, 'Label of the file icon theme as shown in the UI.')),\n                        type: 'string'\n                    },\n                    path: {\n                        description: ( localizeWithPath(\n                            _moduleId,\n                            8,\n                            'Path of the file icon theme definition file. The path is relative to the extension folder and is typically \\'./fileicons/awesome-icon-theme.json\\'.'\n                        )),\n                        type: 'string'\n                    }\n                },\n                required: ['path', 'id']\n            }\n        }\n    });\n}\nfunction registerProductIconThemeExtensionPoint() {\n    return ExtensionsRegistry.registerExtensionPoint({\n        extensionPoint: 'productIconThemes',\n        jsonSchema: {\n            description: ( localizeWithPath(_moduleId, 9, 'Contributes product icon themes.')),\n            type: 'array',\n            items: {\n                type: 'object',\n                defaultSnippets: [{ body: { id: '${1:id}', label: '${2:label}', path: './producticons/${3:id}-product-icon-theme.json' } }],\n                properties: {\n                    id: {\n                        description: ( localizeWithPath(\n                            _moduleId,\n                            10,\n                            'Id of the product icon theme as used in the user settings.'\n                        )),\n                        type: 'string'\n                    },\n                    label: {\n                        description: ( localizeWithPath(_moduleId, 11, 'Label of the product icon theme as shown in the UI.')),\n                        type: 'string'\n                    },\n                    path: {\n                        description: ( localizeWithPath(\n                            _moduleId,\n                            12,\n                            'Path of the product icon theme definition file. The path is relative to the extension folder and is typically \\'./producticons/awesome-product-icon-theme.json\\'.'\n                        )),\n                        type: 'string'\n                    }\n                },\n                required: ['path', 'id']\n            }\n        }\n    });\n}\nclass ThemeDataRenderer extends Disposable {\n    constructor() {\n        super(...arguments);\n        this.type = 'markdown';\n    }\n    shouldRender(manifest) {\n        return !!manifest.contributes?.themes || !!manifest.contributes?.iconThemes || !!manifest.contributes?.productIconThemes;\n    }\n    render(manifest) {\n        const markdown = ( (new MarkdownString()));\n        if (manifest.contributes?.themes) {\n            markdown.appendMarkdown(`### ${( localizeWithPath(_moduleId, 13, \"Color Themes\"))}\\n\\n`);\n            for (const theme of manifest.contributes.themes) {\n                markdown.appendMarkdown(`- ${theme.label}\\n`);\n            }\n        }\n        if (manifest.contributes?.iconThemes) {\n            markdown.appendMarkdown(`### ${( localizeWithPath(_moduleId, 14, \"File Icon Themes\"))}\\n\\n`);\n            for (const theme of manifest.contributes.iconThemes) {\n                markdown.appendMarkdown(`- ${theme.label}\\n`);\n            }\n        }\n        if (manifest.contributes?.productIconThemes) {\n            markdown.appendMarkdown(`### ${( localizeWithPath(_moduleId, 15, \"Product Icon Themes\"))}\\n\\n`);\n            for (const theme of manifest.contributes.productIconThemes) {\n                markdown.appendMarkdown(`- ${theme.label}\\n`);\n            }\n        }\n        return {\n            data: markdown,\n            dispose: () => { }\n        };\n    }\n}\n( (Registry.as(Extensions.ExtensionFeaturesRegistry))).registerExtensionFeature({\n    id: 'themes',\n    label: ( localizeWithPath(_moduleId, 16, \"Themes\")),\n    access: {\n        canToggle: false\n    },\n    renderer: ( (new SyncDescriptor(ThemeDataRenderer))),\n});\nclass ThemeRegistry {\n    constructor(themesExtPoint, create, idRequired = false, builtInTheme = undefined) {\n        this.themesExtPoint = themesExtPoint;\n        this.create = create;\n        this.idRequired = idRequired;\n        this.builtInTheme = builtInTheme;\n        this.onDidChangeEmitter = ( (new Emitter()));\n        this.onDidChange = this.onDidChangeEmitter.event;\n        this.extensionThemes = [];\n        this.initialize();\n    }\n    dispose() {\n        this.themesExtPoint.setHandler(() => { });\n    }\n    initialize() {\n        this.themesExtPoint.setHandler((extensions, delta) => {\n            const previousIds = {};\n            const added = [];\n            for (const theme of this.extensionThemes) {\n                previousIds[theme.id] = theme;\n            }\n            this.extensionThemes.length = 0;\n            for (const ext of extensions) {\n                const extensionData = ExtensionData.fromName(ext.description.publisher, ext.description.name, ext.description.isBuiltin);\n                this.onThemes(extensionData, ext.description.extensionLocation, ext.value, this.extensionThemes, ext.collector);\n            }\n            for (const theme of this.extensionThemes) {\n                if (!previousIds[theme.id]) {\n                    added.push(theme);\n                }\n                else {\n                    delete previousIds[theme.id];\n                }\n            }\n            const removed = ( (Object.values(previousIds)));\n            this.onDidChangeEmitter.fire({ themes: this.extensionThemes, added, removed });\n        });\n    }\n    onThemes(extensionData, extensionLocation, themeContributions, resultingThemes = [], log) {\n        if (!Array.isArray(themeContributions)) {\n            log?.error(( localizeWithPath(\n                _moduleId,\n                17,\n                \"Extension point `{0}` must be an array.\",\n                this.themesExtPoint.name\n            )));\n            return resultingThemes;\n        }\n        themeContributions.forEach(theme => {\n            if (!theme.path || !isString(theme.path)) {\n                log?.error(( localizeWithPath(\n                    _moduleId,\n                    18,\n                    \"Expected string in `contributes.{0}.path`. Provided value: {1}\",\n                    this.themesExtPoint.name,\n                    String(theme.path)\n                )));\n                return;\n            }\n            if (this.idRequired && (!theme.id || !isString(theme.id))) {\n                log?.error(( localizeWithPath(\n                    _moduleId,\n                    19,\n                    \"Expected string in `contributes.{0}.id`. Provided value: {1}\",\n                    this.themesExtPoint.name,\n                    String(theme.id)\n                )));\n                return;\n            }\n            const themeLocation = joinPath(extensionLocation, theme.path);\n            if (!isEqualOrParent(themeLocation, extensionLocation)) {\n                log?.warn(( localizeWithPath(\n                    _moduleId,\n                    20,\n                    \"Expected `contributes.{0}.path` ({1}) to be included inside extension's folder ({2}). This might make the extension non-portable.\",\n                    this.themesExtPoint.name,\n                    themeLocation.path,\n                    extensionLocation.path\n                )));\n            }\n            const themeData = this.create(theme, themeLocation, extensionData);\n            resultingThemes.push(themeData);\n        });\n        return resultingThemes;\n    }\n    findThemeById(themeId) {\n        if (this.builtInTheme && this.builtInTheme.id === themeId) {\n            return this.builtInTheme;\n        }\n        const allThemes = this.getThemes();\n        for (const t of allThemes) {\n            if (t.id === themeId) {\n                return t;\n            }\n        }\n        return undefined;\n    }\n    findThemeBySettingsId(settingsId, defaultSettingsId) {\n        if (this.builtInTheme && this.builtInTheme.settingsId === settingsId) {\n            return this.builtInTheme;\n        }\n        const allThemes = this.getThemes();\n        let defaultTheme = undefined;\n        for (const t of allThemes) {\n            if (t.settingsId === settingsId) {\n                return t;\n            }\n            if (t.settingsId === defaultSettingsId) {\n                defaultTheme = t;\n            }\n        }\n        return defaultTheme;\n    }\n    findThemeByExtensionLocation(extLocation) {\n        if (extLocation) {\n            return this.getThemes().filter(t => t.location && isEqualOrParent(t.location, extLocation));\n        }\n        return [];\n    }\n    getThemes() {\n        return this.extensionThemes;\n    }\n    getMarketplaceThemes(manifest, extensionLocation, extensionData) {\n        const themes = manifest?.contributes?.[this.themesExtPoint.name];\n        if (Array.isArray(themes)) {\n            return this.onThemes(extensionData, extensionLocation, themes);\n        }\n        return [];\n    }\n}\n\nexport { ThemeRegistry, registerColorThemeExtensionPoint, registerFileIconThemeExtensionPoint, registerProductIconThemeExtensionPoint };\n","import { localizeWithPath } from 'vscode/vscode/vs/nls';\nimport { isUndefined } from 'vscode/vscode/vs/base/common/types';\nimport { Registry } from 'vscode/vscode/vs/platform/registry/common/platform';\nimport { Extensions } from 'vscode/vscode/vs/platform/configuration/common/configurationRegistry';\nimport { textmateColorGroupSchemaId, textmateColorsSchemaId } from './colorThemeSchema.js';\nimport { workbenchColorsSchemaId } from 'vscode/vscode/vs/platform/theme/common/colorUtils';\nimport 'vscode/vscode/vs/platform/theme/common/colors/baseColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/chartsColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/editorColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/inputColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/listColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/menuColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/minimapColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/miscColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/quickpickColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/searchColors';\nimport { tokenStylingSchemaId } from 'vscode/vscode/vs/platform/theme/common/tokenClassificationRegistry';\nimport { ThemeSettings, ThemeSettingDefaults } from 'vscode/vscode/vs/workbench/services/themes/common/workbenchThemeService';\nimport { isWeb } from 'vscode/vscode/vs/base/common/platform';\nimport { ColorScheme } from 'vscode/vscode/vs/platform/theme/common/theme';\n\nconst _moduleId = \"vs/workbench/services/themes/common/themeConfiguration\";\nconst configurationRegistry = ( (Registry.as(Extensions.Configuration)));\nconst colorThemeSettingEnum = [];\nconst colorThemeSettingEnumItemLabels = [];\nconst colorThemeSettingEnumDescriptions = [];\nfunction formatSettingAsLink(str) {\n    return `\\`#${str}#\\``;\n}\nconst COLOR_THEME_CONFIGURATION_SETTINGS_TAG = 'colorThemeConfiguration';\nconst colorThemeSettingSchema = {\n    type: 'string',\n    markdownDescription: ( localizeWithPath(\n        _moduleId,\n        0,\n        \"Specifies the color theme used in the workbench when {0} is not enabled.\",\n        formatSettingAsLink(ThemeSettings.DETECT_COLOR_SCHEME)\n    )),\n    default: isWeb ? ThemeSettingDefaults.COLOR_THEME_LIGHT : ThemeSettingDefaults.COLOR_THEME_DARK,\n    tags: [COLOR_THEME_CONFIGURATION_SETTINGS_TAG],\n    enum: colorThemeSettingEnum,\n    enumDescriptions: colorThemeSettingEnumDescriptions,\n    enumItemLabels: colorThemeSettingEnumItemLabels,\n    errorMessage: ( localizeWithPath(_moduleId, 1, \"Theme is unknown or not installed.\")),\n};\nconst preferredDarkThemeSettingSchema = {\n    type: 'string',\n    markdownDescription: ( localizeWithPath(\n        _moduleId,\n        2,\n        'Specifies the color theme when system color mode is dark and {0} is enabled.',\n        formatSettingAsLink(ThemeSettings.DETECT_COLOR_SCHEME)\n    )),\n    default: ThemeSettingDefaults.COLOR_THEME_DARK,\n    tags: [COLOR_THEME_CONFIGURATION_SETTINGS_TAG],\n    enum: colorThemeSettingEnum,\n    enumDescriptions: colorThemeSettingEnumDescriptions,\n    enumItemLabels: colorThemeSettingEnumItemLabels,\n    errorMessage: ( localizeWithPath(_moduleId, 1, \"Theme is unknown or not installed.\")),\n};\nconst preferredLightThemeSettingSchema = {\n    type: 'string',\n    markdownDescription: ( localizeWithPath(\n        _moduleId,\n        3,\n        'Specifies the color theme when system color mode is light and {0} is enabled.',\n        formatSettingAsLink(ThemeSettings.DETECT_COLOR_SCHEME)\n    )),\n    default: ThemeSettingDefaults.COLOR_THEME_LIGHT,\n    tags: [COLOR_THEME_CONFIGURATION_SETTINGS_TAG],\n    enum: colorThemeSettingEnum,\n    enumDescriptions: colorThemeSettingEnumDescriptions,\n    enumItemLabels: colorThemeSettingEnumItemLabels,\n    errorMessage: ( localizeWithPath(_moduleId, 1, \"Theme is unknown or not installed.\")),\n};\nconst preferredHCDarkThemeSettingSchema = {\n    type: 'string',\n    markdownDescription: ( localizeWithPath(\n        _moduleId,\n        4,\n        'Specifies the color theme when in high contrast dark mode and {0} is enabled.',\n        formatSettingAsLink(ThemeSettings.DETECT_HC)\n    )),\n    default: ThemeSettingDefaults.COLOR_THEME_HC_DARK,\n    tags: [COLOR_THEME_CONFIGURATION_SETTINGS_TAG],\n    enum: colorThemeSettingEnum,\n    enumDescriptions: colorThemeSettingEnumDescriptions,\n    enumItemLabels: colorThemeSettingEnumItemLabels,\n    errorMessage: ( localizeWithPath(_moduleId, 1, \"Theme is unknown or not installed.\")),\n};\nconst preferredHCLightThemeSettingSchema = {\n    type: 'string',\n    markdownDescription: ( localizeWithPath(\n        _moduleId,\n        5,\n        'Specifies the color theme when in high contrast light mode and {0} is enabled.',\n        formatSettingAsLink(ThemeSettings.DETECT_HC)\n    )),\n    default: ThemeSettingDefaults.COLOR_THEME_HC_LIGHT,\n    tags: [COLOR_THEME_CONFIGURATION_SETTINGS_TAG],\n    enum: colorThemeSettingEnum,\n    enumDescriptions: colorThemeSettingEnumDescriptions,\n    enumItemLabels: colorThemeSettingEnumItemLabels,\n    errorMessage: ( localizeWithPath(_moduleId, 1, \"Theme is unknown or not installed.\")),\n};\nconst detectColorSchemeSettingSchema = {\n    type: 'boolean',\n    markdownDescription: ( localizeWithPath(\n        _moduleId,\n        6,\n        'If enabled, will automatically select a color theme based on the system color mode. If the system color mode is dark, {0} is used, else {1}.',\n        formatSettingAsLink(ThemeSettings.PREFERRED_DARK_THEME),\n        formatSettingAsLink(ThemeSettings.PREFERRED_LIGHT_THEME)\n    )),\n    default: false,\n    tags: [COLOR_THEME_CONFIGURATION_SETTINGS_TAG],\n};\nconst colorCustomizationsSchema = {\n    type: 'object',\n    description: ( localizeWithPath(_moduleId, 7, \"Overrides colors from the currently selected color theme.\")),\n    allOf: [{ $ref: workbenchColorsSchemaId }],\n    default: {},\n    defaultSnippets: [{\n            body: {}\n        }]\n};\nconst fileIconThemeSettingSchema = {\n    type: ['string', 'null'],\n    default: ThemeSettingDefaults.FILE_ICON_THEME,\n    description: ( localizeWithPath(\n        _moduleId,\n        8,\n        \"Specifies the file icon theme used in the workbench or 'null' to not show any file icons.\"\n    )),\n    enum: [null],\n    enumItemLabels: [( localizeWithPath(_moduleId, 9, 'None'))],\n    enumDescriptions: [( localizeWithPath(_moduleId, 10, 'No file icons'))],\n    errorMessage: ( localizeWithPath(_moduleId, 11, \"File icon theme is unknown or not installed.\"))\n};\nconst productIconThemeSettingSchema = {\n    type: ['string', 'null'],\n    default: ThemeSettingDefaults.PRODUCT_ICON_THEME,\n    description: ( localizeWithPath(_moduleId, 12, \"Specifies the product icon theme used.\")),\n    enum: [ThemeSettingDefaults.PRODUCT_ICON_THEME],\n    enumItemLabels: [( localizeWithPath(_moduleId, 13, 'Default'))],\n    enumDescriptions: [( localizeWithPath(_moduleId, 14, 'Default'))],\n    errorMessage: ( localizeWithPath(_moduleId, 15, \"Product icon theme is unknown or not installed.\"))\n};\nconst detectHCSchemeSettingSchema = {\n    type: 'boolean',\n    default: true,\n    markdownDescription: ( localizeWithPath(\n        _moduleId,\n        16,\n        \"If enabled, will automatically change to high contrast theme if the OS is using a high contrast theme. The high contrast theme to use is specified by {0} and {1}.\",\n        formatSettingAsLink(ThemeSettings.PREFERRED_HC_DARK_THEME),\n        formatSettingAsLink(ThemeSettings.PREFERRED_HC_LIGHT_THEME)\n    )),\n    scope: 1 ,\n    tags: [COLOR_THEME_CONFIGURATION_SETTINGS_TAG],\n};\nconst themeSettingsConfiguration = {\n    id: 'workbench',\n    order: 7.1,\n    type: 'object',\n    properties: {\n        [ThemeSettings.COLOR_THEME]: colorThemeSettingSchema,\n        [ThemeSettings.PREFERRED_DARK_THEME]: preferredDarkThemeSettingSchema,\n        [ThemeSettings.PREFERRED_LIGHT_THEME]: preferredLightThemeSettingSchema,\n        [ThemeSettings.PREFERRED_HC_DARK_THEME]: preferredHCDarkThemeSettingSchema,\n        [ThemeSettings.PREFERRED_HC_LIGHT_THEME]: preferredHCLightThemeSettingSchema,\n        [ThemeSettings.FILE_ICON_THEME]: fileIconThemeSettingSchema,\n        [ThemeSettings.COLOR_CUSTOMIZATIONS]: colorCustomizationsSchema,\n        [ThemeSettings.PRODUCT_ICON_THEME]: productIconThemeSettingSchema\n    }\n};\nconfigurationRegistry.registerConfiguration(themeSettingsConfiguration);\nconst themeSettingsWindowConfiguration = {\n    id: 'window',\n    order: 8.1,\n    type: 'object',\n    properties: {\n        [ThemeSettings.DETECT_HC]: detectHCSchemeSettingSchema,\n        [ThemeSettings.DETECT_COLOR_SCHEME]: detectColorSchemeSettingSchema,\n    }\n};\nconfigurationRegistry.registerConfiguration(themeSettingsWindowConfiguration);\nfunction tokenGroupSettings(description) {\n    return {\n        description,\n        $ref: textmateColorGroupSchemaId\n    };\n}\nconst themeSpecificSettingKey = '^\\\\[[^\\\\]]*(\\\\]\\\\s*\\\\[[^\\\\]]*)*\\\\]$';\nconst tokenColorSchema = {\n    type: 'object',\n    properties: {\n        comments: tokenGroupSettings(( localizeWithPath(_moduleId, 17, \"Sets the colors and styles for comments\"))),\n        strings: tokenGroupSettings(( localizeWithPath(_moduleId, 18, \"Sets the colors and styles for strings literals.\"))),\n        keywords: tokenGroupSettings(( localizeWithPath(_moduleId, 19, \"Sets the colors and styles for keywords.\"))),\n        numbers: tokenGroupSettings(( localizeWithPath(_moduleId, 20, \"Sets the colors and styles for number literals.\"))),\n        types: tokenGroupSettings(( localizeWithPath(\n            _moduleId,\n            21,\n            \"Sets the colors and styles for type declarations and references.\"\n        ))),\n        functions: tokenGroupSettings(( localizeWithPath(\n            _moduleId,\n            22,\n            \"Sets the colors and styles for functions declarations and references.\"\n        ))),\n        variables: tokenGroupSettings(( localizeWithPath(\n            _moduleId,\n            23,\n            \"Sets the colors and styles for variables declarations and references.\"\n        ))),\n        textMateRules: {\n            description: ( localizeWithPath(\n                _moduleId,\n                24,\n                'Sets colors and styles using textmate theming rules (advanced).'\n            )),\n            $ref: textmateColorsSchemaId\n        },\n        semanticHighlighting: {\n            description: ( localizeWithPath(\n                _moduleId,\n                25,\n                'Whether semantic highlighting should be enabled for this theme.'\n            )),\n            deprecationMessage: ( localizeWithPath(\n                _moduleId,\n                26,\n                'Use `enabled` in `editor.semanticTokenColorCustomizations` setting instead.'\n            )),\n            markdownDeprecationMessage: ( localizeWithPath(\n                _moduleId,\n                27,\n                'Use `enabled` in {0} setting instead.',\n                formatSettingAsLink('editor.semanticTokenColorCustomizations')\n            )),\n            type: 'boolean'\n        }\n    },\n    additionalProperties: false\n};\nconst tokenColorCustomizationSchema = {\n    description: ( localizeWithPath(\n        _moduleId,\n        28,\n        \"Overrides editor syntax colors and font style from the currently selected color theme.\"\n    )),\n    default: {},\n    allOf: [{ ...tokenColorSchema, patternProperties: { '^\\\\[': {} } }]\n};\nconst semanticTokenColorSchema = {\n    type: 'object',\n    properties: {\n        enabled: {\n            type: 'boolean',\n            description: ( localizeWithPath(\n                _moduleId,\n                29,\n                'Whether semantic highlighting is enabled or disabled for this theme'\n            )),\n            suggestSortText: '0_enabled'\n        },\n        rules: {\n            $ref: tokenStylingSchemaId,\n            description: ( localizeWithPath(_moduleId, 30, 'Semantic token styling rules for this theme.')),\n            suggestSortText: '0_rules'\n        }\n    },\n    additionalProperties: false\n};\nconst semanticTokenColorCustomizationSchema = {\n    description: ( localizeWithPath(\n        _moduleId,\n        31,\n        \"Overrides editor semantic token color and styles from the currently selected color theme.\"\n    )),\n    default: {},\n    allOf: [{ ...semanticTokenColorSchema, patternProperties: { '^\\\\[': {} } }]\n};\nconst tokenColorCustomizationConfiguration = {\n    id: 'editor',\n    order: 7.2,\n    type: 'object',\n    properties: {\n        [ThemeSettings.TOKEN_COLOR_CUSTOMIZATIONS]: tokenColorCustomizationSchema,\n        [ThemeSettings.SEMANTIC_TOKEN_COLOR_CUSTOMIZATIONS]: semanticTokenColorCustomizationSchema\n    }\n};\nconfigurationRegistry.registerConfiguration(tokenColorCustomizationConfiguration);\nfunction updateColorThemeConfigurationSchemas(themes) {\n    themes.sort((a, b) => a.label.localeCompare(b.label));\n    colorThemeSettingEnum.splice(0, colorThemeSettingEnum.length, ...( (themes.map(t => t.settingsId))));\n    colorThemeSettingEnumDescriptions.splice(0, colorThemeSettingEnumDescriptions.length, ...( (themes.map(t => t.description || ''))));\n    colorThemeSettingEnumItemLabels.splice(0, colorThemeSettingEnumItemLabels.length, ...( (themes.map(t => t.label || ''))));\n    const themeSpecificWorkbenchColors = { properties: {} };\n    const themeSpecificTokenColors = { properties: {} };\n    const themeSpecificSemanticTokenColors = { properties: {} };\n    const workbenchColors = { $ref: workbenchColorsSchemaId, additionalProperties: false };\n    const tokenColors = { properties: tokenColorSchema.properties, additionalProperties: false };\n    for (const t of themes) {\n        const themeId = `[${t.settingsId}]`;\n        themeSpecificWorkbenchColors.properties[themeId] = workbenchColors;\n        themeSpecificTokenColors.properties[themeId] = tokenColors;\n        themeSpecificSemanticTokenColors.properties[themeId] = semanticTokenColorSchema;\n    }\n    themeSpecificWorkbenchColors.patternProperties = { [themeSpecificSettingKey]: workbenchColors };\n    themeSpecificTokenColors.patternProperties = { [themeSpecificSettingKey]: tokenColors };\n    themeSpecificSemanticTokenColors.patternProperties = { [themeSpecificSettingKey]: semanticTokenColorSchema };\n    colorCustomizationsSchema.allOf[1] = themeSpecificWorkbenchColors;\n    tokenColorCustomizationSchema.allOf[1] = themeSpecificTokenColors;\n    semanticTokenColorCustomizationSchema.allOf[1] = themeSpecificSemanticTokenColors;\n    configurationRegistry.notifyConfigurationSchemaUpdated(themeSettingsConfiguration, tokenColorCustomizationConfiguration);\n}\nfunction updateFileIconThemeConfigurationSchemas(themes) {\n    fileIconThemeSettingSchema.enum.splice(1, Number.MAX_VALUE, ...( (themes.map(t => t.settingsId))));\n    fileIconThemeSettingSchema.enumItemLabels.splice(1, Number.MAX_VALUE, ...( (themes.map(t => t.label))));\n    fileIconThemeSettingSchema.enumDescriptions.splice(1, Number.MAX_VALUE, ...( (themes.map(t => t.description || ''))));\n    configurationRegistry.notifyConfigurationSchemaUpdated(themeSettingsConfiguration);\n}\nfunction updateProductIconThemeConfigurationSchemas(themes) {\n    productIconThemeSettingSchema.enum.splice(1, Number.MAX_VALUE, ...( (themes.map(t => t.settingsId))));\n    productIconThemeSettingSchema.enumItemLabels.splice(1, Number.MAX_VALUE, ...( (themes.map(t => t.label))));\n    productIconThemeSettingSchema.enumDescriptions.splice(1, Number.MAX_VALUE, ...( (themes.map(t => t.description || ''))));\n    configurationRegistry.notifyConfigurationSchemaUpdated(themeSettingsConfiguration);\n}\nconst colorSchemeToPreferred = {\n    [ColorScheme.DARK]: ThemeSettings.PREFERRED_DARK_THEME,\n    [ColorScheme.LIGHT]: ThemeSettings.PREFERRED_LIGHT_THEME,\n    [ColorScheme.HIGH_CONTRAST_DARK]: ThemeSettings.PREFERRED_HC_DARK_THEME,\n    [ColorScheme.HIGH_CONTRAST_LIGHT]: ThemeSettings.PREFERRED_HC_LIGHT_THEME\n};\nclass ThemeConfiguration {\n    constructor(configurationService, hostColorService) {\n        this.configurationService = configurationService;\n        this.hostColorService = hostColorService;\n    }\n    get colorTheme() {\n        return this.configurationService.getValue(this.getColorThemeSettingId());\n    }\n    get fileIconTheme() {\n        return this.configurationService.getValue(ThemeSettings.FILE_ICON_THEME);\n    }\n    get productIconTheme() {\n        return this.configurationService.getValue(ThemeSettings.PRODUCT_ICON_THEME);\n    }\n    get colorCustomizations() {\n        return this.configurationService.getValue(ThemeSettings.COLOR_CUSTOMIZATIONS) || {};\n    }\n    get tokenColorCustomizations() {\n        return this.configurationService.getValue(ThemeSettings.TOKEN_COLOR_CUSTOMIZATIONS) || {};\n    }\n    get semanticTokenColorCustomizations() {\n        return this.configurationService.getValue(ThemeSettings.SEMANTIC_TOKEN_COLOR_CUSTOMIZATIONS);\n    }\n    getPreferredColorScheme() {\n        if (this.configurationService.getValue(ThemeSettings.DETECT_HC) && this.hostColorService.highContrast) {\n            return this.hostColorService.dark ? ColorScheme.HIGH_CONTRAST_DARK : ColorScheme.HIGH_CONTRAST_LIGHT;\n        }\n        if (this.configurationService.getValue(ThemeSettings.DETECT_COLOR_SCHEME)) {\n            return this.hostColorService.dark ? ColorScheme.DARK : ColorScheme.LIGHT;\n        }\n        return undefined;\n    }\n    getColorThemeSettingId() {\n        const preferredScheme = this.getPreferredColorScheme();\n        return preferredScheme ? colorSchemeToPreferred[preferredScheme] : ThemeSettings.COLOR_THEME;\n    }\n    async setColorTheme(theme, settingsTarget) {\n        await this.writeConfiguration(this.getColorThemeSettingId(), theme.settingsId, settingsTarget);\n        return theme;\n    }\n    async setFileIconTheme(theme, settingsTarget) {\n        await this.writeConfiguration(ThemeSettings.FILE_ICON_THEME, theme.settingsId, settingsTarget);\n        return theme;\n    }\n    async setProductIconTheme(theme, settingsTarget) {\n        await this.writeConfiguration(ThemeSettings.PRODUCT_ICON_THEME, theme.settingsId, settingsTarget);\n        return theme;\n    }\n    isDefaultColorTheme() {\n        const settings = this.configurationService.inspect(this.getColorThemeSettingId());\n        return settings && settings.default?.value === settings.value;\n    }\n    findAutoConfigurationTarget(key) {\n        const settings = this.configurationService.inspect(key);\n        if (!isUndefined(settings.workspaceFolderValue)) {\n            return 6 ;\n        }\n        else if (!isUndefined(settings.workspaceValue)) {\n            return 5 ;\n        }\n        else if (!isUndefined(settings.userRemote)) {\n            return 4 ;\n        }\n        return 2 ;\n    }\n    async writeConfiguration(key, value, settingsTarget) {\n        if (settingsTarget === undefined || settingsTarget === 'preview') {\n            return;\n        }\n        const settings = this.configurationService.inspect(key);\n        if (settingsTarget === 'auto') {\n            return this.configurationService.updateValue(key, value);\n        }\n        if (settingsTarget === 2 ) {\n            if (value === settings.userValue) {\n                return Promise.resolve(undefined);\n            }\n            else if (value === settings.defaultValue) {\n                if (isUndefined(settings.userValue)) {\n                    return Promise.resolve(undefined);\n                }\n                value = undefined;\n            }\n        }\n        else if (settingsTarget === 5  || settingsTarget === 6  || settingsTarget === 4 ) {\n            if (value === settings.value) {\n                return Promise.resolve(undefined);\n            }\n        }\n        return this.configurationService.updateValue(key, value, settingsTarget);\n    }\n}\n\nexport { COLOR_THEME_CONFIGURATION_SETTINGS_TAG, ThemeConfiguration, formatSettingAsLink, updateColorThemeConfigurationSchemas, updateFileIconThemeConfigurationSchemas, updateProductIconThemeConfigurationSchemas };\n","import { localizeWithPath } from 'vscode/vscode/vs/nls';\nimport { basename } from 'vscode/vscode/vs/base/common/path';\nimport { dirname, joinPath } from 'vscode/vscode/vs/base/common/resources';\nimport { parse, getNodeType } from 'vscode/vscode/vs/base/common/json';\nimport { ThemeSettingDefaults, ExtensionData } from 'vscode/vscode/vs/workbench/services/themes/common/workbenchThemeService';\nimport { getParseErrorMessage } from 'vscode/vscode/vs/base/common/jsonErrorMessages';\nimport { fontIdRegex, fontWeightRegex, fontStyleRegex, fontFormatRegex } from '../common/productIconThemeSchema.js';\nimport { isObject, isString } from 'vscode/vscode/vs/base/common/types';\nimport { IconFontDefinition, getIconRegistry } from 'vscode/vscode/vs/platform/theme/common/iconRegistry';\nimport { ThemeIcon } from 'vscode/vscode/vs/base/common/themables';\n\nconst _moduleId = \"vs/workbench/services/themes/browser/productIconThemeData\";\nconst DEFAULT_PRODUCT_ICON_THEME_ID = '';\nclass ProductIconThemeData {\n    static { this.STORAGE_KEY = 'productIconThemeData'; }\n    constructor(id, label, settingsId) {\n        this.iconThemeDocument = { iconDefinitions: ( (new Map())) };\n        this.id = id;\n        this.label = label;\n        this.settingsId = settingsId;\n        this.isLoaded = false;\n    }\n    getIcon(iconContribution) {\n        return _resolveIconDefinition(iconContribution, this.iconThemeDocument);\n    }\n    ensureLoaded(fileService, logService) {\n        return !this.isLoaded ? this.load(fileService, logService) : Promise.resolve(this.styleSheetContent);\n    }\n    reload(fileService, logService) {\n        return this.load(fileService, logService);\n    }\n    async load(fileService, logService) {\n        const location = this.location;\n        if (!location) {\n            return Promise.resolve(this.styleSheetContent);\n        }\n        const warnings = [];\n        this.iconThemeDocument = await _loadProductIconThemeDocument(fileService, location, warnings);\n        this.isLoaded = true;\n        if (warnings.length) {\n            logService.error(( localizeWithPath(\n                _moduleId,\n                0,\n                \"Problems processing product icons definitions in {0}:\\n{1}\",\n                 (location.toString()),\n                warnings.join('\\n')\n            )));\n        }\n        return this.styleSheetContent;\n    }\n    static fromExtensionTheme(iconTheme, iconThemeLocation, extensionData) {\n        const id = extensionData.extensionId + '-' + iconTheme.id;\n        const label = iconTheme.label || basename(iconTheme.path);\n        const settingsId = iconTheme.id;\n        const themeData = ( (new ProductIconThemeData(id, label, settingsId)));\n        themeData.description = iconTheme.description;\n        themeData.location = iconThemeLocation;\n        themeData.extensionData = extensionData;\n        themeData.watch = iconTheme._watch;\n        themeData.isLoaded = false;\n        return themeData;\n    }\n    static createUnloadedTheme(id) {\n        const themeData = ( (new ProductIconThemeData(id, '', '__' + id)));\n        themeData.isLoaded = false;\n        themeData.extensionData = undefined;\n        themeData.watch = false;\n        return themeData;\n    }\n    static { this._defaultProductIconTheme = null; }\n    static get defaultTheme() {\n        let themeData = ProductIconThemeData._defaultProductIconTheme;\n        if (!themeData) {\n            themeData = ProductIconThemeData._defaultProductIconTheme = ( (new ProductIconThemeData(DEFAULT_PRODUCT_ICON_THEME_ID, ( localizeWithPath(_moduleId, 1, 'Default')), ThemeSettingDefaults.PRODUCT_ICON_THEME)));\n            themeData.isLoaded = true;\n            themeData.extensionData = undefined;\n            themeData.watch = false;\n        }\n        return themeData;\n    }\n    static fromStorageData(storageService) {\n        const input = storageService.get(ProductIconThemeData.STORAGE_KEY, 0 );\n        if (!input) {\n            return undefined;\n        }\n        try {\n            const data = JSON.parse(input);\n            const theme = ( (new ProductIconThemeData('', '', '')));\n            for (const key in data) {\n                switch (key) {\n                    case 'id':\n                    case 'label':\n                    case 'description':\n                    case 'settingsId':\n                    case 'styleSheetContent':\n                    case 'watch':\n                        theme[key] = data[key];\n                        break;\n                    case 'location':\n                        break;\n                    case 'extensionData':\n                        theme.extensionData = ExtensionData.fromJSONObject(data.extensionData);\n                        break;\n                }\n            }\n            const { iconDefinitions, iconFontDefinitions } = data;\n            if (Array.isArray(iconDefinitions) && isObject(iconFontDefinitions)) {\n                const restoredIconDefinitions = ( (new Map()));\n                for (const entry of iconDefinitions) {\n                    const { id, fontCharacter, fontId } = entry;\n                    if (isString(id) && isString(fontCharacter)) {\n                        if (isString(fontId)) {\n                            const iconFontDefinition = IconFontDefinition.fromJSONObject(iconFontDefinitions[fontId]);\n                            if (iconFontDefinition) {\n                                restoredIconDefinitions.set(id, { fontCharacter, font: { id: fontId, definition: iconFontDefinition } });\n                            }\n                        }\n                        else {\n                            restoredIconDefinitions.set(id, { fontCharacter });\n                        }\n                    }\n                }\n                theme.iconThemeDocument = { iconDefinitions: restoredIconDefinitions };\n            }\n            return theme;\n        }\n        catch (e) {\n            return undefined;\n        }\n    }\n    toStorage(storageService) {\n        const iconDefinitions = [];\n        const iconFontDefinitions = {};\n        for (const entry of this.iconThemeDocument.iconDefinitions.entries()) {\n            const font = entry[1].font;\n            iconDefinitions.push({ id: entry[0], fontCharacter: entry[1].fontCharacter, fontId: font?.id });\n            if (font && iconFontDefinitions[font.id] === undefined) {\n                iconFontDefinitions[font.id] = IconFontDefinition.toJSONObject(font.definition);\n            }\n        }\n        const data = JSON.stringify({\n            id: this.id,\n            label: this.label,\n            description: this.description,\n            settingsId: this.settingsId,\n            styleSheetContent: this.styleSheetContent,\n            watch: this.watch,\n            extensionData: ExtensionData.toJSONObject(this.extensionData),\n            iconDefinitions,\n            iconFontDefinitions\n        });\n        storageService.store(ProductIconThemeData.STORAGE_KEY, data, 0 , 1 );\n    }\n}\nfunction _loadProductIconThemeDocument(fileService, location, warnings) {\n    return fileService.readExtensionResource(location).then((content) => {\n        const parseErrors = [];\n        const contentValue = parse(content, parseErrors);\n        if (parseErrors.length > 0) {\n            return Promise.reject(( (new Error(( localizeWithPath(\n                _moduleId,\n                2,\n                \"Problems parsing product icons file: {0}\",\n                ( (parseErrors.map(e => getParseErrorMessage(e.error)))).join(', ')\n            ))))));\n        }\n        else if (getNodeType(contentValue) !== 'object') {\n            return Promise.reject(( (new Error(( localizeWithPath(\n                _moduleId,\n                3,\n                \"Invalid format for product icons theme file: Object expected.\"\n            ))))));\n        }\n        else if (!contentValue.iconDefinitions || !Array.isArray(contentValue.fonts) || !contentValue.fonts.length) {\n            return Promise.reject(( (new Error(( localizeWithPath(\n                _moduleId,\n                4,\n                \"Invalid format for product icons theme file: Must contain iconDefinitions and fonts.\"\n            ))))));\n        }\n        const iconThemeDocumentLocationDirname = dirname(location);\n        const sanitizedFonts = ( (new Map()));\n        for (const font of contentValue.fonts) {\n            if (isString(font.id) && font.id.match(fontIdRegex)) {\n                const fontId = font.id;\n                let fontWeight = undefined;\n                if (isString(font.weight) && font.weight.match(fontWeightRegex)) {\n                    fontWeight = font.weight;\n                }\n                else {\n                    warnings.push(( localizeWithPath(\n                        _moduleId,\n                        5,\n                        'Invalid font weight in font \\'{0}\\'. Ignoring setting.',\n                        font.id\n                    )));\n                }\n                let fontStyle = undefined;\n                if (isString(font.style) && font.style.match(fontStyleRegex)) {\n                    fontStyle = font.style;\n                }\n                else {\n                    warnings.push(( localizeWithPath(\n                        _moduleId,\n                        6,\n                        'Invalid font style in font \\'{0}\\'. Ignoring setting.',\n                        font.id\n                    )));\n                }\n                const sanitizedSrc = [];\n                if (Array.isArray(font.src)) {\n                    for (const s of font.src) {\n                        if (isString(s.path) && isString(s.format) && s.format.match(fontFormatRegex)) {\n                            const iconFontLocation = joinPath(iconThemeDocumentLocationDirname, s.path);\n                            sanitizedSrc.push({ location: iconFontLocation, format: s.format });\n                        }\n                        else {\n                            warnings.push(( localizeWithPath(\n                                _moduleId,\n                                7,\n                                'Invalid font source in font \\'{0}\\'. Ignoring source.',\n                                font.id\n                            )));\n                        }\n                    }\n                }\n                if (sanitizedSrc.length) {\n                    sanitizedFonts.set(fontId, { weight: fontWeight, style: fontStyle, src: sanitizedSrc });\n                }\n                else {\n                    warnings.push(( localizeWithPath(\n                        _moduleId,\n                        8,\n                        'No valid font source in font \\'{0}\\'. Ignoring font definition.',\n                        font.id\n                    )));\n                }\n            }\n            else {\n                warnings.push(( localizeWithPath(\n                    _moduleId,\n                    9,\n                    'Missing or invalid font id \\'{0}\\'. Skipping font definition.',\n                    font.id\n                )));\n            }\n        }\n        const iconDefinitions = ( (new Map()));\n        const primaryFontId = contentValue.fonts[0].id;\n        for (const iconId in contentValue.iconDefinitions) {\n            const definition = contentValue.iconDefinitions[iconId];\n            if (isString(definition.fontCharacter)) {\n                const fontId = definition.fontId ?? primaryFontId;\n                const fontDefinition = sanitizedFonts.get(fontId);\n                if (fontDefinition) {\n                    const font = { id: `pi-${fontId}`, definition: fontDefinition };\n                    iconDefinitions.set(iconId, { fontCharacter: definition.fontCharacter, font });\n                }\n                else {\n                    warnings.push(( localizeWithPath(_moduleId, 10, 'Skipping icon definition \\'{0}\\'. Unknown font.', iconId)));\n                }\n            }\n            else {\n                warnings.push(( localizeWithPath(\n                    _moduleId,\n                    11,\n                    'Skipping icon definition \\'{0}\\'. Unknown fontCharacter.',\n                    iconId\n                )));\n            }\n        }\n        return { iconDefinitions };\n    });\n}\nconst iconRegistry = getIconRegistry();\nfunction _resolveIconDefinition(iconContribution, iconThemeDocument) {\n    const iconDefinitions = iconThemeDocument.iconDefinitions;\n    let definition = iconDefinitions.get(iconContribution.id);\n    let defaults = iconContribution.defaults;\n    while (!definition && ThemeIcon.isThemeIcon(defaults)) {\n        const ic = iconRegistry.getIcon(defaults.id);\n        if (ic) {\n            definition = iconDefinitions.get(ic.id);\n            defaults = ic.defaults;\n        }\n        else {\n            return undefined;\n        }\n    }\n    if (definition) {\n        return definition;\n    }\n    if (!ThemeIcon.isThemeIcon(defaults)) {\n        return defaults;\n    }\n    return undefined;\n}\n\nexport { DEFAULT_PRODUCT_ICON_THEME_ID, ProductIconThemeData };\n","import { __decorate, __param } from 'vscode/external/tslib/tslib.es6.js';\nimport { localizeWithPath } from 'vscode/vscode/vs/nls';\nimport { isUndefined, isString } from 'vscode/vscode/vs/base/common/types';\nimport { IExtensionService } from 'vscode/vscode/vs/workbench/services/extensions/common/extensions.service';\nimport { VS_HC_LIGHT_THEME, VS_HC_THEME, VS_DARK_THEME, VS_LIGHT_THEME, ThemeSettingDefaults, COLOR_THEME_LIGHT_INITIAL_COLORS, COLOR_THEME_DARK_INITIAL_COLORS, ThemeSettings, ExtensionData } from 'vscode/vscode/vs/workbench/services/themes/common/workbenchThemeService';\nimport 'vscode/vscode/vs/platform/instantiation/common/instantiation';\nimport { IStorageService } from 'vscode/vscode/vs/platform/storage/common/storage.service';\nimport { ITelemetryService } from 'vscode/vscode/vs/platform/telemetry/common/telemetry.service';\nimport { Registry } from 'vscode/vscode/vs/platform/registry/common/platform';\nimport { onUnexpectedError } from 'vscode/vscode/vs/base/common/errors';\nimport { IConfigurationService } from 'vscode/vscode/vs/platform/configuration/common/configuration.service';\nimport { ColorThemeData } from '../common/colorThemeData.js';\nimport { Extensions } from 'vscode/vscode/vs/platform/theme/common/themeService';\nimport { Emitter } from 'vscode/vscode/vs/base/common/event';\nimport { registerFileIconThemeSchemas } from '../common/fileIconThemeSchema.js';\nimport { Disposable, dispose } from 'vscode/vscode/vs/base/common/lifecycle';\nimport { FileIconThemeData, FileIconThemeLoader } from './fileIconThemeData.js';\nimport { createStyleSheet } from 'vscode/vscode/vs/base/browser/dom';\nimport { IBrowserWorkbenchEnvironmentService } from 'vscode/vscode/vs/workbench/services/environment/browser/environmentService.service';\nimport { IFileService } from 'vscode/vscode/vs/platform/files/common/files.service';\nimport { joinPath, isEqual } from 'vscode/vscode/vs/base/common/resources';\nimport { registerColorThemeSchemas } from '../common/colorThemeSchema.js';\nimport { getRemoteAuthority } from 'vscode/vscode/vs/platform/remote/common/remoteHosts';\nimport { IWorkbenchLayoutService } from 'vscode/vscode/vs/workbench/services/layout/browser/layoutService.service';\nimport { IExtensionResourceLoaderService } from 'vscode/vscode/vs/platform/extensionResourceLoader/common/extensionResourceLoader.service';\nimport { registerColorThemeExtensionPoint, registerFileIconThemeExtensionPoint, registerProductIconThemeExtensionPoint, ThemeRegistry } from '../common/themeExtensionPoints.js';\nimport { ThemeConfiguration, updateColorThemeConfigurationSchemas, updateFileIconThemeConfigurationSchemas, updateProductIconThemeConfigurationSchemas } from '../common/themeConfiguration.js';\nimport { ProductIconThemeData, DEFAULT_PRODUCT_ICON_THEME_ID } from './productIconThemeData.js';\nimport { registerProductIconThemeSchemas } from '../common/productIconThemeSchema.js';\nimport { ILogService } from 'vscode/vscode/vs/platform/log/common/log.service';\nimport { isWeb } from 'vscode/vscode/vs/base/common/platform';\nimport { ColorScheme } from 'vscode/vscode/vs/platform/theme/common/theme';\nimport { IHostColorSchemeService } from 'vscode/vscode/vs/workbench/services/themes/common/hostColorSchemeService.service';\nimport { Sequencer, RunOnceScheduler } from 'vscode/vscode/vs/base/common/async';\nimport { IUserDataInitializationService } from 'vscode/vscode/vs/workbench/services/userData/browser/userDataInit.service';\nimport { getIconsStyleSheet } from 'vscode/vscode/vs/platform/theme/browser/iconsStyleSheet';\nimport { getColorRegistry, asCssVariableName } from 'vscode/vscode/vs/platform/theme/common/colorUtils';\nimport 'vscode/vscode/vs/platform/theme/common/colors/baseColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/chartsColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/editorColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/inputColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/listColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/menuColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/minimapColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/miscColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/quickpickColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/searchColors';\nimport { ILanguageService } from 'vscode/vscode/vs/editor/common/languages/language';\nimport { mainWindow } from 'vscode/vscode/vs/base/browser/window';\n\nconst _moduleId = \"vs/workbench/services/themes/browser/workbenchThemeService\";\nconst defaultThemeExtensionId = 'vscode-theme-defaults';\nconst DEFAULT_FILE_ICON_THEME_ID = 'vscode.vscode-theme-seti-vs-seti';\nconst fileIconsEnabledClass = 'file-icons-enabled';\nconst colorThemeRulesClassName = 'contributedColorTheme';\nconst fileIconThemeRulesClassName = 'contributedFileIconTheme';\nconst productIconThemeRulesClassName = 'contributedProductIconTheme';\nconst themingRegistry = ( Registry.as(Extensions.ThemingContribution));\nfunction validateThemeId(theme) {\n    switch (theme) {\n        case VS_LIGHT_THEME: return `vs ${defaultThemeExtensionId}-themes-light_vs-json`;\n        case VS_DARK_THEME: return `vs-dark ${defaultThemeExtensionId}-themes-dark_vs-json`;\n        case VS_HC_THEME: return `hc-black ${defaultThemeExtensionId}-themes-hc_black-json`;\n        case VS_HC_LIGHT_THEME: return `hc-light ${defaultThemeExtensionId}-themes-hc_light-json`;\n    }\n    return theme;\n}\nconst colorThemesExtPoint = registerColorThemeExtensionPoint();\nconst fileIconThemesExtPoint = registerFileIconThemeExtensionPoint();\nconst productIconThemesExtPoint = registerProductIconThemeExtensionPoint();\nlet WorkbenchThemeService = class WorkbenchThemeService extends Disposable {\n    constructor(extensionService, storageService, configurationService, telemetryService, environmentService, fileService, extensionResourceLoaderService, layoutService, logService, hostColorService, userDataInitializationService, languageService) {\n        super();\n        this.storageService = storageService;\n        this.configurationService = configurationService;\n        this.telemetryService = telemetryService;\n        this.environmentService = environmentService;\n        this.extensionResourceLoaderService = extensionResourceLoaderService;\n        this.logService = logService;\n        this.hostColorService = hostColorService;\n        this.userDataInitializationService = userDataInitializationService;\n        this.languageService = languageService;\n        this.hasDefaultUpdated = false;\n        this.themeExtensionsActivated = ( new Map());\n        this.container = layoutService.mainContainer;\n        this.settings = ( new ThemeConfiguration(configurationService, hostColorService));\n        this.colorThemeRegistry = this._register(( new ThemeRegistry(colorThemesExtPoint, ColorThemeData.fromExtensionTheme)));\n        this.colorThemeWatcher = this._register(( new ThemeFileWatcher(fileService, environmentService, this.reloadCurrentColorTheme.bind(this))));\n        this.onColorThemeChange = ( new Emitter({ leakWarningThreshold: 400 }));\n        this.currentColorTheme = ColorThemeData.createUnloadedTheme('');\n        this.colorThemeSequencer = ( new Sequencer());\n        this.fileIconThemeWatcher = this._register(( new ThemeFileWatcher(\n            fileService,\n            environmentService,\n            this.reloadCurrentFileIconTheme.bind(this)\n        )));\n        this.fileIconThemeRegistry = this._register(( new ThemeRegistry(\n            fileIconThemesExtPoint,\n            FileIconThemeData.fromExtensionTheme,\n            true,\n            FileIconThemeData.noIconTheme\n        )));\n        this.fileIconThemeLoader = ( new FileIconThemeLoader(extensionResourceLoaderService, languageService));\n        this.onFileIconThemeChange = ( new Emitter({ leakWarningThreshold: 400 }));\n        this.currentFileIconTheme = FileIconThemeData.createUnloadedTheme('');\n        this.fileIconThemeSequencer = ( new Sequencer());\n        this.productIconThemeWatcher = this._register(( new ThemeFileWatcher(\n            fileService,\n            environmentService,\n            this.reloadCurrentProductIconTheme.bind(this)\n        )));\n        this.productIconThemeRegistry = this._register(( new ThemeRegistry(\n            productIconThemesExtPoint,\n            ProductIconThemeData.fromExtensionTheme,\n            true,\n            ProductIconThemeData.defaultTheme\n        )));\n        this.onProductIconThemeChange = ( new Emitter());\n        this.currentProductIconTheme = ProductIconThemeData.createUnloadedTheme('');\n        this.productIconThemeSequencer = ( new Sequencer());\n        let themeData = ColorThemeData.fromStorageData(this.storageService);\n        const colorThemeSetting = this.settings.colorTheme;\n        if (themeData && colorThemeSetting !== themeData.settingsId && this.settings.isDefaultColorTheme()) {\n            this.hasDefaultUpdated = themeData.settingsId === ThemeSettingDefaults.COLOR_THEME_DARK_OLD || themeData.settingsId === ThemeSettingDefaults.COLOR_THEME_LIGHT_OLD;\n            themeData = undefined;\n        }\n        const defaultColorMap = colorThemeSetting === ThemeSettingDefaults.COLOR_THEME_LIGHT ? COLOR_THEME_LIGHT_INITIAL_COLORS : colorThemeSetting === ThemeSettingDefaults.COLOR_THEME_DARK ? COLOR_THEME_DARK_INITIAL_COLORS : undefined;\n        if (!themeData) {\n            const initialColorTheme = environmentService.options?.initialColorTheme;\n            if (initialColorTheme) {\n                themeData = ColorThemeData.createUnloadedThemeForThemeType(initialColorTheme.themeType, initialColorTheme.colors ?? defaultColorMap);\n            }\n        }\n        if (!themeData) {\n            themeData = ColorThemeData.createUnloadedThemeForThemeType(isWeb ? ColorScheme.LIGHT : ColorScheme.DARK, defaultColorMap);\n        }\n        themeData.setCustomizations(this.settings);\n        this.applyTheme(themeData, undefined, true);\n        const fileIconData = FileIconThemeData.fromStorageData(this.storageService);\n        if (fileIconData) {\n            this.applyAndSetFileIconTheme(fileIconData, true);\n        }\n        const productIconData = ProductIconThemeData.fromStorageData(this.storageService);\n        if (productIconData) {\n            this.applyAndSetProductIconTheme(productIconData, true);\n        }\n        extensionService.whenInstalledExtensionsRegistered().then(_ => {\n            this.installConfigurationListener();\n            this.installPreferredSchemeListener();\n            this.installRegistryListeners();\n            this.initialize().catch(onUnexpectedError);\n        });\n        const codiconStyleSheet = createStyleSheet();\n        codiconStyleSheet.id = 'codiconStyles';\n        const iconsStyleSheet = this._register(getIconsStyleSheet(this));\n        function updateAll() {\n            codiconStyleSheet.textContent = iconsStyleSheet.getCSS();\n        }\n        const delayer = this._register(( new RunOnceScheduler(updateAll, 0)));\n        this._register(iconsStyleSheet.onDidChange(() => delayer.schedule()));\n        delayer.schedule();\n    }\n    initialize() {\n        const extDevLocs = this.environmentService.extensionDevelopmentLocationURI;\n        const extDevLoc = extDevLocs && extDevLocs.length === 1 ? extDevLocs[0] : undefined;\n        const initializeColorTheme = async () => {\n            const devThemes = this.colorThemeRegistry.findThemeByExtensionLocation(extDevLoc);\n            if (devThemes.length) {\n                const matchedColorTheme = devThemes.find(theme => theme.type === this.currentColorTheme.type);\n                return this.setColorTheme(matchedColorTheme ? matchedColorTheme.id : devThemes[0].id, undefined);\n            }\n            let theme = this.colorThemeRegistry.findThemeBySettingsId(this.settings.colorTheme, undefined);\n            if (!theme) {\n                await this.userDataInitializationService.whenInitializationFinished();\n                const fallbackTheme = this.currentColorTheme.type === ColorScheme.LIGHT ? ThemeSettingDefaults.COLOR_THEME_LIGHT : ThemeSettingDefaults.COLOR_THEME_DARK;\n                theme = this.colorThemeRegistry.findThemeBySettingsId(this.settings.colorTheme, fallbackTheme);\n            }\n            return this.setColorTheme(theme && theme.id, undefined);\n        };\n        const initializeFileIconTheme = async () => {\n            const devThemes = this.fileIconThemeRegistry.findThemeByExtensionLocation(extDevLoc);\n            if (devThemes.length) {\n                return this.setFileIconTheme(devThemes[0].id, 8 );\n            }\n            let theme = this.fileIconThemeRegistry.findThemeBySettingsId(this.settings.fileIconTheme);\n            if (!theme) {\n                await this.userDataInitializationService.whenInitializationFinished();\n                theme = this.fileIconThemeRegistry.findThemeBySettingsId(this.settings.fileIconTheme);\n            }\n            return this.setFileIconTheme(theme ? theme.id : DEFAULT_FILE_ICON_THEME_ID, undefined);\n        };\n        const initializeProductIconTheme = async () => {\n            const devThemes = this.productIconThemeRegistry.findThemeByExtensionLocation(extDevLoc);\n            if (devThemes.length) {\n                return this.setProductIconTheme(devThemes[0].id, 8 );\n            }\n            let theme = this.productIconThemeRegistry.findThemeBySettingsId(this.settings.productIconTheme);\n            if (!theme) {\n                await this.userDataInitializationService.whenInitializationFinished();\n                theme = this.productIconThemeRegistry.findThemeBySettingsId(this.settings.productIconTheme);\n            }\n            return this.setProductIconTheme(theme ? theme.id : DEFAULT_PRODUCT_ICON_THEME_ID, undefined);\n        };\n        return Promise.all([initializeColorTheme(), initializeFileIconTheme(), initializeProductIconTheme()]);\n    }\n    installConfigurationListener() {\n        this._register(this.configurationService.onDidChangeConfiguration(e => {\n            if (e.affectsConfiguration(ThemeSettings.COLOR_THEME)\n                || e.affectsConfiguration(ThemeSettings.PREFERRED_DARK_THEME)\n                || e.affectsConfiguration(ThemeSettings.PREFERRED_LIGHT_THEME)\n                || e.affectsConfiguration(ThemeSettings.PREFERRED_HC_DARK_THEME)\n                || e.affectsConfiguration(ThemeSettings.PREFERRED_HC_LIGHT_THEME)\n                || e.affectsConfiguration(ThemeSettings.DETECT_COLOR_SCHEME)\n                || e.affectsConfiguration(ThemeSettings.DETECT_HC)\n                || e.affectsConfiguration(ThemeSettings.SYSTEM_COLOR_THEME)) {\n                this.restoreColorTheme();\n            }\n            if (e.affectsConfiguration(ThemeSettings.FILE_ICON_THEME)) {\n                this.restoreFileIconTheme();\n            }\n            if (e.affectsConfiguration(ThemeSettings.PRODUCT_ICON_THEME)) {\n                this.restoreProductIconTheme();\n            }\n            if (this.currentColorTheme) {\n                let hasColorChanges = false;\n                if (e.affectsConfiguration(ThemeSettings.COLOR_CUSTOMIZATIONS)) {\n                    this.currentColorTheme.setCustomColors(this.settings.colorCustomizations);\n                    hasColorChanges = true;\n                }\n                if (e.affectsConfiguration(ThemeSettings.TOKEN_COLOR_CUSTOMIZATIONS)) {\n                    this.currentColorTheme.setCustomTokenColors(this.settings.tokenColorCustomizations);\n                    hasColorChanges = true;\n                }\n                if (e.affectsConfiguration(ThemeSettings.SEMANTIC_TOKEN_COLOR_CUSTOMIZATIONS)) {\n                    this.currentColorTheme.setCustomSemanticTokenColors(this.settings.semanticTokenColorCustomizations);\n                    hasColorChanges = true;\n                }\n                if (hasColorChanges) {\n                    this.updateDynamicCSSRules(this.currentColorTheme);\n                    this.onColorThemeChange.fire(this.currentColorTheme);\n                }\n            }\n        }));\n    }\n    installRegistryListeners() {\n        let prevColorId = undefined;\n        this._register(this.colorThemeRegistry.onDidChange(async (event) => {\n            updateColorThemeConfigurationSchemas(event.themes);\n            if (await this.restoreColorTheme()) {\n                if (this.currentColorTheme.settingsId === ThemeSettingDefaults.COLOR_THEME_DARK && !isUndefined(prevColorId) && (await this.colorThemeRegistry.findThemeById(prevColorId))) {\n                    await this.setColorTheme(prevColorId, 'auto');\n                    prevColorId = undefined;\n                }\n                else if (( event.added.some(t => t.settingsId === this.currentColorTheme.settingsId))) {\n                    await this.reloadCurrentColorTheme();\n                }\n            }\n            else if (( event.removed.some(t => t.settingsId === this.currentColorTheme.settingsId))) {\n                prevColorId = this.currentColorTheme.id;\n                const defaultTheme = this.colorThemeRegistry.findThemeBySettingsId(ThemeSettingDefaults.COLOR_THEME_DARK);\n                await this.setColorTheme(defaultTheme, 'auto');\n            }\n        }));\n        let prevFileIconId = undefined;\n        this._register(this._register(this.fileIconThemeRegistry.onDidChange(async (event) => {\n            updateFileIconThemeConfigurationSchemas(event.themes);\n            if (await this.restoreFileIconTheme()) {\n                if (this.currentFileIconTheme.id === DEFAULT_FILE_ICON_THEME_ID && !isUndefined(prevFileIconId) && this.fileIconThemeRegistry.findThemeById(prevFileIconId)) {\n                    await this.setFileIconTheme(prevFileIconId, 'auto');\n                    prevFileIconId = undefined;\n                }\n                else if (( event.added.some(t => t.settingsId === this.currentFileIconTheme.settingsId))) {\n                    await this.reloadCurrentFileIconTheme();\n                }\n            }\n            else if (( event.removed.some(t => t.settingsId === this.currentFileIconTheme.settingsId))) {\n                prevFileIconId = this.currentFileIconTheme.id;\n                await this.setFileIconTheme(DEFAULT_FILE_ICON_THEME_ID, 'auto');\n            }\n        })));\n        let prevProductIconId = undefined;\n        this._register(this.productIconThemeRegistry.onDidChange(async (event) => {\n            updateProductIconThemeConfigurationSchemas(event.themes);\n            if (await this.restoreProductIconTheme()) {\n                if (this.currentProductIconTheme.id === DEFAULT_PRODUCT_ICON_THEME_ID && !isUndefined(prevProductIconId) && this.productIconThemeRegistry.findThemeById(prevProductIconId)) {\n                    await this.setProductIconTheme(prevProductIconId, 'auto');\n                    prevProductIconId = undefined;\n                }\n                else if (( event.added.some(t => t.settingsId === this.currentProductIconTheme.settingsId))) {\n                    await this.reloadCurrentProductIconTheme();\n                }\n            }\n            else if (( event.removed.some(t => t.settingsId === this.currentProductIconTheme.settingsId))) {\n                prevProductIconId = this.currentProductIconTheme.id;\n                await this.setProductIconTheme(DEFAULT_PRODUCT_ICON_THEME_ID, 'auto');\n            }\n        }));\n        this._register(this.languageService.onDidChange(() => this.reloadCurrentFileIconTheme()));\n        return Promise.all([this.getColorThemes(), this.getFileIconThemes(), this.getProductIconThemes()]).then(([ct, fit, pit]) => {\n            updateColorThemeConfigurationSchemas(ct);\n            updateFileIconThemeConfigurationSchemas(fit);\n            updateProductIconThemeConfigurationSchemas(pit);\n        });\n    }\n    installPreferredSchemeListener() {\n        this._register(this.hostColorService.onDidChangeColorScheme(() => this.restoreColorTheme()));\n    }\n    hasUpdatedDefaultThemes() {\n        return this.hasDefaultUpdated;\n    }\n    getColorTheme() {\n        return this.currentColorTheme;\n    }\n    async getColorThemes() {\n        return this.colorThemeRegistry.getThemes();\n    }\n    getPreferredColorScheme() {\n        return this.settings.getPreferredColorScheme();\n    }\n    async getMarketplaceColorThemes(publisher, name, version) {\n        const extensionLocation = this.extensionResourceLoaderService.getExtensionGalleryResourceURL({ publisher, name, version }, 'extension');\n        if (extensionLocation) {\n            try {\n                const manifestContent = await this.extensionResourceLoaderService.readExtensionResource(joinPath(extensionLocation, 'package.json'));\n                return this.colorThemeRegistry.getMarketplaceThemes(JSON.parse(manifestContent), extensionLocation, ExtensionData.fromName(publisher, name));\n            }\n            catch (e) {\n                this.logService.error('Problem loading themes from marketplace', e);\n            }\n        }\n        return [];\n    }\n    get onDidColorThemeChange() {\n        return this.onColorThemeChange.event;\n    }\n    setColorTheme(themeIdOrTheme, settingsTarget) {\n        return this.colorThemeSequencer.queue(async () => {\n            return this.internalSetColorTheme(themeIdOrTheme, settingsTarget);\n        });\n    }\n    async internalSetColorTheme(themeIdOrTheme, settingsTarget) {\n        if (!themeIdOrTheme) {\n            return null;\n        }\n        const themeId = isString(themeIdOrTheme) ? validateThemeId(themeIdOrTheme) : themeIdOrTheme.id;\n        if (this.currentColorTheme.isLoaded && themeId === this.currentColorTheme.id) {\n            if (settingsTarget !== 'preview') {\n                this.currentColorTheme.toStorage(this.storageService);\n            }\n            return this.settings.setColorTheme(this.currentColorTheme, settingsTarget);\n        }\n        let themeData = this.colorThemeRegistry.findThemeById(themeId);\n        if (!themeData) {\n            if (themeIdOrTheme instanceof ColorThemeData) {\n                themeData = themeIdOrTheme;\n            }\n            else {\n                return null;\n            }\n        }\n        try {\n            await themeData.ensureLoaded(this.extensionResourceLoaderService);\n            themeData.setCustomizations(this.settings);\n            return this.applyTheme(themeData, settingsTarget);\n        }\n        catch (error) {\n            throw ( new Error(localizeWithPath(\n                _moduleId,\n                0,\n                \"Unable to load {0}: {1}\",\n                themeData.location?.toString(),\n                error.message\n            )));\n        }\n    }\n    reloadCurrentColorTheme() {\n        return this.colorThemeSequencer.queue(async () => {\n            try {\n                const theme = this.colorThemeRegistry.findThemeBySettingsId(this.currentColorTheme.settingsId) || this.currentColorTheme;\n                await theme.reload(this.extensionResourceLoaderService);\n                theme.setCustomizations(this.settings);\n                await this.applyTheme(theme, undefined, false);\n            }\n            catch (error) {\n                this.logService.info('Unable to reload {0}: {1}', this.currentColorTheme.location?.toString());\n            }\n        });\n    }\n    async restoreColorTheme() {\n        return this.colorThemeSequencer.queue(async () => {\n            const settingId = this.settings.colorTheme;\n            const theme = this.colorThemeRegistry.findThemeBySettingsId(settingId);\n            if (theme) {\n                if (settingId !== this.currentColorTheme.settingsId) {\n                    await this.internalSetColorTheme(theme.id, undefined);\n                }\n                else if (theme !== this.currentColorTheme) {\n                    await theme.ensureLoaded(this.extensionResourceLoaderService);\n                    theme.setCustomizations(this.settings);\n                    await this.applyTheme(theme, undefined, true);\n                }\n                return true;\n            }\n            return false;\n        });\n    }\n    updateDynamicCSSRules(themeData) {\n        const cssRules = ( new Set());\n        const ruleCollector = {\n            addRule: (rule) => {\n                if (!( cssRules.has(rule))) {\n                    cssRules.add(rule);\n                }\n            }\n        };\n        ruleCollector.addRule(`.monaco-workbench { forced-color-adjust: none; }`);\n        themingRegistry.getThemingParticipants().forEach(p => p(themeData, ruleCollector, this.environmentService));\n        const colorVariables = [];\n        for (const item of getColorRegistry().getColors()) {\n            const color = themeData.getColor(item.id, true);\n            if (color) {\n                colorVariables.push(`${asCssVariableName(item.id)}: ${( color.toString())};`);\n            }\n        }\n        ruleCollector.addRule(`.monaco-workbench { ${colorVariables.join('\\n')} }`);\n        _applyRules([...cssRules].join('\\n'), colorThemeRulesClassName);\n    }\n    applyTheme(newTheme, settingsTarget, silent = false) {\n        this.updateDynamicCSSRules(newTheme);\n        if (this.currentColorTheme.id) {\n            this.container.classList.remove(...this.currentColorTheme.classNames);\n        }\n        else {\n            this.container.classList.remove(VS_DARK_THEME, VS_LIGHT_THEME, VS_HC_THEME, VS_HC_LIGHT_THEME);\n        }\n        this.container.classList.add(...newTheme.classNames);\n        this.currentColorTheme.clearCaches();\n        this.currentColorTheme = newTheme;\n        if (!this.colorThemingParticipantChangeListener) {\n            this.colorThemingParticipantChangeListener = themingRegistry.onThemingParticipantAdded(_ => this.updateDynamicCSSRules(this.currentColorTheme));\n        }\n        this.colorThemeWatcher.update(newTheme);\n        this.sendTelemetry(newTheme.id, newTheme.extensionData, 'color');\n        if (silent) {\n            return Promise.resolve(null);\n        }\n        this.onColorThemeChange.fire(this.currentColorTheme);\n        if (newTheme.isLoaded && settingsTarget !== 'preview') {\n            newTheme.toStorage(this.storageService);\n        }\n        return this.settings.setColorTheme(this.currentColorTheme, settingsTarget);\n    }\n    sendTelemetry(themeId, themeData, themeType) {\n        if (themeData) {\n            const key = themeType + themeData.extensionId;\n            if (!this.themeExtensionsActivated.get(key)) {\n                this.telemetryService.publicLog2('activatePlugin', {\n                    id: themeData.extensionId,\n                    name: themeData.extensionName,\n                    isBuiltin: themeData.extensionIsBuiltin,\n                    publisherDisplayName: themeData.extensionPublisher,\n                    themeId: themeId\n                });\n                this.themeExtensionsActivated.set(key, true);\n            }\n        }\n    }\n    async getFileIconThemes() {\n        return this.fileIconThemeRegistry.getThemes();\n    }\n    getFileIconTheme() {\n        return this.currentFileIconTheme;\n    }\n    get onDidFileIconThemeChange() {\n        return this.onFileIconThemeChange.event;\n    }\n    async setFileIconTheme(iconThemeOrId, settingsTarget) {\n        return this.fileIconThemeSequencer.queue(async () => {\n            return this.internalSetFileIconTheme(iconThemeOrId, settingsTarget);\n        });\n    }\n    async internalSetFileIconTheme(iconThemeOrId, settingsTarget) {\n        if (iconThemeOrId === undefined) {\n            iconThemeOrId = '';\n        }\n        const themeId = isString(iconThemeOrId) ? iconThemeOrId : iconThemeOrId.id;\n        if (themeId !== this.currentFileIconTheme.id || !this.currentFileIconTheme.isLoaded) {\n            let newThemeData = this.fileIconThemeRegistry.findThemeById(themeId);\n            if (!newThemeData && iconThemeOrId instanceof FileIconThemeData) {\n                newThemeData = iconThemeOrId;\n            }\n            if (!newThemeData) {\n                newThemeData = FileIconThemeData.noIconTheme;\n            }\n            await newThemeData.ensureLoaded(this.fileIconThemeLoader);\n            this.applyAndSetFileIconTheme(newThemeData);\n        }\n        const themeData = this.currentFileIconTheme;\n        if (themeData.isLoaded && settingsTarget !== 'preview' && (!themeData.location || !getRemoteAuthority(themeData.location))) {\n            themeData.toStorage(this.storageService);\n        }\n        await this.settings.setFileIconTheme(this.currentFileIconTheme, settingsTarget);\n        return themeData;\n    }\n    async getMarketplaceFileIconThemes(publisher, name, version) {\n        const extensionLocation = this.extensionResourceLoaderService.getExtensionGalleryResourceURL({ publisher, name, version }, 'extension');\n        if (extensionLocation) {\n            try {\n                const manifestContent = await this.extensionResourceLoaderService.readExtensionResource(joinPath(extensionLocation, 'package.json'));\n                return this.fileIconThemeRegistry.getMarketplaceThemes(JSON.parse(manifestContent), extensionLocation, ExtensionData.fromName(publisher, name));\n            }\n            catch (e) {\n                this.logService.error('Problem loading themes from marketplace', e);\n            }\n        }\n        return [];\n    }\n    async reloadCurrentFileIconTheme() {\n        return this.fileIconThemeSequencer.queue(async () => {\n            await this.currentFileIconTheme.reload(this.fileIconThemeLoader);\n            this.applyAndSetFileIconTheme(this.currentFileIconTheme);\n        });\n    }\n    async restoreFileIconTheme() {\n        return this.fileIconThemeSequencer.queue(async () => {\n            const settingId = this.settings.fileIconTheme;\n            const theme = this.fileIconThemeRegistry.findThemeBySettingsId(settingId);\n            if (theme) {\n                if (settingId !== this.currentFileIconTheme.settingsId) {\n                    await this.internalSetFileIconTheme(theme.id, undefined);\n                }\n                else if (theme !== this.currentFileIconTheme) {\n                    await theme.ensureLoaded(this.fileIconThemeLoader);\n                    this.applyAndSetFileIconTheme(theme, true);\n                }\n                return true;\n            }\n            return false;\n        });\n    }\n    applyAndSetFileIconTheme(iconThemeData, silent = false) {\n        this.currentFileIconTheme = iconThemeData;\n        _applyRules(iconThemeData.styleSheetContent, fileIconThemeRulesClassName);\n        if (iconThemeData.id) {\n            this.container.classList.add(fileIconsEnabledClass);\n        }\n        else {\n            this.container.classList.remove(fileIconsEnabledClass);\n        }\n        this.fileIconThemeWatcher.update(iconThemeData);\n        if (iconThemeData.id) {\n            this.sendTelemetry(iconThemeData.id, iconThemeData.extensionData, 'fileIcon');\n        }\n        if (!silent) {\n            this.onFileIconThemeChange.fire(this.currentFileIconTheme);\n        }\n    }\n    async getProductIconThemes() {\n        return this.productIconThemeRegistry.getThemes();\n    }\n    getProductIconTheme() {\n        return this.currentProductIconTheme;\n    }\n    get onDidProductIconThemeChange() {\n        return this.onProductIconThemeChange.event;\n    }\n    async setProductIconTheme(iconThemeOrId, settingsTarget) {\n        return this.productIconThemeSequencer.queue(async () => {\n            return this.internalSetProductIconTheme(iconThemeOrId, settingsTarget);\n        });\n    }\n    async internalSetProductIconTheme(iconThemeOrId, settingsTarget) {\n        if (iconThemeOrId === undefined) {\n            iconThemeOrId = '';\n        }\n        const themeId = isString(iconThemeOrId) ? iconThemeOrId : iconThemeOrId.id;\n        if (themeId !== this.currentProductIconTheme.id || !this.currentProductIconTheme.isLoaded) {\n            let newThemeData = this.productIconThemeRegistry.findThemeById(themeId);\n            if (!newThemeData && iconThemeOrId instanceof ProductIconThemeData) {\n                newThemeData = iconThemeOrId;\n            }\n            if (!newThemeData) {\n                newThemeData = ProductIconThemeData.defaultTheme;\n            }\n            await newThemeData.ensureLoaded(this.extensionResourceLoaderService, this.logService);\n            this.applyAndSetProductIconTheme(newThemeData);\n        }\n        const themeData = this.currentProductIconTheme;\n        if (themeData.isLoaded && settingsTarget !== 'preview' && (!themeData.location || !getRemoteAuthority(themeData.location))) {\n            themeData.toStorage(this.storageService);\n        }\n        await this.settings.setProductIconTheme(this.currentProductIconTheme, settingsTarget);\n        return themeData;\n    }\n    async getMarketplaceProductIconThemes(publisher, name, version) {\n        const extensionLocation = this.extensionResourceLoaderService.getExtensionGalleryResourceURL({ publisher, name, version }, 'extension');\n        if (extensionLocation) {\n            try {\n                const manifestContent = await this.extensionResourceLoaderService.readExtensionResource(joinPath(extensionLocation, 'package.json'));\n                return this.productIconThemeRegistry.getMarketplaceThemes(JSON.parse(manifestContent), extensionLocation, ExtensionData.fromName(publisher, name));\n            }\n            catch (e) {\n                this.logService.error('Problem loading themes from marketplace', e);\n            }\n        }\n        return [];\n    }\n    async reloadCurrentProductIconTheme() {\n        return this.productIconThemeSequencer.queue(async () => {\n            await this.currentProductIconTheme.reload(this.extensionResourceLoaderService, this.logService);\n            this.applyAndSetProductIconTheme(this.currentProductIconTheme);\n        });\n    }\n    async restoreProductIconTheme() {\n        return this.productIconThemeSequencer.queue(async () => {\n            const settingId = this.settings.productIconTheme;\n            const theme = this.productIconThemeRegistry.findThemeBySettingsId(settingId);\n            if (theme) {\n                if (settingId !== this.currentProductIconTheme.settingsId) {\n                    await this.internalSetProductIconTheme(theme.id, undefined);\n                }\n                else if (theme !== this.currentProductIconTheme) {\n                    await theme.ensureLoaded(this.extensionResourceLoaderService, this.logService);\n                    this.applyAndSetProductIconTheme(theme, true);\n                }\n                return true;\n            }\n            return false;\n        });\n    }\n    applyAndSetProductIconTheme(iconThemeData, silent = false) {\n        this.currentProductIconTheme = iconThemeData;\n        _applyRules(iconThemeData.styleSheetContent, productIconThemeRulesClassName);\n        this.productIconThemeWatcher.update(iconThemeData);\n        if (iconThemeData.id) {\n            this.sendTelemetry(iconThemeData.id, iconThemeData.extensionData, 'productIcon');\n        }\n        if (!silent) {\n            this.onProductIconThemeChange.fire(this.currentProductIconTheme);\n        }\n    }\n};\nWorkbenchThemeService = ( __decorate([\n    ( __param(0, IExtensionService)),\n    ( __param(1, IStorageService)),\n    ( __param(2, IConfigurationService)),\n    ( __param(3, ITelemetryService)),\n    ( __param(4, IBrowserWorkbenchEnvironmentService)),\n    ( __param(5, IFileService)),\n    ( __param(6, IExtensionResourceLoaderService)),\n    ( __param(7, IWorkbenchLayoutService)),\n    ( __param(8, ILogService)),\n    ( __param(9, IHostColorSchemeService)),\n    ( __param(10, IUserDataInitializationService)),\n    ( __param(11, ILanguageService))\n], WorkbenchThemeService));\nclass ThemeFileWatcher {\n    constructor(fileService, environmentService, onUpdate) {\n        this.fileService = fileService;\n        this.environmentService = environmentService;\n        this.onUpdate = onUpdate;\n    }\n    update(theme) {\n        if (!isEqual(theme.location, this.watchedLocation)) {\n            this.dispose();\n            if (theme.location && (theme.watch || this.environmentService.isExtensionDevelopment)) {\n                this.watchedLocation = theme.location;\n                this.watcherDisposable = this.fileService.watch(theme.location);\n                this.fileService.onDidFilesChange(e => {\n                    if (this.watchedLocation && e.contains(this.watchedLocation, 0 )) {\n                        this.onUpdate();\n                    }\n                });\n            }\n        }\n    }\n    dispose() {\n        this.watcherDisposable = dispose(this.watcherDisposable);\n        this.fileChangeListener = dispose(this.fileChangeListener);\n        this.watchedLocation = undefined;\n    }\n}\nfunction _applyRules(styleSheetContent, rulesClassName) {\n    const themeStyles = mainWindow.document.head.getElementsByClassName(rulesClassName);\n    if (themeStyles.length === 0) {\n        const elStyle = createStyleSheet();\n        elStyle.className = rulesClassName;\n        elStyle.textContent = styleSheetContent;\n    }\n    else {\n        themeStyles[0].textContent = styleSheetContent;\n    }\n}\nregisterColorThemeSchemas();\nregisterFileIconThemeSchemas();\nregisterProductIconThemeSchemas();\n\nexport { WorkbenchThemeService };\n","import { __decorate, __param } from 'vscode/external/tslib/tslib.es6.js';\nimport { localizeWithPath, localize2WithPath } from 'vscode/vscode/vs/nls';\nimport { KeyChord } from 'vscode/vscode/vs/base/common/keyCodes';\nimport { registerAction2, Action2, MenuId, MenuRegistry } from 'vscode/vscode/vs/platform/actions/common/actions';\nimport { equalsIgnoreCase } from 'vscode/vscode/vs/base/common/strings';\nimport { Registry } from 'vscode/vscode/vs/platform/registry/common/platform';\nimport { Categories } from 'vscode/vscode/vs/platform/action/common/actionCommonCategories';\nimport { ThemeSettings, ThemeSettingDefaults } from 'vscode/vscode/vs/workbench/services/themes/common/workbenchThemeService';\nimport { IWorkbenchThemeService } from 'vscode/vscode/vs/workbench/services/themes/common/workbenchThemeService.service';\nimport { VIEWLET_ID } from 'vscode/vscode/vs/workbench/contrib/extensions/common/extensions';\nimport { IExtensionGalleryService, IExtensionManagementService } from 'vscode/vscode/vs/platform/extensionManagement/common/extensionManagement.service';\nimport { Extensions } from 'vscode/vscode/vs/platform/theme/common/colorUtils';\nimport 'vscode/vscode/vs/platform/theme/common/colors/baseColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/chartsColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/editorColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/inputColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/listColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/menuColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/minimapColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/miscColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/quickpickColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/searchColors';\nimport { IEditorService } from 'vscode/vscode/vs/workbench/services/editor/common/editorService.service';\nimport { Color } from 'vscode/vscode/vs/base/common/color';\nimport { ColorScheme, isHighContrast } from 'vscode/vscode/vs/platform/theme/common/theme';\nimport { colorThemeSchemaId } from '../../../services/themes/common/colorThemeSchema.js';\nimport { isCancellationError, onUnexpectedError } from 'vscode/vscode/vs/base/common/errors';\nimport { IQuickInputService } from 'vscode/vscode/vs/platform/quickinput/common/quickInput.service';\nimport { DEFAULT_PRODUCT_ICON_THEME_ID, ProductIconThemeData } from '../../../services/themes/browser/productIconThemeData.js';\nimport { IPaneCompositePartService } from 'vscode/vscode/vs/workbench/services/panecomposite/browser/panecomposite.service';\nimport { ThrottledDelayer } from 'vscode/vscode/vs/base/common/async';\nimport { CancellationTokenSource } from 'vscode/vscode/vs/base/common/cancellation';\nimport { ILogService } from 'vscode/vscode/vs/platform/log/common/log.service';\nimport { IProgressService } from 'vscode/vscode/vs/platform/progress/common/progress.service';\nimport { Codicon } from 'vscode/vscode/vs/base/common/codicons';\nimport { registerIcon } from 'vscode/vscode/vs/platform/theme/common/iconRegistry';\nimport { ThemeIcon } from 'vscode/vscode/vs/base/common/themables';\nimport { Emitter } from 'vscode/vscode/vs/base/common/event';\nimport { IExtensionResourceLoaderService } from 'vscode/vscode/vs/platform/extensionResourceLoader/common/extensionResourceLoader.service';\nimport { IInstantiationService } from 'vscode/vscode/vs/platform/instantiation/common/instantiation';\nimport { CommandsRegistry } from 'vscode/vscode/vs/platform/commands/common/commands';\nimport { ICommandService } from 'vscode/vscode/vs/platform/commands/common/commands.service';\nimport { FileIconThemeData } from '../../../services/themes/browser/fileIconThemeData.js';\nimport { IConfigurationService } from 'vscode/vscode/vs/platform/configuration/common/configuration.service';\nimport { IDialogService } from 'vscode/vscode/vs/platform/dialogs/common/dialogs.service';\nimport { Extensions as Extensions$1 } from 'vscode/vscode/vs/workbench/common/contributions';\nimport 'vscode/vscode/vs/platform/notification/common/notification';\nimport { INotificationService } from 'vscode/vscode/vs/platform/notification/common/notification.service';\nimport { IStorageService } from 'vscode/vscode/vs/platform/storage/common/storage.service';\nimport { isWeb } from 'vscode/vscode/vs/base/common/platform';\nimport { ITelemetryService } from 'vscode/vscode/vs/platform/telemetry/common/telemetry.service';\nimport { IHostService } from 'vscode/vscode/vs/workbench/services/host/browser/host.service';\nimport { mainWindow } from 'vscode/vscode/vs/base/browser/window';\nimport { IPreferencesService } from 'vscode/vscode/vs/workbench/services/preferences/common/preferences.service';\nimport { Toggle } from 'vscode/vscode/vs/base/browser/ui/toggle/toggle';\nimport { defaultToggleStyles } from 'vscode/vscode/vs/platform/theme/browser/defaultStyles';\nimport { DisposableStore } from 'vscode/vscode/vs/base/common/lifecycle';\nimport Severity$1 from 'vscode/vscode/vs/base/common/severity';\n\nvar DefaultThemeUpdatedNotificationContribution_1;\nconst _moduleId = \"vs/workbench/contrib/themes/browser/themes.contribution\";\nconst manageExtensionIcon = registerIcon('theme-selection-manage-extension', Codicon.gear, ( localizeWithPath(\n    _moduleId,\n    0,\n    'Icon for the \\'Manage\\' action in the theme selection quick pick.'\n)));\nvar ConfigureItem;\n( ((function(ConfigureItem) {\n    ConfigureItem[\"BROWSE_GALLERY\"] = \"marketplace\";\n    ConfigureItem[\"EXTENSIONS_VIEW\"] = \"extensions\";\n    ConfigureItem[\"CUSTOM_TOP_ENTRY\"] = \"customTopEntry\";\n})(ConfigureItem || (ConfigureItem = {}))));\nlet MarketplaceThemesPicker = class MarketplaceThemesPicker {\n    constructor(getMarketplaceColorThemes, marketplaceQuery, extensionGalleryService, extensionManagementService, quickInputService, logService, progressService, paneCompositeService, dialogService) {\n        this.getMarketplaceColorThemes = getMarketplaceColorThemes;\n        this.marketplaceQuery = marketplaceQuery;\n        this.extensionGalleryService = extensionGalleryService;\n        this.extensionManagementService = extensionManagementService;\n        this.quickInputService = quickInputService;\n        this.logService = logService;\n        this.progressService = progressService;\n        this.paneCompositeService = paneCompositeService;\n        this.dialogService = dialogService;\n        this._marketplaceExtensions = ( (new Set()));\n        this._marketplaceThemes = [];\n        this._searchOngoing = false;\n        this._searchError = undefined;\n        this._onDidChange = ( (new Emitter()));\n        this._queryDelayer = ( (new ThrottledDelayer(200)));\n        this._installedExtensions = extensionManagementService.getInstalled().then(installed => {\n            const result = ( (new Set()));\n            for (const ext of installed) {\n                result.add(ext.identifier.id);\n            }\n            return result;\n        });\n    }\n    get themes() {\n        return this._marketplaceThemes;\n    }\n    get onDidChange() {\n        return this._onDidChange.event;\n    }\n    trigger(value) {\n        if (this._tokenSource) {\n            this._tokenSource.cancel();\n            this._tokenSource = undefined;\n        }\n        this._queryDelayer.trigger(() => {\n            this._tokenSource = ( (new CancellationTokenSource()));\n            return this.doSearch(value, this._tokenSource.token);\n        });\n    }\n    async doSearch(value, token) {\n        this._searchOngoing = true;\n        this._onDidChange.fire();\n        try {\n            const installedExtensions = await this._installedExtensions;\n            const options = { text: `${this.marketplaceQuery} ${value}`, pageSize: 20 };\n            const pager = await this.extensionGalleryService.query(options, token);\n            for (let i = 0; i < pager.total && i < 1; i++) {\n                if (token.isCancellationRequested) {\n                    break;\n                }\n                const nThemes = this._marketplaceThemes.length;\n                const gallery = i === 0 ? pager.firstPage : await pager.getPage(i, token);\n                const promises = [];\n                const promisesGalleries = [];\n                for (let i = 0; i < gallery.length; i++) {\n                    if (token.isCancellationRequested) {\n                        break;\n                    }\n                    const ext = gallery[i];\n                    if (!( (installedExtensions.has(ext.identifier.id))) && !( (this._marketplaceExtensions.has(ext.identifier.id)))) {\n                        this._marketplaceExtensions.add(ext.identifier.id);\n                        promises.push(this.getMarketplaceColorThemes(ext.publisher, ext.name, ext.version));\n                        promisesGalleries.push(ext);\n                    }\n                }\n                const allThemes = await Promise.all(promises);\n                for (let i = 0; i < allThemes.length; i++) {\n                    const ext = promisesGalleries[i];\n                    for (const theme of allThemes[i]) {\n                        this._marketplaceThemes.push({ id: theme.id, theme: theme, label: theme.label, description: `${ext.displayName} · ${ext.publisherDisplayName}`, galleryExtension: ext, buttons: [configureButton] });\n                    }\n                }\n                if (nThemes !== this._marketplaceThemes.length) {\n                    this._marketplaceThemes.sort((t1, t2) => t1.label.localeCompare(t2.label));\n                    this._onDidChange.fire();\n                }\n            }\n        }\n        catch (e) {\n            if (!isCancellationError(e)) {\n                this.logService.error(`Error while searching for themes:`, e);\n                this._searchError = 'message' in e ? e.message : String(e);\n            }\n        }\n        finally {\n            this._searchOngoing = false;\n            this._onDidChange.fire();\n        }\n    }\n    openQuickPick(value, currentTheme, selectTheme) {\n        let result = undefined;\n        return (\n             (new Promise((s, _) => {\n                const quickpick = this.quickInputService.createQuickPick();\n                quickpick.items = [];\n                quickpick.sortByLabel = false;\n                quickpick.matchOnDescription = true;\n                quickpick.buttons = [this.quickInputService.backButton];\n                quickpick.title = 'Marketplace Themes';\n                quickpick.placeholder = ( localizeWithPath(\n                    _moduleId,\n                    1,\n                    \"Type to Search More. Select to Install. Up/Down Keys to Preview\"\n                ));\n                quickpick.canSelectMany = false;\n                quickpick.onDidChangeValue(() => this.trigger(quickpick.value));\n                quickpick.onDidAccept(async (_) => {\n                    const themeItem = quickpick.selectedItems[0];\n                    if (themeItem?.galleryExtension) {\n                        result = 'selected';\n                        quickpick.hide();\n                        const success = await this.installExtension(themeItem.galleryExtension);\n                        if (success) {\n                            selectTheme(themeItem.theme, true);\n                        }\n                        else {\n                            selectTheme(currentTheme, true);\n                        }\n                    }\n                });\n                quickpick.onDidTriggerItemButton(e => {\n                    if (isItem(e.item)) {\n                        const extensionId = e.item.theme?.extensionData?.extensionId;\n                        if (extensionId) {\n                            openExtensionViewlet(this.paneCompositeService, `@id:${extensionId}`);\n                        }\n                        else {\n                            openExtensionViewlet(this.paneCompositeService, `${this.marketplaceQuery} ${quickpick.value}`);\n                        }\n                    }\n                });\n                quickpick.onDidChangeActive(themes => {\n                    if (result === undefined) {\n                        selectTheme(themes[0]?.theme, false);\n                    }\n                });\n                quickpick.onDidHide(() => {\n                    if (result === undefined) {\n                        selectTheme(currentTheme, true);\n                        result = 'cancelled';\n                    }\n                    quickpick.dispose();\n                    s(result);\n                });\n                quickpick.onDidTriggerButton(e => {\n                    if (e === this.quickInputService.backButton) {\n                        result = 'back';\n                        quickpick.hide();\n                    }\n                });\n                this.onDidChange(() => {\n                    let items = this.themes;\n                    if (this._searchOngoing) {\n                        items = items.concat({ label: '$(sync~spin) Searching for themes...', id: undefined, alwaysShow: true });\n                    }\n                    else if (items.length === 0 && this._searchError) {\n                        items = [{ label: `$(error) ${( localizeWithPath(_moduleId, 2, 'Error while searching for themes: {0}', this._searchError))}`, id: undefined, alwaysShow: true }];\n                    }\n                    const activeItemId = quickpick.activeItems[0]?.id;\n                    const newActiveItem = activeItemId ? items.find(i => isItem(i) && i.id === activeItemId) : undefined;\n                    quickpick.items = items;\n                    if (newActiveItem) {\n                        quickpick.activeItems = [newActiveItem];\n                    }\n                });\n                this.trigger(value);\n                quickpick.show();\n            }))\n        );\n    }\n    async installExtension(galleryExtension) {\n        openExtensionViewlet(this.paneCompositeService, `@id:${galleryExtension.identifier.id}`);\n        const result = await this.dialogService.confirm({\n            message: ( localizeWithPath(\n                _moduleId,\n                3,\n                \"This will install extension '{0}' published by '{1}'. Do you want to continue?\",\n                galleryExtension.displayName,\n                galleryExtension.publisherDisplayName\n            )),\n            primaryButton: ( localizeWithPath(_moduleId, 4, \"OK\"))\n        });\n        if (!result.confirmed) {\n            return false;\n        }\n        try {\n            await this.progressService.withProgress({\n                location: 15 ,\n                title: ( localizeWithPath(_moduleId, 5, \"Installing Extension {0}...\", galleryExtension.displayName))\n            }, async () => {\n                await this.extensionManagementService.installFromGallery(galleryExtension, {\n                    isMachineScoped: false,\n                });\n            });\n            return true;\n        }\n        catch (e) {\n            this.logService.error(`Problem installing extension ${galleryExtension.identifier.id}`, e);\n            return false;\n        }\n    }\n    dispose() {\n        if (this._tokenSource) {\n            this._tokenSource.cancel();\n            this._tokenSource = undefined;\n        }\n        this._queryDelayer.dispose();\n        this._marketplaceExtensions.clear();\n        this._marketplaceThemes.length = 0;\n    }\n};\nMarketplaceThemesPicker = ( (__decorate([\n    ( (__param(2, IExtensionGalleryService))),\n    ( (__param(3, IExtensionManagementService))),\n    ( (__param(4, IQuickInputService))),\n    ( (__param(5, ILogService))),\n    ( (__param(6, IProgressService))),\n    ( (__param(7, IPaneCompositePartService))),\n    ( (__param(8, IDialogService)))\n], MarketplaceThemesPicker)));\nlet InstalledThemesPicker = class InstalledThemesPicker {\n    constructor(options, setTheme, getMarketplaceColorThemes, quickInputService, extensionGalleryService, paneCompositeService, extensionResourceLoaderService, instantiationService) {\n        this.options = options;\n        this.setTheme = setTheme;\n        this.getMarketplaceColorThemes = getMarketplaceColorThemes;\n        this.quickInputService = quickInputService;\n        this.extensionGalleryService = extensionGalleryService;\n        this.paneCompositeService = paneCompositeService;\n        this.extensionResourceLoaderService = extensionResourceLoaderService;\n        this.instantiationService = instantiationService;\n    }\n    async openQuickPick(picks, currentTheme) {\n        let marketplaceThemePicker;\n        if (this.extensionGalleryService.isEnabled()) {\n            if (this.extensionResourceLoaderService.supportsExtensionGalleryResources && this.options.browseMessage) {\n                marketplaceThemePicker = this.instantiationService.createInstance(MarketplaceThemesPicker, this.getMarketplaceColorThemes.bind(this), this.options.marketplaceTag);\n                picks = [configurationEntry(this.options.browseMessage, ConfigureItem.BROWSE_GALLERY), ...picks];\n            }\n            else {\n                picks = [...picks, { type: 'separator' }, configurationEntry(this.options.installMessage, ConfigureItem.EXTENSIONS_VIEW)];\n            }\n        }\n        let selectThemeTimeout;\n        const selectTheme = (theme, applyTheme) => {\n            if (selectThemeTimeout) {\n                clearTimeout(selectThemeTimeout);\n            }\n            selectThemeTimeout = mainWindow.setTimeout(() => {\n                selectThemeTimeout = undefined;\n                const newTheme = (theme ?? currentTheme);\n                this.setTheme(newTheme, applyTheme ? 'auto' : 'preview').then(undefined, err => {\n                    onUnexpectedError(err);\n                    this.setTheme(currentTheme, undefined);\n                });\n            }, applyTheme ? 0 : 200);\n        };\n        const pickInstalledThemes = (activeItemId) => {\n            return (\n                 (new Promise((s, _) => {\n                    let isCompleted = false;\n                    const disposables = ( (new DisposableStore()));\n                    const autoFocusIndex = picks.findIndex(p => isItem(p) && p.id === activeItemId);\n                    const quickpick = this.quickInputService.createQuickPick();\n                    quickpick.items = picks;\n                    quickpick.title = this.options.title;\n                    quickpick.description = this.options.description;\n                    quickpick.placeholder = this.options.placeholderMessage;\n                    quickpick.activeItems = [picks[autoFocusIndex]];\n                    quickpick.canSelectMany = false;\n                    quickpick.toggles = this.options.toggles;\n                    quickpick.toggles?.forEach(toggle => {\n                        toggle.onChange(() => this.options.onToggle?.(toggle, quickpick), undefined, disposables);\n                    });\n                    quickpick.matchOnDescription = true;\n                    quickpick.onDidAccept(async (_) => {\n                        isCompleted = true;\n                        const theme = quickpick.selectedItems[0];\n                        if (!theme || theme.configureItem) {\n                            if (!theme || theme.configureItem === ConfigureItem.EXTENSIONS_VIEW) {\n                                openExtensionViewlet(this.paneCompositeService, `${this.options.marketplaceTag} ${quickpick.value}`);\n                            }\n                            else if (theme.configureItem === ConfigureItem.BROWSE_GALLERY) {\n                                if (marketplaceThemePicker) {\n                                    const res = await marketplaceThemePicker.openQuickPick(quickpick.value, currentTheme, selectTheme);\n                                    if (res === 'back') {\n                                        await pickInstalledThemes(undefined);\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            selectTheme(theme.theme, true);\n                        }\n                        quickpick.hide();\n                        s();\n                    });\n                    quickpick.onDidChangeActive(themes => selectTheme(themes[0]?.theme, false));\n                    quickpick.onDidHide(() => {\n                        if (!isCompleted) {\n                            selectTheme(currentTheme, true);\n                            s();\n                        }\n                        quickpick.dispose();\n                        disposables.dispose();\n                    });\n                    quickpick.onDidTriggerItemButton(e => {\n                        if (isItem(e.item)) {\n                            const extensionId = e.item.theme?.extensionData?.extensionId;\n                            if (extensionId) {\n                                openExtensionViewlet(this.paneCompositeService, `@id:${extensionId}`);\n                            }\n                            else {\n                                openExtensionViewlet(this.paneCompositeService, `${this.options.marketplaceTag} ${quickpick.value}`);\n                            }\n                        }\n                    });\n                    quickpick.show();\n                }))\n            );\n        };\n        await pickInstalledThemes(currentTheme.id);\n        marketplaceThemePicker?.dispose();\n    }\n};\nInstalledThemesPicker = ( (__decorate([\n    ( (__param(3, IQuickInputService))),\n    ( (__param(4, IExtensionGalleryService))),\n    ( (__param(5, IPaneCompositePartService))),\n    ( (__param(6, IExtensionResourceLoaderService))),\n    ( (__param(7, IInstantiationService)))\n], InstalledThemesPicker)));\nconst SelectColorThemeCommandId = 'workbench.action.selectTheme';\nregisterAction2(class extends Action2 {\n    constructor() {\n        super({\n            id: SelectColorThemeCommandId,\n            title: ( localize2WithPath(_moduleId, 6, 'Color Theme')),\n            category: Categories.Preferences,\n            f1: true,\n            keybinding: {\n                weight: 200 ,\n                primary: KeyChord(2048  | 41 , 2048  | 50 )\n            }\n        });\n    }\n    getTitle(colorScheme) {\n        switch (colorScheme) {\n            case ColorScheme.DARK: return ( localizeWithPath(_moduleId, 7, \"Select Color Theme for System Dark Mode\"));\n            case ColorScheme.LIGHT: return ( localizeWithPath(_moduleId, 8, \"Select Color Theme for System Light Mode\"));\n            case ColorScheme.HIGH_CONTRAST_DARK: return ( localizeWithPath(_moduleId, 9, \"Select Color Theme for High Contrast Dark Mode\"));\n            case ColorScheme.HIGH_CONTRAST_LIGHT: return ( localizeWithPath(_moduleId, 10, \"Select Color Theme for High Contrast Light Mode\"));\n            default:\n                return ( localizeWithPath(_moduleId, 11, \"Select Color Theme (detect system color mode disabled)\"));\n        }\n    }\n    async run(accessor) {\n        const themeService = accessor.get(IWorkbenchThemeService);\n        const preferencesService = accessor.get(IPreferencesService);\n        const preferredColorScheme = themeService.getPreferredColorScheme();\n        let modeConfigureToggle;\n        if (preferredColorScheme) {\n            modeConfigureToggle = ( (new Toggle({\n                title: ( localizeWithPath(_moduleId, 12, 'Detect system color mode enabled. Click to configure.')),\n                icon: Codicon.colorMode,\n                isChecked: false,\n                ...defaultToggleStyles\n            })));\n        }\n        else {\n            modeConfigureToggle = ( (new Toggle({\n                title: ( localizeWithPath(_moduleId, 13, 'Detect system color mode disabled. Click to configure.')),\n                icon: Codicon.colorMode,\n                isChecked: false,\n                ...defaultToggleStyles\n            })));\n        }\n        const options = {\n            installMessage: ( localizeWithPath(_moduleId, 14, \"Install Additional Color Themes...\")),\n            browseMessage: '$(plus) ' + ( localizeWithPath(_moduleId, 15, \"Browse Additional Color Themes...\")),\n            placeholderMessage: this.getTitle(preferredColorScheme),\n            marketplaceTag: 'category:themes',\n            toggles: [modeConfigureToggle],\n            onToggle: async (toggle, picker) => {\n                picker.hide();\n                await preferencesService.openSettings({ query: ThemeSettings.DETECT_COLOR_SCHEME });\n            }\n        };\n        const setTheme = (theme, settingsTarget) => themeService.setColorTheme(theme, settingsTarget);\n        const getMarketplaceColorThemes = (publisher, name, version) => themeService.getMarketplaceColorThemes(publisher, name, version);\n        const instantiationService = accessor.get(IInstantiationService);\n        const picker = instantiationService.createInstance(InstalledThemesPicker, options, setTheme, getMarketplaceColorThemes);\n        const themes = await themeService.getColorThemes();\n        const currentTheme = themeService.getColorTheme();\n        const lightEntries = toEntries(themes.filter(t => t.type === ColorScheme.LIGHT), ( localizeWithPath(_moduleId, 16, \"light themes\")));\n        const darkEntries = toEntries(themes.filter(t => t.type === ColorScheme.DARK), ( localizeWithPath(_moduleId, 17, \"dark themes\")));\n        const hcEntries = toEntries(themes.filter(t => isHighContrast(t.type)), ( localizeWithPath(_moduleId, 18, \"high contrast themes\")));\n        let picks;\n        switch (preferredColorScheme) {\n            case ColorScheme.DARK:\n                picks = [...darkEntries, ...lightEntries, ...hcEntries];\n                break;\n            case ColorScheme.HIGH_CONTRAST_DARK:\n            case ColorScheme.HIGH_CONTRAST_LIGHT:\n                picks = [...hcEntries, ...lightEntries, ...darkEntries];\n                break;\n            case ColorScheme.LIGHT:\n            default:\n                picks = [...lightEntries, ...darkEntries, ...hcEntries];\n                break;\n        }\n        await picker.openQuickPick(picks, currentTheme);\n    }\n});\nconst SelectFileIconThemeCommandId = 'workbench.action.selectIconTheme';\nregisterAction2(class extends Action2 {\n    constructor() {\n        super({\n            id: SelectFileIconThemeCommandId,\n            title: ( localize2WithPath(_moduleId, 19, 'File Icon Theme')),\n            category: Categories.Preferences,\n            f1: true\n        });\n    }\n    async run(accessor) {\n        const themeService = accessor.get(IWorkbenchThemeService);\n        const options = {\n            installMessage: ( localizeWithPath(_moduleId, 20, \"Install Additional File Icon Themes...\")),\n            placeholderMessage: ( localizeWithPath(_moduleId, 21, \"Select File Icon Theme (Up/Down Keys to Preview)\")),\n            marketplaceTag: 'tag:icon-theme'\n        };\n        const setTheme = (theme, settingsTarget) => themeService.setFileIconTheme(theme, settingsTarget);\n        const getMarketplaceColorThemes = (publisher, name, version) => themeService.getMarketplaceFileIconThemes(publisher, name, version);\n        const instantiationService = accessor.get(IInstantiationService);\n        const picker = instantiationService.createInstance(InstalledThemesPicker, options, setTheme, getMarketplaceColorThemes);\n        const picks = [\n            { type: 'separator', label: ( localizeWithPath(_moduleId, 22, 'file icon themes')) },\n            { id: '', theme: FileIconThemeData.noIconTheme, label: ( localizeWithPath(_moduleId, 23, 'None')), description: ( localizeWithPath(_moduleId, 24, 'Disable File Icons')) },\n            ...toEntries(await themeService.getFileIconThemes()),\n        ];\n        await picker.openQuickPick(picks, themeService.getFileIconTheme());\n    }\n});\nconst SelectProductIconThemeCommandId = 'workbench.action.selectProductIconTheme';\nregisterAction2(class extends Action2 {\n    constructor() {\n        super({\n            id: SelectProductIconThemeCommandId,\n            title: ( localize2WithPath(_moduleId, 25, 'Product Icon Theme')),\n            category: Categories.Preferences,\n            f1: true\n        });\n    }\n    async run(accessor) {\n        const themeService = accessor.get(IWorkbenchThemeService);\n        const options = {\n            installMessage: ( localizeWithPath(_moduleId, 26, \"Install Additional Product Icon Themes...\")),\n            browseMessage: '$(plus) ' + ( localizeWithPath(_moduleId, 27, \"Browse Additional Product Icon Themes...\")),\n            placeholderMessage: ( localizeWithPath(_moduleId, 28, \"Select Product Icon Theme (Up/Down Keys to Preview)\")),\n            marketplaceTag: 'tag:product-icon-theme'\n        };\n        const setTheme = (theme, settingsTarget) => themeService.setProductIconTheme(theme, settingsTarget);\n        const getMarketplaceColorThemes = (publisher, name, version) => themeService.getMarketplaceProductIconThemes(publisher, name, version);\n        const instantiationService = accessor.get(IInstantiationService);\n        const picker = instantiationService.createInstance(InstalledThemesPicker, options, setTheme, getMarketplaceColorThemes);\n        const picks = [\n            { type: 'separator', label: ( localizeWithPath(_moduleId, 29, 'product icon themes')) },\n            { id: DEFAULT_PRODUCT_ICON_THEME_ID, theme: ProductIconThemeData.defaultTheme, label: ( localizeWithPath(_moduleId, 30, 'Default')) },\n            ...toEntries(await themeService.getProductIconThemes()),\n        ];\n        await picker.openQuickPick(picks, themeService.getProductIconTheme());\n    }\n});\nCommandsRegistry.registerCommand('workbench.action.previewColorTheme', async function (accessor, extension, themeSettingsId) {\n    const themeService = accessor.get(IWorkbenchThemeService);\n    let themes = findBuiltInThemes(await themeService.getColorThemes(), extension);\n    if (themes.length === 0) {\n        themes = await themeService.getMarketplaceColorThemes(extension.publisher, extension.name, extension.version);\n    }\n    for (const theme of themes) {\n        if (!themeSettingsId || theme.settingsId === themeSettingsId) {\n            await themeService.setColorTheme(theme, 'preview');\n            return theme.settingsId;\n        }\n    }\n    return undefined;\n});\nfunction findBuiltInThemes(themes, extension) {\n    return themes.filter(({ extensionData }) => extensionData && extensionData.extensionIsBuiltin && equalsIgnoreCase(extensionData.extensionPublisher, extension.publisher) && equalsIgnoreCase(extensionData.extensionName, extension.name));\n}\nfunction configurationEntry(label, configureItem) {\n    return {\n        id: undefined,\n        label: label,\n        alwaysShow: true,\n        buttons: [configureButton],\n        configureItem: configureItem\n    };\n}\nfunction openExtensionViewlet(paneCompositeService, query) {\n    return paneCompositeService.openPaneComposite(VIEWLET_ID, 0 , true).then(viewlet => {\n        if (viewlet) {\n            (viewlet?.getViewPaneContainer()).search(query);\n            viewlet.focus();\n        }\n    });\n}\nfunction isItem(i) {\n    return i['type'] !== 'separator';\n}\nfunction toEntry(theme) {\n    const settingId = theme.settingsId ?? undefined;\n    const item = {\n        id: theme.id,\n        theme: theme,\n        label: theme.label,\n        description: theme.description || (theme.label === settingId ? undefined : settingId),\n    };\n    if (theme.extensionData) {\n        item.buttons = [configureButton];\n    }\n    return item;\n}\nfunction toEntries(themes, label) {\n    const sorter = (t1, t2) => t1.label.localeCompare(t2.label);\n    const entries = ( (themes.map(toEntry))).sort(sorter);\n    if (entries.length > 0 && label) {\n        entries.unshift({ type: 'separator', label });\n    }\n    return entries;\n}\nconst configureButton = {\n    iconClass: ThemeIcon.asClassName(manageExtensionIcon),\n    tooltip: ( localizeWithPath(_moduleId, 31, \"Manage Extension\")),\n};\nregisterAction2(class extends Action2 {\n    constructor() {\n        super({\n            id: 'workbench.action.generateColorTheme',\n            title: ( localize2WithPath(_moduleId, 32, 'Generate Color Theme From Current Settings')),\n            category: Categories.Developer,\n            f1: true\n        });\n    }\n    run(accessor) {\n        const themeService = accessor.get(IWorkbenchThemeService);\n        const theme = themeService.getColorTheme();\n        const colors = ( (Registry.as(Extensions.ColorContribution))).getColors();\n        const colorIds = ( (colors.map(c => c.id))).sort();\n        const resultingColors = {};\n        const inherited = [];\n        for (const colorId of colorIds) {\n            const color = theme.getColor(colorId, false);\n            if (color) {\n                resultingColors[colorId] = Color.Format.CSS.formatHexA(color, true);\n            }\n            else {\n                inherited.push(colorId);\n            }\n        }\n        const nullDefaults = [];\n        for (const id of inherited) {\n            const color = theme.getColor(id);\n            if (color) {\n                resultingColors['__' + id] = Color.Format.CSS.formatHexA(color, true);\n            }\n            else {\n                nullDefaults.push(id);\n            }\n        }\n        for (const id of nullDefaults) {\n            resultingColors['__' + id] = null;\n        }\n        let contents = JSON.stringify({\n            '$schema': colorThemeSchemaId,\n            type: theme.type,\n            colors: resultingColors,\n            tokenColors: theme.tokenColors.filter(t => !!t.scope)\n        }, null, '\\t');\n        contents = contents.replace(/\\\"__/g, '//\"');\n        const editorService = accessor.get(IEditorService);\n        return editorService.openEditor({ resource: undefined, contents, languageId: 'jsonc', options: { pinned: true } });\n    }\n});\nconst toggleLightDarkThemesCommandId = 'workbench.action.toggleLightDarkThemes';\nregisterAction2(class extends Action2 {\n    constructor() {\n        super({\n            id: toggleLightDarkThemesCommandId,\n            title: ( localize2WithPath(_moduleId, 33, 'Toggle between Light/Dark Themes')),\n            category: Categories.Preferences,\n            f1: true,\n        });\n    }\n    async run(accessor) {\n        const themeService = accessor.get(IWorkbenchThemeService);\n        const configurationService = accessor.get(IConfigurationService);\n        const notificationService = accessor.get(INotificationService);\n        const preferencesService = accessor.get(IPreferencesService);\n        if (configurationService.getValue(ThemeSettings.DETECT_COLOR_SCHEME)) {\n            const message = ( localizeWithPath(\n                _moduleId,\n                34,\n                \"Cannot toggle between light and dark themes when `{0}` is enabled in settings.\",\n                ThemeSettings.DETECT_COLOR_SCHEME\n            ));\n            notificationService.prompt(Severity$1.Info, message, [\n                {\n                    label: ( localizeWithPath(_moduleId, 35, \"Open Settings\")),\n                    run: () => {\n                        return preferencesService.openUserSettings({ query: ThemeSettings.DETECT_COLOR_SCHEME });\n                    }\n                }\n            ]);\n            return;\n        }\n        const currentTheme = themeService.getColorTheme();\n        let newSettingsId = ThemeSettings.PREFERRED_DARK_THEME;\n        switch (currentTheme.type) {\n            case ColorScheme.LIGHT:\n                newSettingsId = ThemeSettings.PREFERRED_DARK_THEME;\n                break;\n            case ColorScheme.DARK:\n                newSettingsId = ThemeSettings.PREFERRED_LIGHT_THEME;\n                break;\n            case ColorScheme.HIGH_CONTRAST_LIGHT:\n                newSettingsId = ThemeSettings.PREFERRED_HC_DARK_THEME;\n                break;\n            case ColorScheme.HIGH_CONTRAST_DARK:\n                newSettingsId = ThemeSettings.PREFERRED_HC_LIGHT_THEME;\n                break;\n        }\n        const themeSettingId = configurationService.getValue(newSettingsId);\n        if (themeSettingId && typeof themeSettingId === 'string') {\n            const theme = (await themeService.getColorThemes()).find(t => t.settingsId === themeSettingId);\n            if (theme) {\n                themeService.setColorTheme(theme.id, 'auto');\n            }\n        }\n    }\n});\nconst browseColorThemesInMarketplaceCommandId = 'workbench.action.browseColorThemesInMarketplace';\nregisterAction2(class extends Action2 {\n    constructor() {\n        super({\n            id: browseColorThemesInMarketplaceCommandId,\n            title: ( localize2WithPath(_moduleId, 36, 'Browse Color Themes in Marketplace')),\n            category: Categories.Preferences,\n            f1: true,\n        });\n    }\n    async run(accessor) {\n        const marketplaceTag = 'category:themes';\n        const themeService = accessor.get(IWorkbenchThemeService);\n        const extensionGalleryService = accessor.get(IExtensionGalleryService);\n        const extensionResourceLoaderService = accessor.get(IExtensionResourceLoaderService);\n        const instantiationService = accessor.get(IInstantiationService);\n        if (!extensionGalleryService.isEnabled() || !extensionResourceLoaderService.supportsExtensionGalleryResources) {\n            return;\n        }\n        const currentTheme = themeService.getColorTheme();\n        const getMarketplaceColorThemes = (publisher, name, version) => themeService.getMarketplaceColorThemes(publisher, name, version);\n        let selectThemeTimeout;\n        const selectTheme = (theme, applyTheme) => {\n            if (selectThemeTimeout) {\n                clearTimeout(selectThemeTimeout);\n            }\n            selectThemeTimeout = mainWindow.setTimeout(() => {\n                selectThemeTimeout = undefined;\n                const newTheme = (theme ?? currentTheme);\n                themeService.setColorTheme(newTheme, applyTheme ? 'auto' : 'preview').then(undefined, err => {\n                    onUnexpectedError(err);\n                    themeService.setColorTheme(currentTheme, undefined);\n                });\n            }, applyTheme ? 0 : 200);\n        };\n        const marketplaceThemePicker = instantiationService.createInstance(MarketplaceThemesPicker, getMarketplaceColorThemes, marketplaceTag);\n        await marketplaceThemePicker.openQuickPick('', themeService.getColorTheme(), selectTheme).then(undefined, onUnexpectedError);\n    }\n});\nconst ThemesSubMenu = ( (new MenuId('ThemesSubMenu')));\nMenuRegistry.appendMenuItem(MenuId.GlobalActivity, {\n    title: ( localizeWithPath(_moduleId, 37, \"Themes\")),\n    submenu: ThemesSubMenu,\n    group: '2_configuration',\n    order: 7\n});\nMenuRegistry.appendMenuItem(MenuId.MenubarPreferencesMenu, {\n    title: ( localizeWithPath(_moduleId, 38, \"&&Theme\")),\n    submenu: ThemesSubMenu,\n    group: '2_configuration',\n    order: 7\n});\nMenuRegistry.appendMenuItem(ThemesSubMenu, {\n    command: {\n        id: SelectColorThemeCommandId,\n        title: ( localizeWithPath(_moduleId, 6, 'Color Theme'))\n    },\n    order: 1\n});\nMenuRegistry.appendMenuItem(ThemesSubMenu, {\n    command: {\n        id: SelectFileIconThemeCommandId,\n        title: ( localizeWithPath(_moduleId, 39, \"File Icon Theme\"))\n    },\n    order: 2\n});\nMenuRegistry.appendMenuItem(ThemesSubMenu, {\n    command: {\n        id: SelectProductIconThemeCommandId,\n        title: ( localizeWithPath(_moduleId, 40, \"Product Icon Theme\"))\n    },\n    order: 3\n});\nlet DefaultThemeUpdatedNotificationContribution = class DefaultThemeUpdatedNotificationContribution {\n    static { DefaultThemeUpdatedNotificationContribution_1 = this; }\n    static { this.STORAGE_KEY = 'themeUpdatedNotificationShown'; }\n    constructor(_notificationService, _workbenchThemeService, _storageService, _commandService, _telemetryService, _hostService) {\n        this._notificationService = _notificationService;\n        this._workbenchThemeService = _workbenchThemeService;\n        this._storageService = _storageService;\n        this._commandService = _commandService;\n        this._telemetryService = _telemetryService;\n        this._hostService = _hostService;\n        if (_storageService.getBoolean(DefaultThemeUpdatedNotificationContribution_1.STORAGE_KEY, -1 )) {\n            return;\n        }\n        setTimeout(async () => {\n            if (_storageService.getBoolean(DefaultThemeUpdatedNotificationContribution_1.STORAGE_KEY, -1 )) {\n                return;\n            }\n            if (await this._hostService.hadLastFocus()) {\n                this._storageService.store(DefaultThemeUpdatedNotificationContribution_1.STORAGE_KEY, true, -1 , 0 );\n                if (this._workbenchThemeService.hasUpdatedDefaultThemes()) {\n                    this._showYouGotMigratedNotification();\n                }\n                else {\n                    const currentTheme = this._workbenchThemeService.getColorTheme().settingsId;\n                    if (currentTheme === ThemeSettingDefaults.COLOR_THEME_LIGHT_OLD || currentTheme === ThemeSettingDefaults.COLOR_THEME_DARK_OLD) {\n                        this._tryNewThemeNotification();\n                    }\n                }\n            }\n        }, 3000);\n    }\n    async _showYouGotMigratedNotification() {\n        const usingLight = this._workbenchThemeService.getColorTheme().type === ColorScheme.LIGHT;\n        const newThemeSettingsId = usingLight ? ThemeSettingDefaults.COLOR_THEME_LIGHT : ThemeSettingDefaults.COLOR_THEME_DARK;\n        const newTheme = (await this._workbenchThemeService.getColorThemes()).find(theme => theme.settingsId === newThemeSettingsId);\n        if (newTheme) {\n            const choices = [\n                {\n                    label: ( localizeWithPath(_moduleId, 41, \"Keep New Theme\")),\n                    run: () => {\n                        this._writeTelemetry('keepNew');\n                    }\n                },\n                {\n                    label: ( localizeWithPath(_moduleId, 42, \"Browse Themes\")),\n                    run: () => {\n                        this._writeTelemetry('browse');\n                        this._commandService.executeCommand(SelectColorThemeCommandId);\n                    }\n                },\n                {\n                    label: ( localizeWithPath(_moduleId, 43, \"Revert\")),\n                    run: async () => {\n                        this._writeTelemetry('keepOld');\n                        const oldSettingsId = usingLight ? ThemeSettingDefaults.COLOR_THEME_LIGHT_OLD : ThemeSettingDefaults.COLOR_THEME_DARK_OLD;\n                        const oldTheme = (await this._workbenchThemeService.getColorThemes()).find(theme => theme.settingsId === oldSettingsId);\n                        if (oldTheme) {\n                            this._workbenchThemeService.setColorTheme(oldTheme, 'auto');\n                        }\n                    }\n                }\n            ];\n            await this._notificationService.prompt(Severity$1.Info, ( localizeWithPath(\n                _moduleId,\n                44,\n                \"Visual Studio Code now ships with a new default theme '{0}'. If you prefer, you can switch back to the old theme or try one of the many other color themes available.\",\n                newTheme.label\n            )), choices, {\n                onCancel: () => this._writeTelemetry('cancel')\n            });\n        }\n    }\n    async _tryNewThemeNotification() {\n        const newThemeSettingsId = this._workbenchThemeService.getColorTheme().type === ColorScheme.LIGHT ? ThemeSettingDefaults.COLOR_THEME_LIGHT : ThemeSettingDefaults.COLOR_THEME_DARK;\n        const theme = (await this._workbenchThemeService.getColorThemes()).find(theme => theme.settingsId === newThemeSettingsId);\n        if (theme) {\n            const choices = [{\n                    label: ( localizeWithPath(_moduleId, 45, \"Try New Theme\")),\n                    run: () => {\n                        this._writeTelemetry('tryNew');\n                        this._workbenchThemeService.setColorTheme(theme, 'auto');\n                    }\n                },\n                {\n                    label: ( localizeWithPath(_moduleId, 46, \"Cancel\")),\n                    run: () => {\n                        this._writeTelemetry('cancel');\n                    }\n                }];\n            await this._notificationService.prompt(Severity$1.Info, ( localizeWithPath(\n                _moduleId,\n                47,\n                \"Visual Studio Code now ships with a new default theme '{0}'. Do you want to give it a try?\",\n                theme.label\n            )), choices, { onCancel: () => this._writeTelemetry('cancel') });\n        }\n    }\n    _writeTelemetry(outcome) {\n        this._telemetryService.publicLog2('themeUpdatedNotication', {\n            web: isWeb,\n            reaction: outcome\n        });\n    }\n};\nDefaultThemeUpdatedNotificationContribution = DefaultThemeUpdatedNotificationContribution_1 = ( (__decorate([\n    ( (__param(0, INotificationService))),\n    ( (__param(1, IWorkbenchThemeService))),\n    ( (__param(2, IStorageService))),\n    ( (__param(3, ICommandService))),\n    ( (__param(4, ITelemetryService))),\n    ( (__param(5, IHostService)))\n], DefaultThemeUpdatedNotificationContribution)));\nconst workbenchRegistry = ( (Registry.as(Extensions$1.Workbench)));\nworkbenchRegistry.registerWorkbenchContribution(DefaultThemeUpdatedNotificationContribution, 4 );\n\nexport { manageExtensionIcon };\n","import { WorkbenchThemeService } from './vscode/src/vs/workbench/services/themes/browser/workbenchThemeService.js';\nimport { IThemeService } from 'vscode/vscode/vs/platform/theme/common/themeService.service';\nimport { SyncDescriptor } from 'vscode/vscode/vs/platform/instantiation/common/descriptors';\nimport getServiceOverride$1 from '@codingame/monaco-vscode-files-service-override';\nimport './vscode/src/vs/workbench/contrib/themes/browser/themes.contribution.js';\n\nclass StandaloneWorkbenchThemeService extends WorkbenchThemeService {\n    registerEditorContainer() {\n        return {\n            dispose() { }\n        };\n    }\n    setTheme(themeName) {\n        void this.getColorThemes().then(themes => {\n            setTimeout(() => {\n                void this.setColorTheme(themes.find(theme => theme.settingsId === themeName) ?? themeName, 8 );\n            });\n        });\n    }\n}\nfunction getServiceOverride() {\n    return {\n        ...getServiceOverride$1(),\n        [( IThemeService.toString())]: new SyncDescriptor(StandaloneWorkbenchThemeService, [], false)\n    };\n}\n\nexport { getServiceOverride as default };\n"],"names":["VS_LIGHT_THEME","VS_DARK_THEME","VS_HC_THEME","VS_HC_LIGHT_THEME","THEME_SCOPE_OPEN_PAREN","THEME_SCOPE_CLOSE_PAREN","THEME_SCOPE_WILDCARD","themeScopeRegex","ThemeSettings","ThemeSettingDefaults","COLOR_THEME_DARK_INITIAL_COLORS","COLOR_THEME_LIGHT_INITIAL_COLORS","ExtensionData","toJSONObject","d","fromJSONObject","isString","isBoolean","fromName","publisher","name","isBuiltin","settingToColorIdMapping","addSettingMapping","settingId","colorId","colorIds","convertSettings","oldSettings","result","rule","settings","settingKey","key","mappings","colorHex","color","Color","editorBackground","editorForeground","editorSelectionBackground","editorInactiveSelection","editorSelectionHighlight","editorFindMatchHighlight","editorFindMatch","editorHoverHighlight","editorFindRangeHighlight","editorLineHighlight","editorRangeHighlight","editorCursorForeground","editorWhitespaces","editorIndentGuide1","editorActiveIndentGuide1","ansiColorMap","parse","content","_parse","filename","locationKeyName","len","pos","advancePosBy","by","advancePosTo","to","skipWhitespace","chCode","advanceIfStartsWith","str","advanceUntil","nextOccurence","captureUntil","r","state","cur","stateStack","objStack","curKey","pushState","newState","newCur","popState","fail","msg","dictState","newDict","newArr","arrState","enterDict","leaveDict","enterArray","leaveArray","acceptKey","val","acceptString","acceptReal","acceptInteger","acceptDate","acceptData","acceptBool","escapeVal","_","m0","parseOpenTag","isClosed","parseTagValue","tag","peekChCode","createMatchers","selector","matchesName","results","tokenizer","newTokenizer","token","priority","matcher","parseConjunction","parseOperand","expressionToNegate","matcherInput","expressionInParents","parseInnerExpression","isIdentifier","identifiers","matchers","min","i","max","input","regex","match","res","_moduleId","colorRegistry","Registry","Extensions","tokenClassificationRegistry","getTokenClassificationRegistry","tokenGroupToScopesMap","_ColorThemeData","id","label","settingsId","addRule","hasDefaultTokens","normalizeColor","foreground","background","defaultThemeColors","useDefault","isUndefined","type","modifiers","language","definitions","score","_processStyle","matchScore","style","definition","p","property","info","_processSemanticTokenRule","hasUndefinedStyleProperty","k","tokenStyleValue","TokenStyle","parseClassifierString","index","TokenColorIndex","defaultColor","typeWithLanguage","defaultLanguage","scopes","getScopeMatcher","scope","findTokenStyleForScopeInScopes","scopeMatchers","themingRules","themingRule","foregroundScore","foregroundThemingRule","fontStyleScore","fontStyle","fontStyleThemingRule","colors","themeSpecificColors","isObject","colorVal","customTokenColors","themeSpecificTokenColors","semanticTokenColors","themeId","themeIdFirstChar","themeIdLastChar","themeIdPrefix","themeIdInfix","themeIdSuffix","scopedColors","themeScopeList","themeScope","scopedThemeSpecificColors","subkey","originalColors","overrideColors","tokenStylingRuleSection","readSemanticTokenRule","tokenGroup","group","value","extensionResourceLoaderService","_loadColorTheme","storageService","colorMapData","tc","SemanticTokenRule","ColorScheme","themeType","colorMap","getThemeTypeSelector","themeData","data","theme","rulesData","colorThemeLocation","extensionData","baseTheme","themeSelector","toCSSSelector","basename","ColorThemeData","extensionId","path","themeLocation","extname","errors","contentValue","localizeWithPath","e","getParseErrorMessage","getNodeType","joinPath","dirname","tokenColors","_loadSyntaxTokens","parse$1","error","noMatch","_scope","nameMatcher","identifers","findInIdents","s","lastIndent","scopesAreMatching","lastScopeIndex","lastIdentifierIndex","thisScopeName","scopeName","ruleScope","rs","selectorString","isSemanticTokenColorizationSetting","upper","hexUpper","charCode","fontIdRegex","fontStyleRegex","fontWeightRegex","fontSizeRegex","fontFormatRegex","schemaId","schema","iconsSchemaId","registerProductIconThemeSchemas","registerFileIconThemeSchemas","_FileIconThemeData","themeLoader","iconTheme","iconThemeLocation","FileIconThemeData","FileIconThemeLoader","fileService","languageService","iconThemeDocument","location","iconThemeDocumentLocation","hasSpecificFileIcons","selectorByDefinitionId","coveredLanguages","iconThemeDocumentLocationDirname","resolvePath","collectSelectors","associations","baseThemeClassName","addSelector","defId","list","qualifier","expanded","rootFolder","rootFolderExpanded","folderNames","selectors","handleParentFolder","escapeCSS","folderNamesExpanded","rootFolderNames","rootFolderNamesExpanded","languageIds","languageId","fileExtensions","segments","fileNames","fileName","showLanguageModeIcons","cssRules","fonts","fontSizes","defaultFontSize","font","src","l","asCSSUrl","body","fontSize","icon","lastIndexOfSlash","parentFolder","mainWindow","textMateScopes","textmateColorsSchemaId","textmateColorGroupSchemaId","textmateColorSchema","colorThemeSchemaId","colorThemeSchema","workbenchColorsSchemaId","tokenStylingSchemaId","registerColorThemeSchemas","schemaRegistry","registerColorThemeExtensionPoint","ExtensionsRegistry","registerFileIconThemeExtensionPoint","registerProductIconThemeExtensionPoint","ThemeDataRenderer","Disposable","manifest","_a","_b","_c","markdown","MarkdownString","SyncDescriptor","ThemeRegistry","themesExtPoint","create","idRequired","builtInTheme","Emitter","extensions","delta","previousIds","added","ext","removed","extensionLocation","themeContributions","resultingThemes","log","isEqualOrParent","allThemes","t","defaultSettingsId","defaultTheme","extLocation","themes","configurationRegistry","colorThemeSettingEnum","colorThemeSettingEnumItemLabels","colorThemeSettingEnumDescriptions","formatSettingAsLink","COLOR_THEME_CONFIGURATION_SETTINGS_TAG","colorThemeSettingSchema","isWeb","preferredDarkThemeSettingSchema","preferredLightThemeSettingSchema","preferredHCDarkThemeSettingSchema","preferredHCLightThemeSettingSchema","detectColorSchemeSettingSchema","colorCustomizationsSchema","fileIconThemeSettingSchema","productIconThemeSettingSchema","detectHCSchemeSettingSchema","themeSettingsConfiguration","themeSettingsWindowConfiguration","tokenGroupSettings","description","themeSpecificSettingKey","tokenColorSchema","tokenColorCustomizationSchema","semanticTokenColorSchema","semanticTokenColorCustomizationSchema","tokenColorCustomizationConfiguration","updateColorThemeConfigurationSchemas","b","themeSpecificWorkbenchColors","themeSpecificSemanticTokenColors","workbenchColors","updateFileIconThemeConfigurationSchemas","updateProductIconThemeConfigurationSchemas","colorSchemeToPreferred","ThemeConfiguration","configurationService","hostColorService","preferredScheme","settingsTarget","DEFAULT_PRODUCT_ICON_THEME_ID","_ProductIconThemeData","iconContribution","_resolveIconDefinition","logService","warnings","_loadProductIconThemeDocument","iconDefinitions","iconFontDefinitions","restoredIconDefinitions","entry","fontCharacter","fontId","iconFontDefinition","IconFontDefinition","ProductIconThemeData","parseErrors","sanitizedFonts","fontWeight","sanitizedSrc","iconFontLocation","primaryFontId","iconId","fontDefinition","iconRegistry","getIconRegistry","defaults","ThemeIcon","ic","defaultThemeExtensionId","DEFAULT_FILE_ICON_THEME_ID","fileIconsEnabledClass","colorThemeRulesClassName","fileIconThemeRulesClassName","productIconThemeRulesClassName","themingRegistry","validateThemeId","colorThemesExtPoint","fileIconThemesExtPoint","productIconThemesExtPoint","WorkbenchThemeService","extensionService","telemetryService","environmentService","layoutService","userDataInitializationService","ThemeFileWatcher","Sequencer","colorThemeSetting","defaultColorMap","initialColorTheme","fileIconData","productIconData","onUnexpectedError","codiconStyleSheet","createStyleSheet","iconsStyleSheet","getIconsStyleSheet","updateAll","delayer","RunOnceScheduler","extDevLocs","extDevLoc","initializeColorTheme","devThemes","matchedColorTheme","fallbackTheme","initializeFileIconTheme","initializeProductIconTheme","hasColorChanges","prevColorId","event","prevFileIconId","prevProductIconId","ct","fit","pit","version","manifestContent","themeIdOrTheme","ruleCollector","colorVariables","item","getColorRegistry","asCssVariableName","_applyRules","newTheme","silent","iconThemeOrId","newThemeData","getRemoteAuthority","iconThemeData","__decorate","__param","IExtensionService","IStorageService","IConfigurationService","ITelemetryService","IBrowserWorkbenchEnvironmentService","IFileService","IExtensionResourceLoaderService","IWorkbenchLayoutService","ILogService","IHostColorSchemeService","IUserDataInitializationService","ILanguageService","onUpdate","isEqual","dispose","styleSheetContent","rulesClassName","themeStyles","elStyle","DefaultThemeUpdatedNotificationContribution_1","manageExtensionIcon","registerIcon","Codicon","ConfigureItem","MarketplaceThemesPicker","getMarketplaceColorThemes","marketplaceQuery","extensionGalleryService","extensionManagementService","quickInputService","progressService","paneCompositeService","dialogService","ThrottledDelayer","installed","CancellationTokenSource","installedExtensions","options","pager","nThemes","gallery","promises","promisesGalleries","configureButton","t1","t2","isCancellationError","currentTheme","selectTheme","quickpick","themeItem","success","isItem","openExtensionViewlet","items","activeItemId","newActiveItem","galleryExtension","IExtensionGalleryService","IExtensionManagementService","IQuickInputService","IProgressService","IPaneCompositePartService","IDialogService","InstalledThemesPicker","setTheme","instantiationService","picks","marketplaceThemePicker","configurationEntry","selectThemeTimeout","applyTheme","err","pickInstalledThemes","isCompleted","disposables","DisposableStore","autoFocusIndex","toggle","IInstantiationService","SelectColorThemeCommandId","registerAction2","Action2","localize2WithPath","Categories","KeyChord","colorScheme","accessor","themeService","IWorkbenchThemeService","preferencesService","IPreferencesService","preferredColorScheme","modeConfigureToggle","Toggle","defaultToggleStyles","picker","lightEntries","toEntries","darkEntries","hcEntries","isHighContrast","SelectFileIconThemeCommandId","SelectProductIconThemeCommandId","CommandsRegistry","extension","themeSettingsId","findBuiltInThemes","equalsIgnoreCase","configureItem","query","VIEWLET_ID","viewlet","toEntry","sorter","entries","c","resultingColors","inherited","nullDefaults","contents","IEditorService","toggleLightDarkThemesCommandId","notificationService","INotificationService","message","Severity$1","newSettingsId","themeSettingId","browseColorThemesInMarketplaceCommandId","marketplaceTag","ThemesSubMenu","MenuId","MenuRegistry","DefaultThemeUpdatedNotificationContribution","_notificationService","_workbenchThemeService","_storageService","_commandService","_telemetryService","_hostService","usingLight","newThemeSettingsId","choices","oldSettingsId","oldTheme","outcome","ICommandService","IHostService","workbenchRegistry","Extensions$1","StandaloneWorkbenchThemeService","themeName","getServiceOverride","getServiceOverride$1","IThemeService"],"mappings":"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A,gHAC5B,EACwB,QAAS0I,EACZ,CACJ,EACD,SAAU,CACN,KACA,KACH,CACJ,CACJ,EACD,gBAAiB,CACb,KAAM,SACN,YAAehC,EACX1G,EACA,GACA,4EAChB,EACY,qBAAsB,CAClB,KAAM,SACN,YAAe0G,EACX1G,EACA,GACA,iEACpB,EACgB,WAAY,CACR,SAAU,CACN,KAAM,SACN,YAAe0G,EACX1G,EACA,GACA,4FAC5B,CACqB,EACD,cAAe,CACX,KAAM,SACN,YAAe0G,EACX1G,EACA,GACA,4DAC5B,CACqB,EACD,UAAW,CACP,KAAM,SACN,OAAQ,YACR,YAAe0G,EAAiB1G,EAAW,GAAI,4CAA4C,CAC9F,EACD,SAAU,CACN,KAAM,SACN,YAAe0G,EACX1G,EACA,GACA,2HAC5B,EACwB,QAAS0I,EACZ,EACD,OAAQ,CACJ,KAAM,SACN,YAAehC,EACX1G,EACA,GACA,2FAC5B,CACqB,CACJ,CACJ,CACJ,EACD,eAAgB,CACZ,KAAM,8BACT,EACD,OAAQ,CACJ,KAAM,sBACT,EACD,KAAM,CACF,KAAM,oBACT,EACD,YAAa,CACT,KAAM,2BACT,EACD,oBAAqB,CACjB,KAAM,mCACT,EACD,WAAY,CACR,KAAM,0BACT,EACD,mBAAoB,CAChB,KAAM,kCACT,EACD,gBAAiB,CACb,KAAM,+BACT,EACD,wBAAyB,CACrB,KAAM,uCACT,EACD,eAAgB,CACZ,KAAM,8BACT,EACD,UAAW,CACP,KAAM,yBACT,EACD,YAAa,CACT,KAAM,2BACT,EACD,MAAO,CACH,KAAM,6BACN,YAAe0G,EACX1G,EACA,GACA,6DAChB,CACS,EACD,aAAc,CACV,KAAM,6BACN,YAAe0G,EACX1G,EACA,GACA,qEAChB,CACS,EACD,oBAAqB,CACjB,KAAM,UACN,YAAe0G,EACX1G,EACA,GACA,2FAChB,CACS,EACD,sBAAuB,CACnB,KAAM,UACN,YAAe0G,EACX1G,EACA,GACA,mHAChB,CACS,CACJ,CACL,EACA,SAASgJ,IAA+B,CACV9I,GAAS,GAAGC,GAAW,gBAAgB,EAClD,eAAeyI,GAAUC,EAA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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]}